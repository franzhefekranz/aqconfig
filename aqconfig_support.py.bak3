#!/usr/bin/python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.5
#  in conjunction with Tcl version 8.6
#    Oct 19, 2020 05:33:40 PM CEST  platform: Windows NT
#    Oct 19, 2020 05:58:12 PM CEST  platform: Windows NT
#    Oct 20, 2020 10:22:20 AM CEST  platform: Windows NT
#    Oct 20, 2020 10:52:05 AM CEST  platform: Windows NT
#    Oct 20, 2020 11:29:48 AM CEST  platform: Windows NT
#    Oct 20, 2020 11:47:35 AM CEST  platform: Windows NT
#    Oct 20, 2020 04:00:02 PM CEST  platform: Windows NT
#    Oct 20, 2020 04:55:25 PM CEST  platform: Windows NT
#    Oct 22, 2020 02:47:43 PM CEST  platform: Windows NT
#    Oct 22, 2020 02:51:27 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:00:03 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:07:28 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:21:28 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:25:42 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:30:47 PM CEST  platform: Windows NT
#    Oct 22, 2020 03:46:01 PM CEST  platform: Windows NT
#    Oct 23, 2020 11:03:36 AM CEST  platform: Windows NT
#    Oct 23, 2020 03:59:05 PM CEST  platform: Windows NT
#    Oct 23, 2020 05:02:47 PM CEST  platform: Windows NT
#    Oct 23, 2020 05:15:39 PM CEST  platform: Windows NT
#    Oct 26, 2020 06:16:23 PM CET  platform: Windows NT
#    Oct 27, 2020 11:19:12 AM CET  platform: Windows NT
#    Oct 27, 2020 01:12:17 PM CET  platform: Windows NT
#    Oct 27, 2020 01:25:04 PM CET  platform: Windows NT
#    Oct 27, 2020 02:57:58 PM CET  platform: Windows NT
#    Oct 27, 2020 05:31:45 PM CET  platform: Windows NT
#    Oct 28, 2020 08:42:21 AM CET  platform: Windows NT
#    Oct 28, 2020 09:18:17 AM CET  platform: Windows NT
#    Oct 28, 2020 10:23:05 AM CET  platform: Windows NT
#    Oct 28, 2020 11:20:56 AM CET  platform: Windows NT
#    Oct 28, 2020 11:30:47 AM CET  platform: Windows NT
#    Oct 28, 2020 11:37:58 AM CET  platform: Windows NT
#    Oct 28, 2020 02:54:43 PM CET  platform: Windows NT
#    Oct 28, 2020 02:56:41 PM CET  platform: Windows NT
#    Oct 29, 2020 08:08:45 AM CET  platform: Windows NT
#    Oct 29, 2020 10:15:38 AM CET  platform: Windows NT
#    Oct 29, 2020 11:29:45 AM CET  platform: Windows NT
#    Oct 30, 2020 10:22:09 AM CET  platform: Windows NT
#    Oct 30, 2020 12:02:08 PM CET  platform: Windows NT
#    Oct 30, 2020 12:57:10 PM CET  platform: Windows NT
#    Nov 02, 2020 03:58:29 PM CET  platform: Windows NT
#    Nov 03, 2020 10:23:01 AM CET  platform: Windows NT
#    Nov 03, 2020 11:59:52 AM CET  platform: Windows NT
#    Nov 03, 2020 06:35:08 PM CET  platform: Windows NT

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#
#                      _       _        _                            _
#                     | |     | |      (_)                          | |
#  _ __ ___   ___   __| |_   _| | ___   _ _ __ ___  _ __   ___  _ __| |_
# | '_ ` _ \ / _ \ / _` | | | | |/ _ \ | | '_ ` _ \| '_ \ / _ \| '__| __|
# | | | | | | (_) | (_| | |_| | |  __/ | | | | | | | |_) | (_) | |  | |_
# |_| |_| |_|\___/ \__,_|\__,_|_|\___| |_|_| |_| |_| .__/ \___/|_|   \__|
#                                                  | |
#                                                  |_|
#
# Menu functions (and toolbar buttons)
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    
try:
    from Tkinter import *
    import tkMessageBox
    import tkFont
    import tkFileDialog
except ImportError:
    from tkinter import *
    from tkinter import messagebox
    from tkinter import font
    from tkinter import filedialog
import tkvalidate as validate
import gettext
_ = gettext.gettext

import platform
import os
from os.path import join,getsize,exists
from pathlib import Path
from shutil import copyfile
import configparser
# from ping3 import ping

import libs.FileUtils as FileUtils
import GenAboutBox
import lang

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#
#                  _          __                  _   _                 
#                 (_)        / _|                | | (_)                
#  _ __ ___   __ _ _ _ __   | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
# | '_ ` _ \ / _` | | '_ \  |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# | | | | | | (_| | | | | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
# |_| |_| |_|\__,_|_|_| |_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""

#-------------------------------------------------------------------------------   
    
def set_Tk_var():
    global strStatus
    strStatus = StringVar()

    """
    ############################################################################
    # declare all globals
    ############################################################################
    """

    # filenames
    global strMnuFileOpen
    strMnuFileOpen = StringVar()

    global strMnuFileSaveAs
    strMnuFileSaveAs = StringVar()

    #set global widget variables
    
    # settings
    global strPathToExe
    strPathToExe = StringVar()

    # info
    global strInfoCustomer
    strInfoCustomer = StringVar()
    global strInfoCreator
    strInfoCreator = StringVar()
    global strInfoMachine
    strInfoMachine = StringVar()
    global strInfoOrder
    strInfoOrder = StringVar()

    #trigger
    global boolTrigUseTrigger
    boolTrigUseTrigger = BooleanVar()
    global strTrigValue
    strTrigValue = StringVar()
    global strTrigCondition
    strTrigCondition = StringVar()
    global strTrigCompare
    strTrigCompare = StringVar()
    global strTrigPreTriggerTime
    strTrigPreTriggerTime = StringVar()
    global strTrigPostTriggerTime
    strTrigPostTriggerTime = StringVar()

    # debug
    global strDebugLevel
    strDebugLevel = StringVar()
    global strDebugFilesToKeep
    strDebugFilesToKeep = StringVar()

    # values
    
    # area of value
    global strRdoValues
    strRdoValues = StringVar()
    # datablock number
    global strValuesDBNo
    strValuesDBNo = StringVar()
    # address
    global strValuesAdress
    strValuesAdress = StringVar()
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    strValuesValueName = StringVar()
    global strValuesValueGain
    strValuesValueGain = StringVar()
    global strValuesValueOffset
    strValuesValueOffset = StringVar()
    # value unit
    global strValuesValueUnit
    strValuesValueUnit = StringVar()

    # set format default to Real ('F') 
    global strRdoValuesFormat
    strRdoValuesFormat = StringVar()
    
    # bool values names
    global strValuesBoolName0
    strValuesBoolName0 = StringVar()
    global strValuesBoolName1
    strValuesBoolName1 = StringVar()
    global strValuesBoolName2
    strValuesBoolName2 = StringVar()
    global strValuesBoolName3
    strValuesBoolName3 = StringVar()
    global strValuesBoolName4
    strValuesBoolName4 = StringVar()
    global strValuesBoolName5
    strValuesBoolName5 = StringVar()
    global strValuesBoolName6
    strValuesBoolName6 = StringVar()
    global strValuesBoolName7
    strValuesBoolName7 = StringVar()
    # bool values gain
    global strValuesBoolGain0
    strValuesBoolGain0 = StringVar()
    global strValuesBoolGain1
    strValuesBoolGain1 = StringVar()
    global strValuesBoolGain2
    strValuesBoolGain2 = StringVar()
    global strValuesBoolGain3
    strValuesBoolGain3 = StringVar()
    global strValuesBoolGain4
    strValuesBoolGain4 = StringVar()
    global strValuesBoolGain5
    strValuesBoolGain5 = StringVar()
    global strValuesBoolGain6
    strValuesBoolGain6 = StringVar()
    global strValuesBoolGain7
    strValuesBoolGain7 = StringVar()
    # offsets
    global strValuesBoolOffset0
    strValuesBoolOffset0 = StringVar()
    global strValuesBoolOffset1
    strValuesBoolOffset1 = StringVar()
    global strValuesBoolOffset2
    strValuesBoolOffset2 = StringVar()
    global strValuesBoolOffset3
    strValuesBoolOffset3 = StringVar()
    global strValuesBoolOffset4
    strValuesBoolOffset4 = StringVar()
    global strValuesBoolOffset5
    strValuesBoolOffset5 = StringVar()
    global strValuesBoolOffset6
    strValuesBoolOffset6 = StringVar()
    global strValuesBoolOffset7
    strValuesBoolOffset7 = StringVar()
    
    #com
    global boolComDemo
    boolComDemo = BooleanVar()   
    global strComIp1
    strComIp1 = StringVar()
    global strComIp2
    strComIp2 = StringVar()
    global strComIp3
    strComIp3 = StringVar()
    global strComIp4
    strComIp4 = StringVar()
    global strComRack
    strComRack = StringVar()
    global strComSlot
    strComSlot = StringVar()
    global strComAttempts
    strComAttempts = StringVar()

    # miscellaneous
    global strMiscDatafile
    strMiscDatafile = StringVar()
    global boolMiscStoragePath
    boolMiscStoragePath = BooleanVar()
    global strMiscScantime
    strMiscScantime = StringVar()
    global strMiscStoragePath
    strMiscStoragePath = StringVar()
    global boolMiscAutostart
    boolMiscAutostart = BooleanVar()
    global strMiscMaxRecords
    strMiscMaxRecords = StringVar()
    
    # my globals
    global strControllerIp
    strControllerIp = StringVar()
    global intNumRecords
    intNumRecords = IntVar()
    global intActRecord
    intActRecord = IntVar()
    global boolModified
    boolModified = BooleanVar()
    global strRun
    strRun = StringVar()
    global strLanguage
    strLanguage = StringVar()

    init_Tk_var()
    
#-------------------------------------------------------------------------------   

def init_Tk_var():
    """
    ############################################################################
    # clear all globals and set defaults
    ############################################################################
    """

    # filenames
    global strMnuFileOpen
    strMnuFileOpen.set('')

    global strMnuFileSaveAs
    strMnuFileSaveAs.set('')
    
    # statusbar
    global strStatus
    strStatus.set(_('Config file: no file open'))
    
    global boolModified
    boolModified.set(False)

    #set global widget variables
    
    # settings
#    global strPathToExe
#     strPathToExe.set('')

    # info
    global strInfoCustomer
    strInfoCustomer.set(_('name of customer'))
    global strInfoCreator
    strInfoCreator.set(_('your name'))
    global strInfoMachine
    strInfoMachine.set(_('type of machine'))
    global strInfoOrder
    strInfoOrder.set(_('order number'))
#    w.txtInfoRemarks.delete(1.0,"end")
#    w.txtInfoRemarks.insert(1.0,('enter some remarks'))

    #trigger
    global boolTrigUseTrigger
    boolTrigUseTrigger.set(False)
    global strTrigValue
    strTrigValue.set('0')
    global strTrigCondition
    strTrigCondition.set('=')
    global strTrigPreTriggerTime
    strTrigPreTriggerTime.set('0')
    global strTrigPostTriggerTime
    strTrigPostTriggerTime.set('0')
    global strTrigCompare
    strTrigCompare.set('0')

    # debug
    global strDebugLevel
    strDebugLevel.set(_('0 - No logging'))
    global strDebugFilesToKeep
    strDebugFilesToKeep.set('1')

    # values
    
    # area of value
    global strRdoValues
    strRdoValues.set('D')
    # datablock number
    global strValuesDBNo
    strValuesDBNo.set('123')
    # address
    global strValuesAdress
    strValuesAdress.set('123')
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    strValuesValueName.set(_('name'))
    global strValuesValueGain
    strValuesValueGain.set('1.0')
    global strValuesValueOffset
    strValuesValueOffset.set('0.0')
    # value unit
    global strValuesValueUnit
    strValuesValueUnit.set('')

    # set format default to Real ('F') 
    global strRdoValuesFormat
    strRdoValuesFormat.set('F')
    
    # bool values names
    global strValuesBoolName0
    strValuesBoolName0.set(_('name 0'))
    global strValuesBoolName1
    strValuesBoolName1.set(_('name 1'))
    global strValuesBoolName2
    strValuesBoolName2.set(_('name 2'))
    global strValuesBoolName3
    strValuesBoolName3.set(_('name 3'))
    global strValuesBoolName4
    strValuesBoolName4.set(_('name 4'))
    global strValuesBoolName5
    strValuesBoolName5.set(_('name 5'))
    global strValuesBoolName6
    strValuesBoolName6.set(_('name 6'))
    global strValuesBoolName7
    strValuesBoolName7.set(_('name 7'))
    # bool values gain
    global strValuesBoolGain0
    strValuesBoolGain0.set('1')
    global strValuesBoolGain1
    strValuesBoolGain1.set('1')
    global strValuesBoolGain2
    strValuesBoolGain2.set('1')
    global strValuesBoolGain3
    strValuesBoolGain3.set('1')
    global strValuesBoolGain4
    strValuesBoolGain4.set('1')
    global strValuesBoolGain5
    strValuesBoolGain5.set('1')
    global strValuesBoolGain6
    strValuesBoolGain6.set('1')
    global strValuesBoolGain7
    strValuesBoolGain7.set('1')
    # offsets
    global strValuesBoolOffset0
    strValuesBoolOffset0.set('0')
    global strValuesBoolOffset1
    strValuesBoolOffset1.set('0')
    global strValuesBoolOffset2
    strValuesBoolOffset2.set('0')
    global strValuesBoolOffset3
    strValuesBoolOffset3.set('0')
    global strValuesBoolOffset4
    strValuesBoolOffset4.set('0')
    global strValuesBoolOffset5
    strValuesBoolOffset5.set('0')
    global strValuesBoolOffset6
    strValuesBoolOffset6.set('0')
    global strValuesBoolOffset7
    strValuesBoolOffset7.set('0')
    
    #com
    global boolComDemo
    boolComDemo.set(False)
    global strComIp1
    strComIp1.set('0')
    global strComIp2
    strComIp2.set('0')
    global strComIp3
    strComIp3.set('0')
    global strComIp4
    strComIp4.set('0')
    global strComRack
    strComRack.set('0')
    global strComSlot
    strComSlot.set('0')
    global strComAttempts
    strComAttempts.set('0')

    # miscellaneous
    global strMiscDatafile
    strMiscDatafile.set(_('data'))
    global boolMiscStoragePath
    boolMiscStoragePath.set(True)
    global strMiscScantime
    strMiscScantime.set('100')
    global strMiscStoragePath
    strMiscStoragePath.set('')
    global boolMiscAutostart
    boolMiscAutostart.set(True)
    global strMiscMaxRecords
    strMiscMaxRecords.set('10000')
    
    # my globals
    global strControllerIp
    strControllerIp.set('0.0.0.0')
    global intNumRecords
    intNumRecords.set(0)
    global strRun
    strRun.set('')

#-------------------------------------------------------------------------------   

def set_value_defaults():
    """
    ############################################################################
    # clear globals for a new value and set defaults
    ############################################################################
    """
    # values
    
    # area of value
    global strRdoValues
    strRdoValues.set('D')
    # datablock number
    global strValuesDBNo
    strValuesDBNo.set('123')
    # address
    global strValuesAdress
    strValuesAdress.set('123')
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    strValuesValueName.set(_('name'))
    global strValuesValueGain
    strValuesValueGain.set('1.0')
    global strValuesValueOffset
    strValuesValueOffset.set('0.0')
    # value unit
    global strValuesValueUnit
    strValuesValueUnit.set('')

    # set format default to Real ('F') 
    global strRdoValuesFormat
    strRdoValuesFormat.set('F')
    
    # bool values names
    global strValuesBoolName0
    strValuesBoolName0.set(_('name 0'))
    global strValuesBoolName1
    strValuesBoolName1.set(_('name 1'))
    global strValuesBoolName2
    strValuesBoolName2.set(_('name 2'))
    global strValuesBoolName3
    strValuesBoolName3.set(_('name 3'))
    global strValuesBoolName4
    strValuesBoolName4.set(_('name 4'))
    global strValuesBoolName5
    strValuesBoolName5.set(_('name 5'))
    global strValuesBoolName6
    strValuesBoolName6.set(_('name 6'))
    global strValuesBoolName7
    strValuesBoolName7.set(_('name 7'))
    # bool values gain
    global strValuesBoolGain0
    strValuesBoolGain0.set('1')
    global strValuesBoolGain1
    strValuesBoolGain1.set('1')
    global strValuesBoolGain2
    strValuesBoolGain2.set('1')
    global strValuesBoolGain3
    strValuesBoolGain3.set('1')
    global strValuesBoolGain4
    strValuesBoolGain4.set('1')
    global strValuesBoolGain5
    strValuesBoolGain5.set('1')
    global strValuesBoolGain6
    strValuesBoolGain6.set('1')
    global strValuesBoolGain7
    strValuesBoolGain7.set('1')
    # offsets
    global strValuesBoolOffset0
    strValuesBoolOffset0.set('0')
    global strValuesBoolOffset1
    strValuesBoolOffset1.set('0')
    global strValuesBoolOffset2
    strValuesBoolOffset2.set('0')
    global strValuesBoolOffset3
    strValuesBoolOffset3.set('0')
    global strValuesBoolOffset4
    strValuesBoolOffset4.set('0')
    global strValuesBoolOffset5
    strValuesBoolOffset5.set('0')
    global strValuesBoolOffset6
    strValuesBoolOffset6.set('0')
    global strValuesBoolOffset7
    strValuesBoolOffset7.set('0')
    
#-------------------------------------------------------------------------------   

def validate_widgets():
    """
    ############################################################################
    # validate spinboxes and textinputs for correct data input
    # only int or float allowed
    ############################################################################
    """
    # validate integer spinboxes 
    validate.int_validate(w.spbComIp1)
    validate.int_validate(w.spbComIp2)
    validate.int_validate(w.spbComIp3)
    validate.int_validate(w.spbComIp4)
    validate.int_validate(w.spbComRack)
    validate.int_validate(w.spbComSlot)
    validate.int_validate(w.spbMiscScantime)
    validate.int_validate(w.spbTrigPretriggerTime)
    validate.int_validate(w.spbTrigPosttriggerTime)
    validate.int_validate(w.spbDebugFilesToKeep)
    validate.int_validate(w.spbValuesDBNo)
    validate.int_validate(w.spbValuesAddress)
    validate.int_validate(w.spbValuesBoolGain0)
    validate.int_validate(w.spbValuesBoolGain1)
    validate.int_validate(w.spbValuesBoolGain2)
    validate.int_validate(w.spbValuesBoolGain3)
    validate.int_validate(w.spbValuesBoolGain4)
    validate.int_validate(w.spbValuesBoolGain5)
    validate.int_validate(w.spbValuesBoolGain6)
    validate.int_validate(w.spbValuesBoolGain7)
    validate.int_validate(w.spbValuesBoolOffset0)
    validate.int_validate(w.spbValuesBoolOffset1)
    validate.int_validate(w.spbValuesBoolOffset2)
    validate.int_validate(w.spbValuesBoolOffset3)
    validate.int_validate(w.spbValuesBoolOffset4)
    validate.int_validate(w.spbValuesBoolOffset5)
    validate.int_validate(w.spbValuesBoolOffset6)
    validate.int_validate(w.spbValuesBoolOffset7)
    validate.int_validate(w.spbComAttempts)
    validate.int_validate(w.spbMiscMaxRecords)

    #validate float spinboxes
    validate.float_validate(w.spbValuesGain)
    validate.float_validate(w.spbValuesOffset)
    
    #text input for float
    validate.float_validate(w.tinTrigCompare, from_=-167000000, to=167000000)    

#-------------------------------------------------------------------------------   

def SetupTreeview():
    """
    ############################################################################
    # setup the values list in a treeview
    ############################################################################
    """
    global ColHeads, w
    ColHeads = (_('name'), _('variable'), _('gain'), _('offset'), _('unit'))
#     colwidth =[300,60,80,80,80, 80]
#     i=0
    for col in ColHeads:
        ## adjust the column's width to the header string
        w.stwList.column(col, width = font.Font().measure(col.title()))
#         w.stwList.heading(col)
#         w.stwList.column(col, width = colwidth[i])
#         i += 1

#-------------------------------------------------------------------------------   

def ClearDataGrid():
    """
    ############################################################################
    # clear the treeview for the values
    ############################################################################
    """
    global w
    for c in w.stwList.get_children(''):
        w.stwList.delete(c)

#-------------------------------------------------------------------------------   

def getConfig(cfg):
    """
    ############################################################################
    # read configuration from file
    ############################################################################
    """
    config = configparser.ConfigParser()
    config.optionxform=str
    try:
        config.read(cfg, encoding='utf-8')
    except BaseException:        
        try:
            config.read(cfg, encoding='ANSI')
        except Exception as e:
            messagebox.showerror('Read config file',e)
            return
        
    
    # globals
    # info #########################
    global strInfoCustomer
    global strInfoCreator
    global strInfoMachine
    global strInfoOrder
    global strInfoRemarks
    # info strings
    strInfoCustomer.set(config['aqdata'] ['place'])
    strInfoCreator.set(config['aqdata'] ['creator'])
    strInfoMachine.set(config['aqdata'] ['machine'])
    strInfoOrder.set(config['aqdata'] ['order'])
    w.txtInfoRemarks.delete(1.0, 'end')
    w.txtInfoRemarks.insert(1.0,(config['aqdata'] ['remarks']))
    
    # communication #####################
    global boolComDemo
    global strComIp1
    global strComIp2
    global strComIp3
    global strComIp4
    global strComRack
    global strComSlot
    global strComAttempts
    # demo flag
    if (int(config['communication'] ['demo'])) == 0:
        boolComDemo.set(False)
    else:
        boolComDemo.set(True)
        
    # get IP address
    text = (str(config['communication'] ['ip']))
    text1 = text.split(';')
    text3 = str(text1[0])
    text4 = text3.split('.')
    
    strComIp1.set(str(text4[0]))
    strComIp2.set(str(text4[1]))
    strComIp3.set(str(text4[2]))
    strComIp4.set(str(text4[3]))
    
    text = (str(config['communication'] ['rack']))
    text1 = text.split(';')
    strComRack.set(str(text1[0]))
    text = (str(config['communication'] ['slot']))
    text1 = text.split(';')
    strComSlot.set(str(text1[0]))

    strComAttempts.set((str(config['communication'] ['maxattempts'])))

    # misc #####################
    global strMiscDatafile
    global boolMiscStoragePath
    global strMiscScantime
    global strMiscStoragePath
    global boolMiscAutostart
    global strMiscMaxRecords
    
    # datafile
    strMiscDatafile.set(config['misc'] ['datafile'])
    
    # autostart
    if (int(config['misc'] ['autostart'])) == 0:
        boolMiscStoragePath.set(False)
    else:
        boolMiscStoragePath.set(True)
    
    # use dir structure
    if (int(config['misc'] ['usedir'])) == 0:
        boolMiscStoragePath.set(False)
    else:
        boolMiscStoragePath.set(True)
        
    # scantime
    strMiscScantime.set(config['misc'] ['scantime'])
    
    # maxrecords
    strMiscMaxRecords.set(config['misc'] ['maxrecords'])
    
    # path for archives
    strMiscStoragePath.set(str(Path(config['misc'] ['datapath'])))
        
    #trigger ###############################
    global strTrigValue
    global boolTrigUseTrigger
    global strTrigCompare
    global strTrigCondition
    global strTrigPreTriggerTime
    global strTrigPostTriggerTime
    
    # trigger signal
    strTrigValue.set(config['trigger'] ['trgsignal'])

    # use trigger?
    if (str(config['trigger'] ['trgsignal'])) == '0':
        boolTrigUseTrigger.set(False)
    else:
        boolTrigUseTrigger.set(True)

    strTrigCondition.set(config['trigger'] ['trgcondition'])
    strTrigCompare.set(config['trigger'] ['trgvalue'])
    strTrigPreTriggerTime.set(config['trigger'] ['pretrg'])
    strTrigPostTriggerTime.set(config['trigger'] ['posttrg'])
    
    # debug ##########################
    global strDebugLevel
    global strDebugFilesToKeep
    
    dbglevel = int(config['debug'] ['dbglevel'])
    
    if dbglevel == 1:
        strDebugLevel.set(_('1 - INFO'))
    elif dbglevel == 2:
        strDebugLevel.set(_('2 - WARNING'))
    elif dbglevel == 3:
        strDebugLevel.set(_('3 - DEBUG'))
    elif dbglevel == 4:
        strDebugLevel.set(_('4 - ERROR'))
    elif dbglevel == 5:
        strDebugLevel.set(_('5 - CRITICAL'))
    elif dbglevel == 6:
        strDebugLevel.set(_('6 - EXCEPTION'))
    else:
        strDebugLevel.set(_('0 - no logging'))
        
    # set fields to keep as debug files
    strDebugFilesToKeep.set('1')
    
    myValues = (config['values'])
    global intNumRecords
    w.cboTrigValue['values'] = '0'
    for myVal in myValues:
        # fill the trigger combobox
        temp = myVal.split(',')
        for variable in temp:
            w.cboTrigValue['values'] = (*w.cboTrigValue['values'], variable) 
        # set the ID
        myId = intNumRecords.get()
         # split into parts
        temp = str(config['values'] [myVal])
        valParts = temp.split(',')
        # first part is variable
        myVar = valParts[0]
        # second part is gain
        myGain = str(valParts[1])
        # third part is offset
        myOffset = str(valParts[2])
        # fourth part is unit
        myUnit = valParts[3]
        
        # set the record for value (not boolean !)
        record = [myVal, myVar, myGain, myOffset, myUnit]
        if (myId%2)== 1:
            w.stwList.insert('','end',myId,text=str(myId+1),values=record,tags = ('odd',))
        else:
            w.stwList.insert('','end',myId,text=str(myId+1),values=record,tags = ('even',))
        w.stwList.tag_configure('odd', background='orange')
        w.stwList.tag_configure('even', background='purple')    
        intNumRecords.set(myId +1)

#-------------------------------------------------------------------------------   

def get_ini():
    """
    ############################################################################
    # get exe path from ini-file
    ############################################################################
    """
    cfg = Path(os.getcwd() + '\\config.ini')
    if cfg.is_file():
        config = configparser.ConfigParser()
        config.optionxform=str

        try:
            config.read(cfg, encoding='utf-8')
        except BaseException:        
            try:
                config.read(cfg, encoding='ANSI')
            except Exception as e:
                messagebox.showerror('Read config file',e)
                return
            
        global strPathToExe
        strPathToExe.set(config['aqserver'] ['exefile'])
#         language = (config['aqconfig'] ['language'])
#         lng = gettext.translation('guess', localedir='locale', languages=['language'])
#         lng.install()

#-------------------------------------------------------------------------------   

def getIp(a,b,c,d):
    """
    ############################################################################
    # make Ip from 4 (number) strings
    ############################################################################
    """
    ip = str(a + '.' + b + '.' + c + '.' + d)
    return ip

#-------------------------------------------------------------------------------   
def set_modified():
    global strStatus
    global boolModified
    strStatus.set('config file: ' + strMnuFileOpen.get() + ' | MODIFIED')
    boolModified.set(True)

#-------------------------------------------------------------------------------   
def ask_save():
    """
    ############################################################################
    # check if we need to save our changes
    ############################################################################
    """
    ## did we save the file ??
    global boolModified
    if boolModified.get():
        result = messagebox.askyesnocancel( _('Exit'), _('Save changes?'))
        if result == True:
            FileName = strMnuFileOpen.get()
            print(FileName)
            if FileName == '':
                return OnMnuFileSaveAs()
            else:
                OnMnuFileSave()
                return True
        elif result == False:
            return True
        elif result == None:
            return False
            
        else:
            messagebox.showerror(_('Exit'),_('error'))
            return False
    else:
        return True
    
#-------------------------------------------------------------------------------   

def get_all_children(tree, item=""):
    """
    ############################################################################
    # count the items(children) in the tree
    ############################################################################
    """
    children = tree.get_children(item)
    for child in children:
        children += get_all_children(tree, child)
    return children

#-------------------------------------------------------------------------------   

def save_config_file (fName):
    """
    ############################################################################
    # save our config file
    ############################################################################
    """
    # open file for data output
    myOutFile = FileUtils.ASCIIDataWrite()
    # start with new datafile (note "1" at end)
    myOutFile.openOutput('', fName, 1)

    # info
    global strInfoCustomer
    global strInfoCreator
    global strInfoMachine
    global strInfoOrder
    text = w.txtInfoRemarks.get('1.0', END).splitlines()
    remarkstr = ''
    numlines = int(w.txtInfoRemarks.index('end-1c').split('.')[0])
    for line in text:
        remarkstr = remarkstr+ line + '\n' + '\t' 
    string = '[aqdata] \n' + \
             'place = ' + strInfoCustomer.get() + '\n' +\
             'creator = ' + strInfoCreator.get() + '\n' +\
             'machine = ' + strInfoMachine.get() + '\n' +\
             'order = '  + strInfoOrder.get() + '\n' +\
             'remarks = ' + remarkstr  + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)

    #com
    global boolComDemo
    global strComIp1
    global strComIp2
    global strComIp3
    global strComIp4
    global strComRack
    global strComSlot
    global strComAttempts
 
    a = strComIp1.get()
    b = strComIp2.get()
    c = strComIp3.get()
    d = strComIp4.get()
    
    
    string = '[communication] \n' + \
             'demo = ' + str(int(boolComDemo.get())) + '\n' +\
             'ip = ' + getIp(a,b,c,d) + '\n' +\
             'rack = ' + strComRack.get() + '\n' +\
             'slot = '  + strComSlot.get() + '\n' +\
             'maxattempts = ' + strComAttempts.get()  + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)
    
    # miscellaneous
    global strMiscDatafile
    global boolMiscStoragePath
    global strMiscScantime
    global strMiscStoragePath
    global boolMiscAutostart
    global strMiscMaxRecords
    
    string = '[misc] \n' +\
              'delimiter = ;' + '\n' +\
              'datafileprefix = ' + strMiscDatafile.get() + '\n' +\
              'datafile = ' + strMiscDatafile.get() + '\n' +\
              'autostart = ' + str(int(boolMiscAutostart.get())) + '\n' +\
              'datapath = ' + strMiscStoragePath.get() + '\n' +\
              'usedir = ' + str(int(boolMiscStoragePath.get())) + '\n' +\
              'scantime = ' + str(strMiscScantime.get()) + '\n' +\
              'maxrecords = ' + str(strMiscMaxRecords.get()) + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)
    
     #trigger
    global boolTrigUseTrigger
    global strTrigValue
    global strTrigCondition
    global strTrigCompare
    global strTrigPreTriggerTime
    global strTrigPostTriggerTime
    string = '[trigger] \n' +\
              'trgsignal = ' + strTrigValue.get() + '\n' +\
              'usetrigger = '  + str(int(boolTrigUseTrigger.get())) + '\n' +\
              'trgcondition = ' + str(strTrigCondition.get()) + '\n' +\
              'trgvalue = ' + strTrigCompare.get() + '\n' +\
              'pretrg = ' + strTrigPreTriggerTime.get() + '\n' +\
              'posttrg = ' + strTrigPostTriggerTime.get() + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)

    # debug
    global strDebugLevel
    global strDebugFilesToKeep
    dbglevel = strDebugLevel.get().strip(' ')
    string = '[debug] \n' +\
             'dbglevel = ' + dbglevel[0]  + '\n' +\
             'logfile = aqserver'  + '\n' +\
             'logts = 1'  + '\n' +\
             'numlogfiles = 1' + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)
    
    # values
    # get the number of records
    numrecords = get_all_children(w.stwList)
    string = '[values]\n'
    for i in numrecords:
        myItem = (w.stwList.item(i))
        # get the record
        myValue = myItem['values']
        
        string = string +\
                 str(myValue [0]) + ' = ' +\
                 str(myValue [1]) + ',' +\
                 str(myValue [2]) + ',' +\
                 str(myValue [3]) + ',' +\
                 str(myValue [4]) + '\n'
#     string = string.encode('ANSI')
    myOutFile.writeStr(string, 0, 0)
    myOutFile.closeOutput()

    global strStatus
    global boolModified
    boolModified.set(False)
    strStatus.set('config file: ' + fName)
    strMnuFileOpen.set(fName)

#-------------------------------------------------------------------------------   

def Repeat(x): 
    """
    ############################################################################
    # return duplicate items from list
    ############################################################################
    """
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated 

#-------------------------------------------------------------------------------   

def checkForDuplicates(listOfElems):
    """
    ############################################################################
    # Check if given list contains any duplicates
    ############################################################################
    """
    if len(listOfElems) == len(set(listOfElems)):
        return False
    else:
        return True
#-------------------------------------------------------------------------------   

def set_value_config_file(file_path, section, key, value):
    config = configparser.RawConfigParser()
    config.read(file_path)
    config.set(section,key,value)                         
    cfgfile = open(file_path,'w')
    config.write(cfgfile, space_around_delimiters=False)
    cfgfile.close()        

#-------------------------------------------------------------------------------   

def init(top, gui, *args, **kwargs):
    """
    ############################################################################
    # init me
    ############################################################################
    """
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    root.iconbitmap('./assets/aqconfig.ico')
    # get the window close button!
    root.protocol("WM_DELETE_WINDOW", OnMnuFileExit)

#     SetupTreeview()
#     LoadDataGrid()
    validate_widgets()
    w.btnValuesSave.config(state = tk.DISABLED)
    get_ini()
    
"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#
#  __  __                     __                  _   _                 
# |  \/  |                   / _|                | | (_)                
# | \  / | ___ _ __  _   _  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
# | |\/| |/ _ \ '_ \| | | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# | |  | |  __/ | | | |_| | | | | |_| | | | | (__| |_| | (_) | | | \__ \
# |_|  |_|\___|_| |_|\__,_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
# Menu functions (and toolbar buttons)
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""

#-------------------------------------------------------------------------------   

def OnMnuFileNew():
    """
    ############################################################################
    # clear all fields for new config file
    ############################################################################
    """
    ## did we save the file ??
    if ask_save():
        ## clear all fields
        init_Tk_var()
        w.txtInfoRemarks.delete(1.0,"end")
        ClearDataGrid()
    else:
        pass    

#-------------------------------------------------------------------------------   

def OnMnuFileOpen():
    """
    ############################################################################
    # read configuration from file
    ############################################################################
    """
    # check for modification and ask for save
    if ask_save():
        ClearDataGrid()
        global strMnuFileOpen
        FileOpen = filedialog.askopenfilename(title = _('Select file'), \
                                              filetypes = ((_('config files'),'*.cfg'),))
        strMnuFileOpen.set(str(Path(FileOpen)))
        statustxt = _('config file: ') + FileOpen
        strStatus.set(statustxt)
#         getConfig(strMnuFileOpen.get())
        try:
            getConfig(strMnuFileOpen.get())
        except BaseException:
            #    logentry = "error in configfile!\nProgram will exit.\n"
            #    logger.debug(" %s: %s" %(TimeUtils.getTS(), logentry))
            messagebox.showerror(_('Open config file'), _('Error in file, cannot open!'))
            # close the program
#             destroy_window()
    else:
        pass    

#-------------------------------------------------------------------------------   

def OnMnuFileSave():
    """
    ############################################################################
    # save the configuration to a given  filename
    ############################################################################
    """
    global strMnuFileOpen
    fname = 'tempfile.cfg'
    save_config_file(fname)
    copyfile(fname, strMnuFileOpen.get())
    if os.path.isfile(fname):
        os.remove(fname)

#-------------------------------------------------------------------------------   

def OnMnuFileSaveAs():
    """
    ############################################################################
    # save the configuration to a new/another file
    ############################################################################
    """
    global strMnuFileSaveAs
    fname =  filedialog.asksaveasfilename(title = _("Save file as ..."), \
                                          defaultextension = "*.cfg", \
                                          filetypes = ((_("config files"),"*.cfg"),))
    
    strMnuFileSaveAs.set(fname)
    if fname == '':
        # asksaveasfile return `None` if dialog closed with "cancel".
        return False
    else:
        save_config_file (fname)
        return True

#-------------------------------------------------------------------------------   

def OnMnuFileSettings():
    """
    ############################################################################
    # get path to aqserver.exe and save to ini file
    ############################################################################
    """
    global StrPathToExe
    if (py3 == 1) or (py3 == True):
        myPath = filedialog.askdirectory(title = _("Get path of aqserver.exe"))
    else:
        myPath = filedialog.askdirectory(title = _("Get path of aqserver.exe"))
    myPath = myPath + '/aqserver.exe'
    myPath = myPath.replace('/', '\\')
    
    
    strPathToExe.set(myPath)
    #save to aqconfig.ini
    fName = os.getcwd() + '\\config.ini'
    set_value_config_file(fName, 'aqserver', 'exefile', myPath)
#-------------------------------------------------------------------------------   

def OnMnuSaveBat():
    """
    ############################################################################
    # save batch file to start aqserver
    ############################################################################
    """
    # make batch file to start aqserver, use strPathToExe and strMnuFileOpen
    global strPathToExe
    global strMnuFileOpen
    global strRun

    
    if (strPathToExe.get() == '') or (strMnuFileOpen.get() == ''):
        return
    else:
        fName = strMnuFileOpen.get().replace('.cfg', '.cmd')
        
        myOutFile = FileUtils.ASCIIDataWrite()
        # start with new datafile (note "1" at end)
        myOutFile.openOutput('', fName, 1)

        string = '"' + strPathToExe.get() + '" -c ' + \
                 '"' + strMnuFileOpen.get() + '"\n'
                 
        myOutFile.writeStr(string, 0, 0)
        myOutFile.closeOutput()
        strRun.set(fName)
    

#-------------------------------------------------------------------------------   

def OnMnuFileExit():
    """
    ############################################################################
    # exit the program
    ############################################################################
    """
    ## did we save the file ??
    if ask_save():
        destroy_window()
    else:
        pass    
   
#-------------------------------------------------------------------------------   

def OnMnuHelpContents():
    """
    ############################################################################
    # open help
    ############################################################################
    """
    print('aqconfig_support.OnMnuHelpContents')
    messagebox.showinfo("Menu", "Contents")
    sys.stdout.flush()

#-------------------------------------------------------------------------------   

def OnMnuHelpContext():
    """
    ############################################################################
    # open context help
    ############################################################################
    """
    print('aqconfig_support.OnMnuHelpContext')
    messagebox.showinfo("Menu", "Context")
    sys.stdout.flush()

#-------------------------------------------------------------------------------   

def OnMnuHelpAbout():
    """
    ############################################################################
    # open about box
    ############################################################################
    """
    copyright_symbol = u"\u00A9"
    ProgName = "Aqserver configuration tool"
    Author = "Michael Taxis"
    Version = '0.1alpha'
    Copyright = "Copyright " + copyright_symbol + " 2020 by Michael Taxis"
    Info = "Configuration tool for a data acquisition tool"
    url = "https://www.taxis-instruments.de"
    GenAboutBox.create_About(root,[ProgName,Author,Version,Copyright,Info,url])

#-------------------------------------------------------------------------------   

def btnLanguage_LeftRelease(p1):
    lang.create_frmGetLang(root)

def OnBtnMiscStoragePath():
    """
    ############################################################################
    # get the path to store recorded and zipped files
    ############################################################################
    """
    if (py3 == 1) or (py3 == True):
        path = filedialog.askdirectory()
    else:
        path = filedialog.askdirectory()
    strMiscStoragePath.set(path)
    set_modified()

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#
#  _           _   _                                     _       
# | |         | | | |                                   | |      
# | |__  _   _| |_| |_ ___  _ __     _____   _____ _ __ | |_ ___ 
# | '_ \| | | | __| __/ _ \| '_ \   / _ \ \ / / _ \ '_ \| __/ __|
# | |_) | |_| | |_| || (_) | | | | |  __/\ V /  __/ | | | |_\__ \
# |_.__/ \__,_|\__|\__\___/|_| |_|  \___| \_/ \___|_| |_|\__|___/
#                                                                
# button events
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""
#-------------------------------------------------------------------------------   

def btnValuesNew_LeftClick(p1):
    """
    ############################################################################
    # clear value fields and set defaults
    ############################################################################
    """
    # check for save
    set_value_defaults()
    
#-------------------------------------------------------------------------------   

def btnValuesEdit_LeftClick(p1):
    """
    ############################################################################
    # jump to list to read value 
    ############################################################################
    """
    # jump to grid and select with double click
    w.nbMain.select(6)

#-------------------------------------------------------------------------------   

def btnValuesSave_LeftRelease(p1):
    """
    ############################################################################
    # save the value to the list, if new, append to the list
    ############################################################################
    """
    # values
    
    # area of value
    global strRdoValues
    # datablock number
    global strValuesDBNo
    # address
    global strValuesAdress
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    global strValuesValueGain
    global strValuesValueOffset
    # value unit
    global strValuesValueUnit

    # set format default to Real ('F') 
    global strRdoValuesFormat
    
    # bool values names
    global strValuesBoolName0
    global strValuesBoolName1
    global strValuesBoolName2
    global strValuesBoolName3
    global strValuesBoolName4
    global strValuesBoolName5
    global strValuesBoolName6
    global strValuesBoolName7
    # bool values gain
    global strValuesBoolGain0
    global strValuesBoolGain1
    global strValuesBoolGain2
    global strValuesBoolGain3
    global strValuesBoolGain4
    global strValuesBoolGain5
    global strValuesBoolGain6
    global strValuesBoolGain7
    # offsets
    global strValuesBoolOffset0
    global strValuesBoolOffset1
    global strValuesBoolOffset2
    global strValuesBoolOffset3
    global strValuesBoolOffset4
    global strValuesBoolOffset5
    global strValuesBoolOffset6
    global strValuesBoolOffset7

    # my globals
    global intActRecord
    myId = intActRecord.get()
    myFormat = strRdoValuesFormat.get()
    myArea = strRdoValues.get()
    
    # set the variable
    if myArea == 'D':
        # for variable from datablock
        area = 'DB' + \
               strValuesDBNo.get() + \
               '.' + \
               myArea + \
               myFormat +\
               strValuesAdress.get()
    elif (myArea == 'T') or (myArea == 'C'):
        # for variable from timers or counters
        area = myArea + \
               strValuesAdress.get()
    else:
        # for variable from output, input or flag
        area = myArea + \
               myFormat +\
               strValuesAdress.get()
    
    # set name, gain, offset, unit
    if myFormat != 'X':
        # set the record for value (not boolean !)
        name = strValuesValueName.get()
        gain = strValuesValueGain.get()
        offset = strValuesValueOffset.get()
        unit = strValuesValueUnit.get()
        record = [name, area, gain, offset,unit]
    else:    
        # set the record for boolean
        name = strValuesBoolName0.get() + ',' + \
               strValuesBoolName1.get() + ',' + \
               strValuesBoolName2.get() + ',' + \
               strValuesBoolName3.get() + ',' + \
               strValuesBoolName4.get() + ',' + \
               strValuesBoolName5.get() + ',' + \
               strValuesBoolName6.get() + ',' + \
               strValuesBoolName7.get()
        gain = strValuesBoolGain0.get() + '-' + \
               strValuesBoolGain1.get() + '-' + \
               strValuesBoolGain2.get() + '-' + \
               strValuesBoolGain3.get() + '-' + \
               strValuesBoolGain4.get() + '-' + \
               strValuesBoolGain5.get() + '-' + \
               strValuesBoolGain6.get() + '-' + \
               strValuesBoolGain7.get()
        offset = strValuesBoolOffset0.get() + '-' + \
                 strValuesBoolOffset1.get() + '-' + \
                 strValuesBoolOffset2.get() + '-' + \
                 strValuesBoolOffset3.get() + '-' + \
                 strValuesBoolOffset4.get() + '-' + \
                 strValuesBoolOffset5.get() + '-' + \
                 strValuesBoolOffset6.get() + '-' + \
                 strValuesBoolOffset7.get()
        unit = ''
    record =[name, area, gain, offset,unit]
    
    # get the number of records
    numrecords = get_all_children(w.stwList)
    # reset my name list
    names = []
    # split name, because boolean contains 8 names
    splitname = name.split(',')
    for i in splitname:
        # append all names to the list
        names.append(i)
    for i in numrecords:
        # Id that we have edited, is already in the list
        if i != (myId-1):
            myItem = (w.stwList.item(i))
            # get the record
            myValue = myItem['values']
            #get the name
            myName = myValue[0]
            # split name, because boolean contains 8 names
            temp = myName.split(',')
            for variable in temp:
                # append all names to the list
                names.append(variable)
    # check for duplicate names
    duplicates = Repeat(names)
    if duplicates == []:
        # if no duplicates, write the record
        # list records start with 0, but 1 is shown!! --> (myId-1) and (myId)
        w.stwList.item((myId-1),text=str(myId),values=record)
        set_modified()
        # clear the trigger combobox
        w.cboTrigValue['values'] = '0'
        for variables in names:
            # fill the trigger combobox
            w.cboTrigValue['values'] = (*w.cboTrigValue['values'], variable) 
    else:
        # inform user for duplicates
        txt = _('duplicate names:\n')
        for dup in duplicates:
            txt = txt + dup +'\n'
        txt = txt + _('Names must be unique!')
        messagebox.showwarning(_('Save value'),txt)
    
#-------------------------------------------------------------------------------   

def btnValuesAdd_LeftRelease(p1):
    """
    ############################################################################
    # add value to the list
    ############################################################################
    """
    # values
    
    # area of value
    global strRdoValues
    # datablock number
    global strValuesDBNo
    # address
    global strValuesAdress
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    global strValuesValueGain
    global strValuesValueOffset
    # value unit
    global strValuesValueUnit

    # set format default to Real ('F') 
    global strRdoValuesFormat
    
    # bool values names
    global strValuesBoolName0
    global strValuesBoolName1
    global strValuesBoolName2
    global strValuesBoolName3
    global strValuesBoolName4
    global strValuesBoolName5
    global strValuesBoolName6
    global strValuesBoolName7
    # bool values gain
    global strValuesBoolGain0
    global strValuesBoolGain1
    global strValuesBoolGain2
    global strValuesBoolGain3
    global strValuesBoolGain4
    global strValuesBoolGain5
    global strValuesBoolGain6
    global strValuesBoolGain7
    # offsets
    global strValuesBoolOffset0
    global strValuesBoolOffset1
    global strValuesBoolOffset2
    global strValuesBoolOffset3
    global strValuesBoolOffset4
    global strValuesBoolOffset5
    global strValuesBoolOffset6
    global strValuesBoolOffset7

    # my globals
    global intNumRecords
    myId = intNumRecords.get()
    myFormat = strRdoValuesFormat.get()
    myArea = strRdoValues.get()
    
    # set the variable
    if myArea == 'D':
        area = 'DB' + \
               strValuesDBNo.get() + \
               '.' + \
               myArea + \
               myFormat +\
               strValuesAdress.get()
    elif (myArea == 'T') or (myArea == 'C'):
        area = myArea + \
               strValuesAdress.get()
    else:    
        area = myArea + \
               myFormat +\
               strValuesAdress.get()
    
    # set name, gain, offset, unit
    if myFormat != 'X':
        # set the record for value (not boolean !)
        name = strValuesValueName.get()
        gain = strValuesValueGain.get()
        offset = strValuesValueOffset.get()
        unit = strValuesValueUnit.get()
        record = [name, area, gain, offset,unit]
    else:    
        # set the record for boolean
        name = strValuesBoolName0.get() + ',' + \
               strValuesBoolName1.get() + ',' + \
               strValuesBoolName2.get() + ',' + \
               strValuesBoolName3.get() + ',' + \
               strValuesBoolName4.get() + ',' + \
               strValuesBoolName5.get() + ',' + \
               strValuesBoolName6.get() + ',' + \
               strValuesBoolName7.get()
        gain = strValuesBoolGain0.get() + '-' + \
               strValuesBoolGain1.get() + '-' + \
               strValuesBoolGain2.get() + '-' + \
               strValuesBoolGain3.get() + '-' + \
               strValuesBoolGain4.get() + '-' + \
               strValuesBoolGain5.get() + '-' + \
               strValuesBoolGain6.get() + '-' + \
               strValuesBoolGain7.get()
        offset = strValuesBoolOffset0.get() + '-' + \
                 strValuesBoolOffset1.get() + '-' + \
                 strValuesBoolOffset2.get() + '-' + \
                 strValuesBoolOffset3.get() + '-' + \
                 strValuesBoolOffset4.get() + '-' + \
                 strValuesBoolOffset5.get() + '-' + \
                 strValuesBoolOffset6.get() + '-' + \
                 strValuesBoolOffset7.get()
        unit = ''
        record = [name, area, gain, offset,unit]
        
    # get the number of records
    numrecords = get_all_children(w.stwList)
    # reset my name list
    names = []
    # split name, because boolean contains 8 names
    splitname = name.split(',')
    for i in splitname:
        # append all names to the list
        names.append(i)
    for i in numrecords:
        myItem = (w.stwList.item(i))
        # get the record
        myValue = myItem['values']
        #get the name
        myName = myValue[0]
        # split name, because boolean contains 8 names
        temp = myName.split(',')
        for variable in temp:
            # append all names to the list
            names.append(variable)
    # check for duplicate names
    duplicates = Repeat(names)
    if duplicates == []:
        # if no duplicates, write the record
        # list records start with 0, but 1 is shown!! --> (myId-1) and (myId)
        w.stwList.insert('','end',myId,text=str(myId+1),values=record)
        set_modified()
        # clear the trigger combobox
        w.cboTrigValue['values'] = '0'
        for variable in names:
            # fill the trigger combobox
            w.cboTrigValue['values'] = (*w.cboTrigValue['values'], variable) 
        intNumRecords.set(myId +1)
        set_modified()
    else:
        # inform user for duplicates
        txt = _('duplicate names:\n')
        for dup in duplicates:
            txt = txt + dup +'\n'
        txt = txt + _('Names must be unique!')
        messagebox.showwarning(_('Save value'),txt)

#-------------------------------------------------------------------------------   

def btnListDelete_LeftRelease(p1):
    """
    ############################################################################
    # delete selected row from list
    ############################################################################
    """
    curItem = w.stwList.focus()
    if curItem == '':
        return
    result = messagebox.askyesno('Delete item', 'Are you sure?')
    if result:
        w.stwList.delete(curItem)
    else:
        pass

#-------------------------------------------------------------------------------   

def btnListEdit_LeftClick(p1):
    """
    ############################################################################
    # open record for edit
    ############################################################################
    """
    stwList_LeftDblClick(p1)    
"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#              _       _                 _    
#             | |     | |               | |   
#  _ __   ___ | |_ ___| |__   ___   ___ | | __
# | '_ \ / _ \| __/ _ \ '_ \ / _ \ / _ \| |/ /
# | | | | (_) | ||  __/ |_) | (_) | (_) |   < 
# |_| |_|\___/ \__\___|_.__/ \___/ \___/|_|\_\
#   __                  _   _                 
#  / _|                | | (_)                
# | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
# |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# | | | |_| | | | | (__| |_| | (_) | | | \__ \
# |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""
#-------------------------------------------------------------------------------   

def nbValue_TabChanged(p1):
    """
    ############################################################################
    # preset format, when value tab is opened
    ############################################################################
    """
    # print(nbMain.tab(nbMain.select(), "text"))
    # gives name of tab
    intTabVal = 0
    intTabBool = 1
    global strRdoValuesFormat
    # global w
    if (w.nbValue.index('current')==intTabVal):
        format = strRdoValuesFormat.get()
        if format == "X":
            strRdoValuesFormat.set('F')
    else:
        strRdoValuesFormat.set('X')

    
"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#                _ _         _           _   _                  
#               | (_)       | |         | | | |                 
#  _ __ __ _  __| |_  ___   | |__  _   _| |_| |_ ___  _ __      
# | '__/ _` |/ _` | |/ _ \  | '_ \| | | | __| __/ _ \| '_ \     
# | | | (_| | (_| | | (_) | | |_) | |_| | |_| || (_) | | | |    
# |_|  \__,_|\__,_|_|\___/  |_.__/ \__,_|\__|\__\___/|_| |_|    
#                      | |                                      
#   _____   _____ _ __ | |_ ___   ______    __ _ _ __ ___  __ _ 
#  / _ \ \ / / _ \ '_ \| __/ __| |______|  / _` | '__/ _ \/ _` |
# |  __/\ V /  __/ | | | |_\__ \          | (_| | | |  __/ (_| |
#  \___| \_/ \___|_| |_|\__|___/           \__,_|_|  \___|\__,_|
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""
#-------------------------------------------------------------------------------   

def rdoValuesData_LeftClick(p1):
    """
    ############################################################################
    # set area to data
    ############################################################################
    """
    # here my code
    # set to data
    global strRdoValues
    strRdoValues.set('D')
    w.spbValuesDBNo.config(state=tk.NORMAL) 
    w.rdoValuesReal.config(state=tk.NORMAL)
    w.rdoValuesDint.config(state=tk.NORMAL)
    w.rdoValuesByte.config(state=tk.NORMAL)
    w.rdoValuesBool.config(state=tk.NORMAL)

#-------------------------------------------------------------------------------   

def rdoValuesOutput_LeftClick(p1):
    """
    ############################################################################
    # set area to output
    ############################################################################
    """
    # set to output
    global strRdoValues
    strRdoValues.set('Q')
    w.spbValuesDBNo.config(state=tk.DISABLED) 
    w.rdoValuesReal.config(state=tk.NORMAL)
    w.rdoValuesDint.config(state=tk.NORMAL)
    w.rdoValuesByte.config(state=tk.NORMAL)
    w.rdoValuesBool.config(state=tk.NORMAL)

#-------------------------------------------------------------------------------   

def rdoValuesInput_LeftClick(p1):
    """
    ############################################################################
    # set area to input
    ############################################################################
    """
    # set to input
    global strRdoValues
    strRdoValues.set('I')
    w.spbValuesDBNo.config(state=tk.DISABLED) 
    w.rdoValuesReal.config(state=tk.NORMAL)
    w.rdoValuesDint.config(state=tk.NORMAL)
    w.rdoValuesByte.config(state=tk.NORMAL)
    w.rdoValuesBool.config(state=tk.NORMAL)

#-------------------------------------------------------------------------------   

def rdoValuesFlag_LeftClick(p1):
    """
    ############################################################################
    # set area to flag
    ############################################################################
    """
    # set to flag
    global strRdoValues
    strRdoValues.set('F')
    w.spbValuesDBNo.config(state=tk.DISABLED) 
    w.rdoValuesReal.config(state=tk.NORMAL)
    w.rdoValuesDint.config(state=tk.NORMAL)
    w.rdoValuesByte.config(state=tk.NORMAL)
    w.rdoValuesBool.config(state=tk.NORMAL)

#-------------------------------------------------------------------------------   

def rdoValuesTimer_LeftClick(p1):
    """
    ############################################################################
    # set area to timer
    ############################################################################
    """
    # set to timer
    global strRdoValues
    strRdoValues.set('T')
    global strRdoValuesFormat
    strRdoValuesFormat.set('W')
    w.spbValuesDBNo.config(state=tk.DISABLED)
    w.rdoValuesReal.config(state=tk.DISABLED)
    w.rdoValuesDint.config(state=tk.DISABLED)
    w.rdoValuesByte.config(state=tk.DISABLED)
    w.rdoValuesBool.config(state=tk.DISABLED)
    
#-------------------------------------------------------------------------------   

def rdoValuesCounter_LeftClick(p1):
    """
    ############################################################################
    # set area to counter
    ############################################################################
    """
    # set to counter
    global strRdoValues
    strRdoValues.set('C')
    global strRdoValuesFormat
    strRdoValuesFormat.set('W')
    w.spbValuesDBNo.config(state=tk.DISABLED) 
    w.spbValuesDBNo.config(state=tk.DISABLED)
    w.rdoValuesReal.config(state=tk.DISABLED)
    w.rdoValuesDint.config(state=tk.DISABLED)
    w.rdoValuesByte.config(state=tk.DISABLED)
    w.rdoValuesBool.config(state=tk.DISABLED)

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#                _ _         _           _   _                               
#               | (_)       | |         | | | |                              
#  _ __ __ _  __| |_  ___   | |__  _   _| |_| |_ ___  _ __                   
# | '__/ _` |/ _` | |/ _ \  | '_ \| | | | __| __/ _ \| '_ \                  
# | | | (_| | (_| | | (_) | | |_) | |_| | |_| || (_) | | | |                 
# |_|  \__,_|\__,_|_|\___/  |_.__/ \__,_|\__|\__\___/|_| |_|             _   
#                      | |                 / _|                         | |  
#   _____   _____ _ __ | |_ ___   ______  | |_ ___  _ __ _ __ ___   __ _| |_ 
#  / _ \ \ / / _ \ '_ \| __/ __| |______| |  _/ _ \| '__| '_ ` _ \ / _` | __|
# |  __/\ V /  __/ | | | |_\__ \          | || (_) | |  | | | | | | (_| | |_ 
#  \___| \_/ \___|_| |_|\__|___/          |_| \___/|_|  |_| |_| |_|\__,_|\__|
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""
#-------------------------------------------------------------------------------   

def rdoValuesReal_LeftClick(p1):
    """
    ############################################################################
    # set format to Real
    ############################################################################
    """
    w.nbValue.select(0)
    global strRdoValuesFormat
    strRdoValuesFormat.set('F')

#-------------------------------------------------------------------------------   

def rdoValuesDint_LeftClick(p1):
    """
    ############################################################################
    # set format to Dint
    ############################################################################
    """
    w.nbValue.select(0)
    global strRdoValuesFormat
    strRdoValuesFormat.set('D')

#-------------------------------------------------------------------------------   

def rdoValuesInt_LeftClick(p1):
    """
    ############################################################################
    # set format to Int
    ############################################################################
    """
    w.nbValue.select(0)
    global strRdoValuesFormat
    strRdoValuesFormat.set('W')

#-------------------------------------------------------------------------------   

def rdoValuesByte_LeftClick(p1):
    """
    ############################################################################
    # set format to byte
    ############################################################################
    """
    w.nbValue.select(0)
    global strRdoValuesFormat
    strRdoValuesFormat.set('B')

#-------------------------------------------------------------------------------   

def rdoValuesBool_LeftClick(p1):
    """
    ############################################################################
    # set format to bool
    ############################################################################
    """
    w.nbValue.select(1)
    global strRdoValuesFormat
    strRdoValuesFormat.set('X')

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#  _                       _                                      _       
# | |                     (_)                                    | |      
# | |_ _ __ ___  _____   ___  _____      __   _____   _____ _ __ | |_ ___ 
# | __| '__/ _ \/ _ \ \ / / |/ _ \ \ /\ / /  / _ \ \ / / _ \ '_ \| __/ __|
# | |_| | |  __/  __/\ V /| |  __/\ V  V /  |  __/\ V /  __/ | | | |_\__ \
#  \__|_|  \___|\___| \_/ |_|\___| \_/\_/    \___| \_/ \___|_| |_|\__|___/
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""
#-------------------------------------------------------------------------------   

def stwList_LeftDblClick(p1):
    """
    ############################################################################
    # open record for edit
    ############################################################################
    """
    # values
    
    # area of value
    global strRdoValues
    # datablock number
    global strValuesDBNo
    # address
    global strValuesAdress
    # value name for Real, Dint, Int, Byte
    global strValuesValueName
    global strValuesValueGain
    global strValuesValueOffset
    # value unit
    global strValuesValueUnit

    # set format default to Real ('F') 
    global strRdoValuesFormat
    
    # bool values names
    global strValuesBoolName0
    global strValuesBoolName1
    global strValuesBoolName2
    global strValuesBoolName3
    global strValuesBoolName4
    global strValuesBoolName5
    global strValuesBoolName6
    global strValuesBoolName7
    # bool values gain
    global strValuesBoolGain0
    global strValuesBoolGain1
    global strValuesBoolGain2
    global strValuesBoolGain3
    global strValuesBoolGain4
    global strValuesBoolGain5
    global strValuesBoolGain6
    global strValuesBoolGain7
    # offsets
    global strValuesBoolOffset0
    global strValuesBoolOffset1
    global strValuesBoolOffset2
    global strValuesBoolOffset3
    global strValuesBoolOffset4
    global strValuesBoolOffset5
    global strValuesBoolOffset6
    global strValuesBoolOffset7
    
    global intActRecord
    
    curItem = w.stwList.focus()
    if curItem == '':
        return
    # switch to values tab
    w.nbMain.select(5)
    # get the item from the values list    
    myItem = (w.stwList.item(curItem))
    # save the ID
    myId = myItem['text']
    print('curItem = ', curItem, ' myId = ', myId)
    intActRecord.set(myId)
    # get the record
    myValue = myItem['values']
    #get the name
    myName = myValue[0]
    # check the variable
    myVar = myValue[1]
    print('myVar = ',myVar)
    parts = myVar.split('.')
    
    myGain = str(myValue[2])
    print('myGain = ',myGain)
    myOffset = myValue[3]
    print('myOffset = ',myOffset)
    myUnit = myValue[4]
    print('myUnit = ',myUnit)
    
    if (len(parts)) == 2:
        # if 2 parts we have address from datablock
        # omit DB, get number
        strValuesDBNo.set(str(parts[0][2:]))
        # get operand: format and area
        strRdoValuesFormat.set(str(parts[1][1].upper()))
        strRdoValues.set(str(parts[1][0].upper()))
        strValuesAdress.set(str(parts[1][2:]))
        rdoValuesData_LeftClick(p1)
    else:    
        # if only 1 part we have address Q,E,F,T,C
        # get operand: format and area
        myArea = str(parts[0][0].upper())
        if myArea == 'T':
            # timer
            strRdoValuesFormat.set('W')
            strRdoValues.set(str(parts[0][0].upper()))
            strValuesAdress.set(str(parts[0][1:]))
            rdoValuesTimer_LeftClick(p1)
        elif myArea == 'C' or myArea == 'Z':
            # counter
            strRdoValuesFormat.set('W')
            strRdoValues.set(str(parts[0][0].upper()))
            strValuesAdress.set(str(parts[0][1:]))
            rdoValuesCounter_LeftClick(p1)
        elif myArea == 'F' or myArea == 'M':
            # flag
            strRdoValuesFormat.set(str(parts[0][1].upper()))
            strRdoValues.set(str(parts[0][0].upper()))
            strValuesAdress.set(str(parts[0][2:]))
            rdoValuesFlag_LeftClick(p1)
        elif myArea == 'I' or myArea == 'E':
            # input
            strRdoValuesFormat.set(str(parts[0][1].upper()))
            strRdoValues.set(str(parts[0][0].upper()))
            strValuesAdress.set(str(parts[0][2:]))
            rdoValuesFlag_LeftClick(p1)
        else:
            # output
            strRdoValuesFormat.set(str(parts[0][1].upper()))
            strRdoValues.set(str(parts[0][0].upper()))
            strValuesAdress.set(str(parts[0][2:]))
            rdoValuesOutput_LeftClick(p1)
            
    myFormat = strRdoValuesFormat.get()
    print(myFormat)
    if myFormat =='X':
        # switch to bool tab
        w.nbValue.select(1)
        nameParts = myName.split(',')
        strValuesBoolName0.set(nameParts[0])
        strValuesBoolName1.set(nameParts[1])
        strValuesBoolName2.set(nameParts[2])
        strValuesBoolName3.set(nameParts[3])
        strValuesBoolName4.set(nameParts[4])
        strValuesBoolName5.set(nameParts[5])
        strValuesBoolName6.set(nameParts[6])
        strValuesBoolName7.set(nameParts[7])

        gainParts = myGain.split('-')
        print(myGain)
        strValuesBoolGain0.set(gainParts[0])
        strValuesBoolGain1.set(gainParts[1])
        strValuesBoolGain2.set(gainParts[2])
        strValuesBoolGain3.set(gainParts[3])
        strValuesBoolGain4.set(gainParts[4])
        strValuesBoolGain5.set(gainParts[5])
        strValuesBoolGain6.set(gainParts[6])
        strValuesBoolGain7.set(gainParts[7])

        offsetParts = myOffset.split('-')
        strValuesBoolOffset0.set(offsetParts[0])
        strValuesBoolOffset1.set(offsetParts[1])
        strValuesBoolOffset2.set(offsetParts[2])
        strValuesBoolOffset3.set(offsetParts[3])
        strValuesBoolOffset4.set(offsetParts[4])
        strValuesBoolOffset5.set(offsetParts[5])
        strValuesBoolOffset6.set(offsetParts[6])
        strValuesBoolOffset7.set(offsetParts[7])

    else:
        # switch to values tab
        w.nbValue.select(0)
        # now fill value tab fields
        strValuesValueName.set(myName)
        strValuesValueGain.set(myGain)
        strValuesValueOffset.set(myOffset)
        strValuesValueUnit.set(myUnit)

    # enable save button
    w.btnValuesSave.config(state = tk.NORMAL)
    # fill value tab fields and open it
    w.nbMain.select(5)
        
#-------------------------------------------------------------------------------   

def destroy_window():
    """
    ############################################################################
    # Function which closes the application /  window
    ############################################################################
    """
    global top_level
    top_level.destroy()
    top_level = None

#-------------------------------------------------------------------------------   

def xxx(p1):
    """
    ############################################################################
    # placeholder for undefined binding
    ############################################################################
    """

    print('aqconfig_support.xxx')
    sys.stdout.flush()

"""
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
#                  _                                                   
#                 (_)                                                  
#  _ __ ___   __ _ _ _ __    _ __  _ __ ___   __ _ _ __ __ _ _ __ ___  
# | '_ ` _ \ / _` | | '_ \  | '_ \| '__/ _ \ / _` | '__/ _` | '_ ` _ \ 
# | | | | | | (_| | | | | | | |_) | | | (_) | (_| | | | (_| | | | | | |
# |_| |_| |_|\__,_|_|_| |_| | .__/|_|  \___/ \__, |_|  \__,_|_| |_| |_|
#                           | |               __/ |                    
#                           |_|              |___/                     
#
#-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
"""

if __name__ == '__main__':
    import aqconfig
    aqconfig.vp_start_gui()





