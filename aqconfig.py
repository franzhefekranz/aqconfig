#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.5
#  in conjunction with Tcl version 8.6
#    Nov 04, 2020 02:32:02 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import aqconfig_support
import os.path
import gettext
from pathlib import Path
import configparser
import os

# _ = gettext.gettext
gettext.install('aqconfig', 'locales')

cfg = Path(os.getcwd() + '\\config.ini')
if cfg.is_file():
    config = configparser.ConfigParser()
    config.optionxform = str

    try:
        config.read(cfg, encoding='utf-8')
    except BaseException:
        try:
            config.read(cfg, encoding='ANSI')
        except Exception as e:
            messagebox.showerror('Read config file', e)
    language = (config['aqconfig']['language'])

    if language == 'de':
        lng1 = gettext.translation('aqconfig', \
                                   localedir='locales', \
                                   languages=['de'])
        lng1.install()
        _ = lng1.gettext
    elif language == 'en':
        lng2 = gettext.translation('aqconfig', \
                                   localedir='locales', \
                                   languages=['en'])
        lng2.install()
        _ = lng2.gettext
    elif language == 'fr':
        lng3 = gettext.translation('aqconfig', \
                                   localedir='locales', \
                                   languages=['fr'])
        lng.install()
        _ = lng3.gettext


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    aqconfig_support.set_Tk_var()
    top = frmMain(root)
    aqconfig_support.init(root, top)
    root.mainloop()


def set_lng(language):
    ''' translate the app '''
    de = gettext.translation('aqconfig', \
                             localedir='locales', \
                             languages=['de'])
    de.install()
    _ = de.gettext


w = None


def create_frmMain(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_frmMain(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    aqconfig_support.set_Tk_var()
    top = frmMain(w)
    aqconfig_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_frmMain():
    global w
    w.destroy()
    w = None


class frmMain:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("800x600+631+159")
        top.minsize(800, 600)
        top.maxsize(1924, 1041)
        top.resizable(0, 0)
        top.title("Aqserver configuration  tool")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top,
                                activebackground="#ececec",
                                activeborderwidth=1,
                                activeforeground="#000000",
                                background="#d9d9d9",
                                borderwidth=1,
                                disabledforeground="#a3a3a3",
                                foreground="#000000",
                                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 label=_("File"))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileNew,
            label=_("New"))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileOpen,
            label=_("Open ..."))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileSave,
            label=_("Save"))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileSaveAs,
            label=_("Save as ..."))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuSaveBat,
            label=_("Save *.bat"))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileSettings,
            label=_("Settings"))
        self.sub_menu.add_command(
            command=aqconfig_support.OnMnuFileExit,
            label=_("Quit"))
        self.sub_menu1 = tk.Menu(top,
                                 activebackground="#ececec",
                                 activeborderwidth=1,
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 borderwidth=1,
                                 disabledforeground="#a3a3a3",
                                 foreground="#000000",
                                 tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                                 label=_("Help"))
        self.sub_menu1.add_command(
            command=aqconfig_support.OnMnuHelpContents,
            label=_("Contents"))
        self.sub_menu1.add_command(
            command=aqconfig_support.OnMnuHelpContext,
            label=_("Contextual help"))
        self.sub_menu1.add_command(
            command=aqconfig_support.OnMnuHelpAbout,
            label=_("About"))

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.nbMain = ttk.Notebook(top)
        self.nbMain.place(x=5, y=55, height=516, width=792)
        self.nbMain.configure(takefocus="")
        self.nbMain_Info = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Info, padding=3)
        self.nbMain.tab(0, text="Info", compound="left", underline="-1", )
        self.nbMain_Info.configure(background="#d9d9d9")
        self.nbMain_Info.configure(highlightbackground="#d9d9d9")
        self.nbMain_Info.configure(highlightcolor="black")
        self.nbMain_Com = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Com, padding=3)
        self.nbMain.tab(1, text=_("Communication"), compound="left", underline="-1"
                        , )
        self.nbMain_Com.configure(background="#d9d9d9")
        self.nbMain_Com.configure(highlightbackground="#d9d9d9")
        self.nbMain_Com.configure(highlightcolor="black")
        self.nbMain_Misc = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Misc, padding=3)
        self.nbMain.tab(2, text=_("Miscellaneous"), compound="left", underline="-1"
                        , )
        self.nbMain_Misc.configure(background="#d9d9d9")
        self.nbMain_Misc.configure(highlightbackground="#d9d9d9")
        self.nbMain_Misc.configure(highlightcolor="black")
        self.nbMain_Trigger = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Trigger, padding=3)
        self.nbMain.tab(3, text=_("Trigger"), compound="left", underline="-1", )
        self.nbMain_Trigger.configure(background="#d9d9d9")
        self.nbMain_Trigger.configure(highlightbackground="#d9d9d9")
        self.nbMain_Trigger.configure(highlightcolor="black")
        self.nbMain_Debug = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Debug, padding=3)
        self.nbMain.tab(4, text=_("Debug"), compound="left", underline="-1", )
        self.nbMain_Debug.configure(background="#d9d9d9")
        self.nbMain_Debug.configure(highlightbackground="#d9d9d9")
        self.nbMain_Debug.configure(highlightcolor="black")
        self.nbMain_Values = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Values, padding=3)
        self.nbMain.tab(5, text=_("Values"), compound="left", underline="-1", )
        self.nbMain_Values.configure(background="#d9d9d9")
        self.nbMain_Values.configure(highlightbackground="#d9d9d9")
        self.nbMain_Values.configure(highlightcolor="black")
        self.nbMain_List = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_List, padding=3)
        self.nbMain.tab(6, text=_("List"), compound="left", underline="-1", )
        self.nbMain_List.configure(background="#d9d9d9")
        self.nbMain_List.configure(highlightbackground="#d9d9d9")
        self.nbMain_List.configure(highlightcolor="black")

        self.lblInfoCustomer = ttk.Label(self.nbMain_Info)
        self.lblInfoCustomer.place(x=30, y=30, height=25, width=100)
        self.lblInfoCustomer.configure(background="#d9d9d9")
        self.lblInfoCustomer.configure(foreground="#000000")
        self.lblInfoCustomer.configure(font="TkDefaultFont")
        self.lblInfoCustomer.configure(relief="flat")
        self.lblInfoCustomer.configure(anchor='w')
        self.lblInfoCustomer.configure(justify='left')
        self.lblInfoCustomer.configure(text=_('''Customer:'''))

        self.lblInfoCreator = ttk.Label(self.nbMain_Info)
        self.lblInfoCreator.place(x=30, y=60, height=25, width=100)
        self.lblInfoCreator.configure(background="#d9d9d9")
        self.lblInfoCreator.configure(foreground="#000000")
        self.lblInfoCreator.configure(font="TkDefaultFont")
        self.lblInfoCreator.configure(relief="flat")
        self.lblInfoCreator.configure(anchor='w')
        self.lblInfoCreator.configure(justify='left')
        self.lblInfoCreator.configure(text=_('''Creator:'''))

        self.lblInfoMachine = ttk.Label(self.nbMain_Info)
        self.lblInfoMachine.place(x=30, y=90, height=25, width=100)
        self.lblInfoMachine.configure(background="#d9d9d9")
        self.lblInfoMachine.configure(foreground="#000000")
        self.lblInfoMachine.configure(font="TkDefaultFont")
        self.lblInfoMachine.configure(relief="flat")
        self.lblInfoMachine.configure(anchor='w')
        self.lblInfoMachine.configure(justify='left')
        self.lblInfoMachine.configure(text=_('''Machine:'''))

        self.lblInfoOrder = ttk.Label(self.nbMain_Info)
        self.lblInfoOrder.place(x=30, y=120, height=25, width=100)
        self.lblInfoOrder.configure(background="#d9d9d9")
        self.lblInfoOrder.configure(foreground="#000000")
        self.lblInfoOrder.configure(font="TkDefaultFont")
        self.lblInfoOrder.configure(relief="flat")
        self.lblInfoOrder.configure(anchor='w')
        self.lblInfoOrder.configure(justify='left')
        self.lblInfoOrder.configure(text=_('''Order:'''))

        self.lblInfoRemarks = ttk.Label(self.nbMain_Info)
        self.lblInfoRemarks.place(x=30, y=150, height=25, width=100)
        self.lblInfoRemarks.configure(background="#d9d9d9")
        self.lblInfoRemarks.configure(foreground="#000000")
        self.lblInfoRemarks.configure(font="TkDefaultFont")
        self.lblInfoRemarks.configure(relief="flat")
        self.lblInfoRemarks.configure(anchor='w')
        self.lblInfoRemarks.configure(justify='left')
        self.lblInfoRemarks.configure(text=_('''Remarks:'''))

        self.tinInfoCustomer = ttk.Entry(self.nbMain_Info)
        self.tinInfoCustomer.place(x=150, y=30, height=25, width=200)
        self.tinInfoCustomer.configure(textvariable=aqconfig_support.strInfoCustomer)
        self.tinInfoCustomer.configure(validate="key")
        set_modified = self.tinInfoCustomer.register(aqconfig_support.set_modified)
        self.tinInfoCustomer.configure(validatecommand=(set_modified))
        self.tinInfoCustomer.configure(takefocus="")
        self.tinInfoCustomer.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoCustomer_tooltip = \
            ToolTip(self.tinInfoCustomer, self.tooltip_font, _('''enter the name of the customer / mill'''))

        self.tinInfoCreator = ttk.Entry(self.nbMain_Info)
        self.tinInfoCreator.place(x=150, y=60, height=25, width=200)
        self.tinInfoCreator.configure(textvariable=aqconfig_support.strInfoCreator)
        self.tinInfoCreator.configure(validate="key")
        set_modified = self.tinInfoCreator.register(aqconfig_support.set_modified)
        self.tinInfoCreator.configure(validatecommand=(set_modified))
        self.tinInfoCreator.configure(takefocus="")
        self.tinInfoCreator.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoCreator_tooltip = \
            ToolTip(self.tinInfoCreator, self.tooltip_font, _('''enter your name'''))

        self.tinInfoMachine = ttk.Entry(self.nbMain_Info)
        self.tinInfoMachine.place(x=150, y=90, height=25, width=200)
        self.tinInfoMachine.configure(textvariable=aqconfig_support.strInfoMachine)
        self.tinInfoMachine.configure(validate="key")
        set_modified = self.tinInfoMachine.register(aqconfig_support.set_modified)
        self.tinInfoMachine.configure(validatecommand=(set_modified))
        self.tinInfoMachine.configure(takefocus="")
        self.tinInfoMachine.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoMachine_tooltip = \
            ToolTip(self.tinInfoMachine, self.tooltip_font, _('''enter the type of machine'''))

        self.tinInfoOrder = ttk.Entry(self.nbMain_Info)
        self.tinInfoOrder.place(x=150, y=120, height=25, width=200)
        self.tinInfoOrder.configure(textvariable=aqconfig_support.strInfoOrder)
        self.tinInfoOrder.configure(validate="key")
        set_modified = self.tinInfoOrder.register(aqconfig_support.set_modified)
        self.tinInfoOrder.configure(validatecommand=(set_modified))
        self.tinInfoOrder.configure(takefocus="")
        self.tinInfoOrder.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoOrder_tooltip = \
            ToolTip(self.tinInfoOrder, self.tooltip_font, _('''enter your order number'''))

        self.txtInfoRemarks = tk.Text(self.nbMain_Info)
        self.txtInfoRemarks.place(x=150, y=150, height=80, width=400)
        self.txtInfoRemarks.configure(background="white")
        self.txtInfoRemarks.configure(font="TkTextFont")
        self.txtInfoRemarks.configure(foreground="black")
        self.txtInfoRemarks.configure(highlightbackground="#d9d9d9")
        self.txtInfoRemarks.configure(highlightcolor="black")
        self.txtInfoRemarks.configure(insertbackground="black")
        self.txtInfoRemarks.configure(selectbackground="blue")
        self.txtInfoRemarks.configure(selectforeground="white")
        self.txtInfoRemarks.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtInfoRemarks_tooltip = \
            ToolTip(self.txtInfoRemarks, self.tooltip_font, _('''enter some description'''))

        self.style.map('TCheckbutton', background=
        [('selected', _bgcolor), ('active', _ana2color)])
        self.chkComDemo = ttk.Checkbutton(self.nbMain_Com)
        self.chkComDemo.place(x=150, y=30, width=60, height=30)
        self.chkComDemo.configure(variable=aqconfig_support.boolComDemo)
        self.chkComDemo.configure(command=aqconfig_support.set_modified)
        self.chkComDemo.configure(takefocus="")
        self.chkComDemo.configure(text=_('''Demo'''))
        self.tooltip_font = "TkDefaultFont"
        self.chkComDemo_tooltip = \
            ToolTip(self.chkComDemo, self.tooltip_font, _('''run communication in demo'''))

        self.lblComIp = tk.Label(self.nbMain_Com)
        self.lblComIp.place(x=30, y=60, height=25, width=100)
        self.lblComIp.configure(activebackground="#f9f9f9")
        self.lblComIp.configure(activeforeground="black")
        self.lblComIp.configure(background="#d9d9d9")
        self.lblComIp.configure(disabledforeground="#a3a3a3")
        self.lblComIp.configure(foreground="#000000")
        self.lblComIp.configure(highlightbackground="#d9d9d9")
        self.lblComIp.configure(highlightcolor="black")
        self.lblComIp.configure(justify='left')
        self.lblComIp.configure(text=_('''IP address:'''))

        self.lblComRack = tk.Label(self.nbMain_Com)
        self.lblComRack.place(x=30, y=90, height=25, width=100)
        self.lblComRack.configure(activebackground="#f9f9f9")
        self.lblComRack.configure(activeforeground="black")
        self.lblComRack.configure(background="#d9d9d9")
        self.lblComRack.configure(disabledforeground="#a3a3a3")
        self.lblComRack.configure(foreground="#000000")
        self.lblComRack.configure(highlightbackground="#d9d9d9")
        self.lblComRack.configure(highlightcolor="black")
        self.lblComRack.configure(justify='left')
        self.lblComRack.configure(text=_('''Rack no.:'''))

        self.lblComSlot = tk.Label(self.nbMain_Com)
        self.lblComSlot.place(x=30, y=120, height=25, width=100)
        self.lblComSlot.configure(activebackground="#f9f9f9")
        self.lblComSlot.configure(activeforeground="black")
        self.lblComSlot.configure(background="#d9d9d9")
        self.lblComSlot.configure(disabledforeground="#a3a3a3")
        self.lblComSlot.configure(foreground="#000000")
        self.lblComSlot.configure(highlightbackground="#d9d9d9")
        self.lblComSlot.configure(highlightcolor="black")
        self.lblComSlot.configure(justify='left')
        self.lblComSlot.configure(text=_('''Slot no.:'''))

        self.spbComIp1 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp1.place(x=150, y=60, height=25, width=50)
        self.spbComIp1.configure(activebackground="#f9f9f9")
        self.spbComIp1.configure(background="white")
        self.spbComIp1.configure(buttonbackground="#d9d9d9")
        self.spbComIp1.configure(disabledforeground="#a3a3a3")
        self.spbComIp1.configure(font="TkDefaultFont")
        self.spbComIp1.configure(foreground="black")
        self.spbComIp1.configure(highlightbackground="black")
        self.spbComIp1.configure(highlightcolor="black")
        self.spbComIp1.configure(insertbackground="black")
        self.spbComIp1.configure(justify='right')
        self.spbComIp1.configure(selectbackground="blue")
        self.spbComIp1.configure(selectforeground="white")
        self.spbComIp1.configure(textvariable=aqconfig_support.strComIp1)
        set_modified = self.spbComIp1.register(aqconfig_support.set_modified)
        self.spbComIp1.configure(validatecommand=(set_modified))

        self.lblComIpDot1 = tk.Label(self.nbMain_Com)
        self.lblComIpDot1.place(x=205, y=60, height=25, width=5)
        self.lblComIpDot1.configure(activebackground="#f9f9f9")
        self.lblComIpDot1.configure(activeforeground="black")
        self.lblComIpDot1.configure(background="#d9d9d9")
        self.lblComIpDot1.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot1.configure(foreground="#000000")
        self.lblComIpDot1.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot1.configure(highlightcolor="black")
        self.lblComIpDot1.configure(text=_('''.'''))

        self.spbComIp2 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp2.place(x=215, y=60, height=25, width=50)
        self.spbComIp2.configure(activebackground="#f9f9f9")
        self.spbComIp2.configure(background="white")
        self.spbComIp2.configure(buttonbackground="#d9d9d9")
        self.spbComIp2.configure(disabledforeground="#a3a3a3")
        self.spbComIp2.configure(font="TkDefaultFont")
        self.spbComIp2.configure(foreground="black")
        self.spbComIp2.configure(highlightbackground="black")
        self.spbComIp2.configure(highlightcolor="black")
        self.spbComIp2.configure(insertbackground="black")
        self.spbComIp2.configure(justify='right')
        self.spbComIp2.configure(selectbackground="blue")
        self.spbComIp2.configure(selectforeground="white")
        self.spbComIp2.configure(textvariable=aqconfig_support.strComIp2)
        set_modified = self.spbComIp2.register(aqconfig_support.set_modified)
        self.spbComIp2.configure(validatecommand=(set_modified))

        self.lblComIpDot2 = tk.Label(self.nbMain_Com)
        self.lblComIpDot2.place(x=270, y=60, height=25, width=5)
        self.lblComIpDot2.configure(activebackground="#f9f9f9")
        self.lblComIpDot2.configure(activeforeground="black")
        self.lblComIpDot2.configure(background="#d9d9d9")
        self.lblComIpDot2.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot2.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot2.configure(foreground="#000000")
        self.lblComIpDot2.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot2.configure(highlightcolor="black")
        self.lblComIpDot2.configure(text=_('''.'''))

        self.spbComIp3 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp3.place(x=280, y=60, height=25, width=50)
        self.spbComIp3.configure(activebackground="#f9f9f9")
        self.spbComIp3.configure(background="white")
        self.spbComIp3.configure(buttonbackground="#d9d9d9")
        self.spbComIp3.configure(disabledforeground="#a3a3a3")
        self.spbComIp3.configure(font="TkDefaultFont")
        self.spbComIp3.configure(foreground="black")
        self.spbComIp3.configure(highlightbackground="black")
        self.spbComIp3.configure(highlightcolor="black")
        self.spbComIp3.configure(insertbackground="black")
        self.spbComIp3.configure(justify='right')
        self.spbComIp3.configure(selectbackground="blue")
        self.spbComIp3.configure(selectforeground="white")
        self.spbComIp3.configure(textvariable=aqconfig_support.strComIp3)
        set_modified = self.spbComIp3.register(aqconfig_support.set_modified)
        self.spbComIp3.configure(validatecommand=(set_modified))

        self.lblComIpDot3 = tk.Label(self.nbMain_Com)
        self.lblComIpDot3.place(x=335, y=60, height=25, width=5)
        self.lblComIpDot3.configure(activebackground="#f9f9f9")
        self.lblComIpDot3.configure(activeforeground="black")
        self.lblComIpDot3.configure(background="#d9d9d9")
        self.lblComIpDot3.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot3.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot3.configure(foreground="#000000")
        self.lblComIpDot3.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot3.configure(highlightcolor="black")
        self.lblComIpDot3.configure(text=_('''.'''))

        self.spbComIp4 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp4.place(x=345, y=60, height=25, width=50)
        self.spbComIp4.configure(activebackground="#f9f9f9")
        self.spbComIp4.configure(background="white")
        self.spbComIp4.configure(buttonbackground="#d9d9d9")
        self.spbComIp4.configure(disabledforeground="#a3a3a3")
        self.spbComIp4.configure(font="TkDefaultFont")
        self.spbComIp4.configure(foreground="black")
        self.spbComIp4.configure(highlightbackground="black")
        self.spbComIp4.configure(highlightcolor="black")
        self.spbComIp4.configure(insertbackground="black")
        self.spbComIp4.configure(justify='right')
        self.spbComIp4.configure(selectbackground="blue")
        self.spbComIp4.configure(selectforeground="white")
        self.spbComIp4.configure(textvariable=aqconfig_support.strComIp4)
        set_modified = self.spbComIp4.register(aqconfig_support.set_modified)
        self.spbComIp4.configure(validatecommand=(set_modified))

        self.spbComRack = tk.Spinbox(self.nbMain_Com, from_=0.0, to=10.0)
        self.spbComRack.place(x=150, y=90, height=25, width=50)
        self.spbComRack.configure(activebackground="#f9f9f9")
        self.spbComRack.configure(background="white")
        self.spbComRack.configure(buttonbackground="#d9d9d9")
        self.spbComRack.configure(disabledforeground="#a3a3a3")
        self.spbComRack.configure(font="TkDefaultFont")
        self.spbComRack.configure(foreground="black")
        self.spbComRack.configure(highlightbackground="black")
        self.spbComRack.configure(highlightcolor="black")
        self.spbComRack.configure(insertbackground="black")
        self.spbComRack.configure(justify='right')
        self.spbComRack.configure(selectbackground="blue")
        self.spbComRack.configure(selectforeground="white")
        self.spbComRack.configure(textvariable=aqconfig_support.strComRack)
        set_modified = self.spbComRack.register(aqconfig_support.set_modified)
        self.spbComRack.configure(validatecommand=(set_modified))

        self.spbComSlot = tk.Spinbox(self.nbMain_Com, from_=0.0, to=18.0)
        self.spbComSlot.place(x=150, y=120, height=25, width=51)
        self.spbComSlot.configure(activebackground="#f9f9f9")
        self.spbComSlot.configure(background="white")
        self.spbComSlot.configure(buttonbackground="#d9d9d9")
        self.spbComSlot.configure(disabledforeground="#a3a3a3")
        self.spbComSlot.configure(font="TkDefaultFont")
        self.spbComSlot.configure(foreground="black")
        self.spbComSlot.configure(highlightbackground="black")
        self.spbComSlot.configure(highlightcolor="black")
        self.spbComSlot.configure(insertbackground="black")
        self.spbComSlot.configure(justify='right')
        self.spbComSlot.configure(selectbackground="blue")
        self.spbComSlot.configure(selectforeground="white")
        self.spbComSlot.configure(textvariable=aqconfig_support.strComSlot)
        set_modified = self.spbComSlot.register(aqconfig_support.set_modified)
        self.spbComSlot.configure(validatecommand=(set_modified))

        self.lblComAttempts = tk.Label(self.nbMain_Com)
        self.lblComAttempts.place(x=30, y=150, height=25, width=100)
        self.lblComAttempts.configure(activebackground="#f9f9f9")
        self.lblComAttempts.configure(activeforeground="black")
        self.lblComAttempts.configure(background="#d9d9d9")
        self.lblComAttempts.configure(disabledforeground="#a3a3a3")
        self.lblComAttempts.configure(foreground="#000000")
        self.lblComAttempts.configure(highlightbackground="#d9d9d9")
        self.lblComAttempts.configure(highlightcolor="black")
        self.lblComAttempts.configure(justify='left')
        self.lblComAttempts.configure(text=_('''Attempts:'''))

        self.spbComAttempts = tk.Spinbox(self.nbMain_Com, from_=0.0, to=10.0)
        self.spbComAttempts.place(x=150, y=150, height=25, width=50)
        self.spbComAttempts.configure(activebackground="#f9f9f9")
        self.spbComAttempts.configure(background="white")
        self.spbComAttempts.configure(buttonbackground="#d9d9d9")
        self.spbComAttempts.configure(disabledforeground="#a3a3a3")
        self.spbComAttempts.configure(font="TkDefaultFont")
        self.spbComAttempts.configure(foreground="black")
        self.spbComAttempts.configure(highlightbackground="black")
        self.spbComAttempts.configure(highlightcolor="black")
        self.spbComAttempts.configure(insertbackground="black")
        self.spbComAttempts.configure(justify='right')
        self.spbComAttempts.configure(selectbackground="blue")
        self.spbComAttempts.configure(selectforeground="white")
        self.spbComAttempts.configure(textvariable=aqconfig_support.strComAttempts)
        set_modified = self.spbComAttempts.register(aqconfig_support.set_modified)
        self.spbComAttempts.configure(validatecommand=(set_modified))

        self.lblMiscDatafile = ttk.Label(self.nbMain_Misc)
        self.lblMiscDatafile.place(x=30, y=30, height=25, width=120)
        self.lblMiscDatafile.configure(background="#d9d9d9")
        self.lblMiscDatafile.configure(foreground="#000000")
        self.lblMiscDatafile.configure(font="TkDefaultFont")
        self.lblMiscDatafile.configure(relief="flat")
        self.lblMiscDatafile.configure(anchor='w')
        self.lblMiscDatafile.configure(justify='left')
        self.lblMiscDatafile.configure(text=_('''Datafile prefix:'''))
        self.tooltip_font = "TkDefaultFont"
        self.lblMiscDatafile_tooltip = \
            ToolTip(self.lblMiscDatafile, self.tooltip_font, _('''enter name of the datafile without extension'''))

        self.lblMiscPath = ttk.Label(self.nbMain_Misc)
        self.lblMiscPath.place(x=30, y=60, height=25, width=100)
        self.lblMiscPath.configure(background="#d9d9d9")
        self.lblMiscPath.configure(foreground="#000000")
        self.lblMiscPath.configure(font="TkDefaultFont")
        self.lblMiscPath.configure(relief="flat")
        self.lblMiscPath.configure(anchor='w')
        self.lblMiscPath.configure(justify='left')
        self.lblMiscPath.configure(text=_('''Storage path:'''))
        self.tooltip_font = "TkDefaultFont"
        self.lblMiscPath_tooltip = \
            ToolTip(self.lblMiscPath, self.tooltip_font, _('''enter the name of the storage path for archived files'''))

        self.lblMiscScantime = ttk.Label(self.nbMain_Misc)
        self.lblMiscScantime.place(x=30, y=120, height=25, width=60)
        self.lblMiscScantime.configure(background="#d9d9d9")
        self.lblMiscScantime.configure(foreground="#000000")
        self.lblMiscScantime.configure(font="TkDefaultFont")
        self.lblMiscScantime.configure(relief="flat")
        self.lblMiscScantime.configure(anchor='w')
        self.lblMiscScantime.configure(justify='left')
        self.lblMiscScantime.configure(text=_('''Scantime:'''))

        self.tinMiscDatafile = ttk.Entry(self.nbMain_Misc)
        self.tinMiscDatafile.place(x=150, y=30, height=25, width=200)
        self.tinMiscDatafile.configure(textvariable=aqconfig_support.strMiscDatafile)
        self.tinMiscDatafile.configure(validate="key")
        set_modified = self.tinMiscDatafile.register(aqconfig_support.set_modified)
        self.tinMiscDatafile.configure(validatecommand=(set_modified))
        self.tinMiscDatafile.configure(takefocus="")
        self.tinMiscDatafile.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinMiscDatafile_tooltip = \
            ToolTip(self.tinMiscDatafile, self.tooltip_font, _('''enter the name of the datafile, without extension'''))

        self.tinMiscStoragePath = ttk.Entry(self.nbMain_Misc)
        self.tinMiscStoragePath.place(x=150, y=60, height=25, width=300)
        self.tinMiscStoragePath.configure(textvariable=aqconfig_support.strMiscStoragePath)
        self.tinMiscStoragePath.configure(validate="key")
        set_modified = self.tinMiscStoragePath.register(aqconfig_support.set_modified)
        self.tinMiscStoragePath.configure(validatecommand=(set_modified))
        self.tinMiscStoragePath.configure(takefocus="")
        self.tinMiscStoragePath.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinMiscStoragePath_tooltip = \
            ToolTip(self.tinMiscStoragePath, self.tooltip_font,
                    _('''enter the name of the storage path for archived files'''))

        self.btnMiscStoragePath = ttk.Button(self.nbMain_Misc)
        self.btnMiscStoragePath.place(x=460, y=55, height=30, width=30)
        self.btnMiscStoragePath.configure(command=aqconfig_support.OnBtnMiscStoragePath)
        self.btnMiscStoragePath.configure(takefocus="")
        self.btnMiscStoragePath.configure(text=_('''...'''))

        self.chkMiscStoragePath = ttk.Checkbutton(self.nbMain_Misc)
        self.chkMiscStoragePath.place(x=150, y=90, width=300, height=30)
        self.chkMiscStoragePath.configure(variable=aqconfig_support.boolMiscStoragePath)
        self.chkMiscStoragePath.configure(command=aqconfig_support.set_modified)
        self.chkMiscStoragePath.configure(takefocus="")
        self.chkMiscStoragePath.configure(text=_('''use yyyy/mm/dd directory structure'''))
        self.tooltip_font = "TkDefaultFont"
        self.chkMiscStoragePath_tooltip = \
            ToolTip(self.chkMiscStoragePath, self.tooltip_font,
                    _('''file are store in a directory structure, per day'''))

        self.spbMiscScantime = tk.Spinbox(self.nbMain_Misc, from_=0.0, to=1000.0)
        self.spbMiscScantime.place(x=150, y=120, height=25, width=60)
        self.spbMiscScantime.configure(activebackground="#f9f9f9")
        self.spbMiscScantime.configure(background="white")
        self.spbMiscScantime.configure(buttonbackground="#d9d9d9")
        self.spbMiscScantime.configure(disabledforeground="#a3a3a3")
        self.spbMiscScantime.configure(font="TkDefaultFont")
        self.spbMiscScantime.configure(foreground="black")
        self.spbMiscScantime.configure(highlightbackground="black")
        self.spbMiscScantime.configure(highlightcolor="black")
        self.spbMiscScantime.configure(increment="10.0")
        self.spbMiscScantime.configure(insertbackground="black")
        self.spbMiscScantime.configure(justify='right')
        self.spbMiscScantime.configure(selectbackground="blue")
        self.spbMiscScantime.configure(selectforeground="white")
        self.spbMiscScantime.configure(textvariable=aqconfig_support.strMiscScantime)
        set_modified = self.spbMiscScantime.register(aqconfig_support.set_modified)
        self.spbMiscScantime.configure(validatecommand=(set_modified))

        self.lblMiscScantimeUnit = ttk.Label(self.nbMain_Misc)
        self.lblMiscScantimeUnit.place(x=220, y=120, height=25, width=35)
        self.lblMiscScantimeUnit.configure(background="#d9d9d9")
        self.lblMiscScantimeUnit.configure(foreground="#000000")
        self.lblMiscScantimeUnit.configure(font="TkDefaultFont")
        self.lblMiscScantimeUnit.configure(relief="flat")
        self.lblMiscScantimeUnit.configure(anchor='w')
        self.lblMiscScantimeUnit.configure(justify='left')
        self.lblMiscScantimeUnit.configure(text=_('''[ms]'''))

        self.chkMiscAutostart = ttk.Checkbutton(self.nbMain_Misc)
        self.chkMiscAutostart.place(x=150, y=150, width=120, height=25)
        self.chkMiscAutostart.configure(variable=aqconfig_support.boolMiscAutostart)
        self.chkMiscAutostart.configure(command=aqconfig_support.set_modified)
        self.chkMiscAutostart.configure(takefocus="")
        self.chkMiscAutostart.configure(text=_('''auto start'''))
        self.tooltip_font = "TkDefaultFont"
        self.chkMiscAutostart_tooltip = \
            ToolTip(self.chkMiscAutostart, self.tooltip_font,
                    _('''file are stored in a directory structure, per day'''))

        self.lblMiscMaxRecords = ttk.Label(self.nbMain_Misc)
        self.lblMiscMaxRecords.place(x=30, y=180, height=25, width=120)
        self.lblMiscMaxRecords.configure(background="#d9d9d9")
        self.lblMiscMaxRecords.configure(foreground="#000000")
        self.lblMiscMaxRecords.configure(font="TkDefaultFont")
        self.lblMiscMaxRecords.configure(relief="flat")
        self.lblMiscMaxRecords.configure(anchor='w')
        self.lblMiscMaxRecords.configure(justify='left')
        self.lblMiscMaxRecords.configure(text=_('''max. records:'''))
        self.tooltip_font = "TkDefaultFont"
        self.lblMiscMaxRecords_tooltip = \
            ToolTip(self.lblMiscMaxRecords, self.tooltip_font,
                    _('''maximum number of records in one file, to avoid big files'''))

        self.spbMiscMaxRecords = tk.Spinbox(self.nbMain_Misc, from_=0.0, to=10000000.0)
        self.spbMiscMaxRecords.place(x=150, y=180, height=25, width=100)
        self.spbMiscMaxRecords.configure(activebackground="#f9f9f9")
        self.spbMiscMaxRecords.configure(background="white")
        self.spbMiscMaxRecords.configure(buttonbackground="#d9d9d9")
        self.spbMiscMaxRecords.configure(disabledforeground="#a3a3a3")
        self.spbMiscMaxRecords.configure(font="TkDefaultFont")
        self.spbMiscMaxRecords.configure(foreground="black")
        self.spbMiscMaxRecords.configure(highlightbackground="black")
        self.spbMiscMaxRecords.configure(highlightcolor="black")
        self.spbMiscMaxRecords.configure(increment="1000.0")
        self.spbMiscMaxRecords.configure(insertbackground="black")
        self.spbMiscMaxRecords.configure(justify='right')
        self.spbMiscMaxRecords.configure(selectbackground="blue")
        self.spbMiscMaxRecords.configure(selectforeground="white")
        self.spbMiscMaxRecords.configure(textvariable=aqconfig_support.strMiscMaxRecords)
        set_modified = self.spbMiscMaxRecords.register(aqconfig_support.set_modified)
        self.spbMiscMaxRecords.configure(validatecommand=(set_modified))

        self.chkTrigUseTrigger = ttk.Checkbutton(self.nbMain_Trigger)
        self.chkTrigUseTrigger.place(x=150, y=30, width=200, height=30)
        self.chkTrigUseTrigger.configure(variable=aqconfig_support.boolTrigUseTrigger)
        self.chkTrigUseTrigger.configure(command=aqconfig_support.set_modified)
        self.chkTrigUseTrigger.configure(takefocus="")
        self.chkTrigUseTrigger.configure(text=_('''use trigger'''))
        self.tooltip_font = "TkDefaultFont"
        self.chkTrigUseTrigger_tooltip = \
            ToolTip(self.chkTrigUseTrigger, self.tooltip_font, _('''use a trigger to start a new file'''))

        self.lblTrigValue = ttk.Label(self.nbMain_Trigger)
        self.lblTrigValue.place(x=30, y=60, height=25, width=120)
        self.lblTrigValue.configure(background="#d9d9d9")
        self.lblTrigValue.configure(foreground="#000000")
        self.lblTrigValue.configure(font="TkDefaultFont")
        self.lblTrigValue.configure(relief="flat")
        self.lblTrigValue.configure(anchor='w')
        self.lblTrigValue.configure(justify='left')
        self.lblTrigValue.configure(text=_('''Use value:'''))

        self.lblTrigCondition = ttk.Label(self.nbMain_Trigger)
        self.lblTrigCondition.place(x=30, y=90, height=25, width=120)
        self.lblTrigCondition.configure(background="#d9d9d9")
        self.lblTrigCondition.configure(foreground="#000000")
        self.lblTrigCondition.configure(font="TkDefaultFont")
        self.lblTrigCondition.configure(relief="flat")
        self.lblTrigCondition.configure(anchor='w')
        self.lblTrigCondition.configure(justify='left')
        self.lblTrigCondition.configure(text=_('''Condition:'''))

        self.lblTrigCompare = ttk.Label(self.nbMain_Trigger)
        self.lblTrigCompare.place(x=30, y=120, height=25, width=120)
        self.lblTrigCompare.configure(background="#d9d9d9")
        self.lblTrigCompare.configure(foreground="#000000")
        self.lblTrigCompare.configure(font="TkDefaultFont")
        self.lblTrigCompare.configure(relief="flat")
        self.lblTrigCompare.configure(anchor='w')
        self.lblTrigCompare.configure(justify='left')
        self.lblTrigCompare.configure(text=_('''Compare with:'''))

        self.lblTrigPretriggerTime = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPretriggerTime.place(x=30, y=150, height=25, width=120)
        self.lblTrigPretriggerTime.configure(background="#d9d9d9")
        self.lblTrigPretriggerTime.configure(foreground="#000000")
        self.lblTrigPretriggerTime.configure(font="TkDefaultFont")
        self.lblTrigPretriggerTime.configure(relief="flat")
        self.lblTrigPretriggerTime.configure(anchor='w')
        self.lblTrigPretriggerTime.configure(justify='left')
        self.lblTrigPretriggerTime.configure(text=_('''Pretrigger time:'''))

        self.lblTrigPosttriggerTime = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPosttriggerTime.place(x=30, y=180, height=25, width=120)
        self.lblTrigPosttriggerTime.configure(background="#d9d9d9")
        self.lblTrigPosttriggerTime.configure(foreground="#000000")
        self.lblTrigPosttriggerTime.configure(font="TkDefaultFont")
        self.lblTrigPosttriggerTime.configure(relief="flat")
        self.lblTrigPosttriggerTime.configure(anchor='w')
        self.lblTrigPosttriggerTime.configure(justify='left')
        self.lblTrigPosttriggerTime.configure(text=_('''Posttrigger time:'''))

        self.cboTrigValue = ttk.Combobox(self.nbMain_Trigger)
        self.cboTrigValue.place(x=150, y=60, height=25, width=200)
        self.cboTrigValue.configure(textvariable=aqconfig_support.strTrigValue)
        self.cboTrigValue.configure(validate="all")
        set_modified = self.cboTrigValue.register(aqconfig_support.set_modified)
        self.cboTrigValue.configure(validatecommand=(set_modified))
        self.cboTrigValue.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboTrigValue_tooltip = \
            ToolTip(self.cboTrigValue, self.tooltip_font, _('''select value for trigger'''))

        self.cboTrigCondition = ttk.Combobox(self.nbMain_Trigger)
        self.cboTrigCondition.place(x=150, y=90, height=25, width=50)
        self.value_list = ['>', '>=', '=', '<=', '<', ]
        self.cboTrigCondition.configure(values=self.value_list)
        self.cboTrigCondition.configure(textvariable=aqconfig_support.strTrigCondition)
        self.cboTrigCondition.configure(validate="all")
        set_modified = self.cboTrigCondition.register(aqconfig_support.set_modified)
        self.cboTrigCondition.configure(validatecommand=(set_modified))
        self.cboTrigCondition.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboTrigCondition_tooltip = \
            ToolTip(self.cboTrigCondition, self.tooltip_font, _('''select the comparison operation'''))

        self.tinTrigCompare = ttk.Entry(self.nbMain_Trigger)
        self.tinTrigCompare.place(x=150, y=120, height=25, width=100)
        self.tinTrigCompare.configure(justify='right')
        self.tinTrigCompare.configure(textvariable=aqconfig_support.strTrigCompare)
        self.tinTrigCompare.configure(validate="key")
        set_modified = self.tinTrigCompare.register(aqconfig_support.set_modified)
        self.tinTrigCompare.configure(validatecommand=(set_modified))
        self.tinTrigCompare.configure(takefocus="")
        self.tinTrigCompare.configure(cursor="ibeam")

        self.spbTrigPretriggerTime = tk.Spinbox(self.nbMain_Trigger, from_=1.0, to=100.0)
        self.spbTrigPretriggerTime.place(x=150, y=150, height=25, width=50)
        self.spbTrigPretriggerTime.configure(activebackground="#f9f9f9")
        self.spbTrigPretriggerTime.configure(background="white")
        self.spbTrigPretriggerTime.configure(buttonbackground="#d9d9d9")
        self.spbTrigPretriggerTime.configure(disabledforeground="#a3a3a3")
        self.spbTrigPretriggerTime.configure(font="TkDefaultFont")
        self.spbTrigPretriggerTime.configure(foreground="black")
        self.spbTrigPretriggerTime.configure(highlightbackground="black")
        self.spbTrigPretriggerTime.configure(highlightcolor="black")
        self.spbTrigPretriggerTime.configure(insertbackground="black")
        self.spbTrigPretriggerTime.configure(justify='right')
        self.spbTrigPretriggerTime.configure(selectbackground="blue")
        self.spbTrigPretriggerTime.configure(selectforeground="white")
        self.spbTrigPretriggerTime.configure(textvariable=aqconfig_support.strTrigPreTriggerTime)
        set_modified = self.spbTrigPretriggerTime.register(aqconfig_support.set_modified)
        self.spbTrigPretriggerTime.configure(validatecommand=(set_modified))

        self.spbTrigPosttriggerTime = tk.Spinbox(self.nbMain_Trigger, from_=1.0, to=100.0)
        self.spbTrigPosttriggerTime.place(x=150, y=180, height=25, width=50)
        self.spbTrigPosttriggerTime.configure(activebackground="#f9f9f9")
        self.spbTrigPosttriggerTime.configure(background="white")
        self.spbTrigPosttriggerTime.configure(buttonbackground="#d9d9d9")
        self.spbTrigPosttriggerTime.configure(disabledforeground="#a3a3a3")
        self.spbTrigPosttriggerTime.configure(font="TkDefaultFont")
        self.spbTrigPosttriggerTime.configure(foreground="black")
        self.spbTrigPosttriggerTime.configure(highlightbackground="black")
        self.spbTrigPosttriggerTime.configure(highlightcolor="black")
        self.spbTrigPosttriggerTime.configure(insertbackground="black")
        self.spbTrigPosttriggerTime.configure(justify='right')
        self.spbTrigPosttriggerTime.configure(selectbackground="blue")
        self.spbTrigPosttriggerTime.configure(selectforeground="white")
        self.spbTrigPosttriggerTime.configure(textvariable=aqconfig_support.strTrigPostTriggerTime)
        set_modified = self.spbTrigPosttriggerTime.register(aqconfig_support.set_modified)
        self.spbTrigPosttriggerTime.configure(validatecommand=(set_modified))

        self.lblTrigPretriggerTimeUnit = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPretriggerTimeUnit.place(x=210, y=150, height=25, width=35)
        self.lblTrigPretriggerTimeUnit.configure(background="#d9d9d9")
        self.lblTrigPretriggerTimeUnit.configure(foreground="#000000")
        self.lblTrigPretriggerTimeUnit.configure(font="TkDefaultFont")
        self.lblTrigPretriggerTimeUnit.configure(relief="flat")
        self.lblTrigPretriggerTimeUnit.configure(anchor='w')
        self.lblTrigPretriggerTimeUnit.configure(justify='left')
        self.lblTrigPretriggerTimeUnit.configure(text=_('''[s]'''))

        self.lblTrigPosttriggerTimeUnit = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPosttriggerTimeUnit.place(x=210, y=180, height=25, width=35)
        self.lblTrigPosttriggerTimeUnit.configure(background="#d9d9d9")
        self.lblTrigPosttriggerTimeUnit.configure(foreground="#000000")
        self.lblTrigPosttriggerTimeUnit.configure(font="TkDefaultFont")
        self.lblTrigPosttriggerTimeUnit.configure(relief="flat")
        self.lblTrigPosttriggerTimeUnit.configure(anchor='w')
        self.lblTrigPosttriggerTimeUnit.configure(justify='left')
        self.lblTrigPosttriggerTimeUnit.configure(text=_('''[s]'''))

        self.lblDebugLevel = ttk.Label(self.nbMain_Debug)
        self.lblDebugLevel.place(x=30, y=30, height=25, width=100)
        self.lblDebugLevel.configure(background="#d9d9d9")
        self.lblDebugLevel.configure(foreground="#000000")
        self.lblDebugLevel.configure(font="TkDefaultFont")
        self.lblDebugLevel.configure(relief="flat")
        self.lblDebugLevel.configure(anchor='w')
        self.lblDebugLevel.configure(justify='left')
        self.lblDebugLevel.configure(text=_('''Level'''))
        self.tooltip_font = "TkDefaultFont"
        self.lblDebugLevel_tooltip = \
            ToolTip(self.lblDebugLevel, self.tooltip_font,
                    _('''level of debug messages - makes more or less verbose'''))

        self.lblDebugFilesToKeep = ttk.Label(self.nbMain_Debug)
        self.lblDebugFilesToKeep.place(x=30, y=60, height=25, width=100)
        self.lblDebugFilesToKeep.configure(background="#d9d9d9")
        self.lblDebugFilesToKeep.configure(foreground="#000000")
        self.lblDebugFilesToKeep.configure(font="TkDefaultFont")
        self.lblDebugFilesToKeep.configure(relief="flat")
        self.lblDebugFilesToKeep.configure(anchor='w')
        self.lblDebugFilesToKeep.configure(justify='left')
        self.lblDebugFilesToKeep.configure(text=_('''Files to keep:'''))
        self.tooltip_font = "TkDefaultFont"
        self.lblDebugFilesToKeep_tooltip = \
            ToolTip(self.lblDebugFilesToKeep, self.tooltip_font, _('''number of logfiles to keep'''))

        self.cboDebugLevel = ttk.Combobox(self.nbMain_Debug)
        self.cboDebugLevel.place(x=150, y=30, height=25, width=150)
        self.value_list = ['0-no logging', '1-INFO', '2-WARNING', '3-DEBUG', '4-ERROR', '5-CRITICAL', '6-EXCEPTION', ]
        self.cboDebugLevel.configure(values=self.value_list)
        self.cboDebugLevel.configure(textvariable=aqconfig_support.strDebugLevel)
        self.cboDebugLevel.configure(validate="all")
        set_modified = self.cboDebugLevel.register(aqconfig_support.set_modified)
        self.cboDebugLevel.configure(validatecommand=(set_modified))
        self.cboDebugLevel.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboDebugLevel_tooltip = \
            ToolTip(self.cboDebugLevel, self.tooltip_font,
                    _('''select the debug level, 0 is none, 1  is most verbose'''))

        self.spbDebugFilesToKeep = tk.Spinbox(self.nbMain_Debug, from_=1.0, to=10.0)
        self.spbDebugFilesToKeep.place(x=150, y=60, height=25, width=40)
        self.spbDebugFilesToKeep.configure(activebackground="#f9f9f9")
        self.spbDebugFilesToKeep.configure(background="white")
        self.spbDebugFilesToKeep.configure(buttonbackground="#d9d9d9")
        self.spbDebugFilesToKeep.configure(disabledforeground="#a3a3a3")
        self.spbDebugFilesToKeep.configure(font="TkDefaultFont")
        self.spbDebugFilesToKeep.configure(foreground="black")
        self.spbDebugFilesToKeep.configure(highlightbackground="black")
        self.spbDebugFilesToKeep.configure(highlightcolor="black")
        self.spbDebugFilesToKeep.configure(insertbackground="black")
        self.spbDebugFilesToKeep.configure(justify='right')
        self.spbDebugFilesToKeep.configure(selectbackground="blue")
        self.spbDebugFilesToKeep.configure(selectforeground="white")
        self.spbDebugFilesToKeep.configure(textvariable=aqconfig_support.strDebugFilesToKeep)
        set_modified = self.spbDebugFilesToKeep.register(aqconfig_support.set_modified)
        self.spbDebugFilesToKeep.configure(validatecommand=(set_modified))

        self.lfrValuesGetArea = ttk.Labelframe(self.nbMain_Values)
        self.lfrValuesGetArea.place(x=9, y=0, height=80, width=981)
        self.lfrValuesGetArea.configure(relief='sunken')
        self.lfrValuesGetArea.configure(text=_('''Area of value'''))
        self.lfrValuesGetArea.configure(borderwidth="1")
        self.lfrValuesGetArea.configure(relief="sunken")

        self.style.map('TRadiobutton', background=
        [('selected', _bgcolor), ('active', _ana2color)])
        self.rdoValuesData = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesData.place(x=110, y=20, width=70, height=25
                                 , bordermode='ignore')
        self.rdoValuesData.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesData.configure(value="D")
        self.rdoValuesData.configure(text=_('''Data'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesData_tooltip = \
            ToolTip(self.rdoValuesData, self.tooltip_font, _('''select for value from datablock'''))
        self.rdoValuesData.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesData_LeftClick(e))

        self.rdoValuesOutput = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesOutput.place(x=180, y=20, width=70, height=25
                                   , bordermode='ignore')
        self.rdoValuesOutput.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesOutput.configure(value="Q")
        self.rdoValuesOutput.configure(text=_('''Output'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesOutput_tooltip = \
            ToolTip(self.rdoValuesOutput, self.tooltip_font, _('''select for value from output area'''))
        self.rdoValuesOutput.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesOutput_LeftClick(e))

        self.rdoValuesInput = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesInput.place(x=250, y=20, width=70, height=25
                                  , bordermode='ignore')
        self.rdoValuesInput.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesInput.configure(value="I")
        self.rdoValuesInput.configure(text=_('''Input'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesInput_tooltip = \
            ToolTip(self.rdoValuesInput, self.tooltip_font, _('''select for value from input area'''))
        self.rdoValuesInput.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesInput_LeftClick(e))

        self.rdoValuesFlag = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesFlag.place(x=320, y=20, width=70, height=25
                                 , bordermode='ignore')
        self.rdoValuesFlag.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesFlag.configure(value="F")
        self.rdoValuesFlag.configure(text=_('''Flag'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesFlag_tooltip = \
            ToolTip(self.rdoValuesFlag, self.tooltip_font, _('''select for value from flag area'''))
        self.rdoValuesFlag.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesFlag_LeftClick(e))

        self.rdoValuesTimer = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesTimer.place(x=390, y=20, width=70, height=25
                                  , bordermode='ignore')
        self.rdoValuesTimer.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesTimer.configure(value="T")
        self.rdoValuesTimer.configure(text=_('''Timer'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesTimer_tooltip = \
            ToolTip(self.rdoValuesTimer, self.tooltip_font, _('''select for value from timer area'''))
        self.rdoValuesTimer.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesTimer_LeftClick(e))

        self.rdoValuesCounter = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesCounter.place(x=460, y=20, width=70, height=25
                                    , bordermode='ignore')
        self.rdoValuesCounter.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesCounter.configure(value="C")
        self.rdoValuesCounter.configure(text=_('''Counter'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesCounter_tooltip = \
            ToolTip(self.rdoValuesCounter, self.tooltip_font, _('''select for value from counter area'''))
        self.rdoValuesCounter.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesCounter_LeftClick(e))

        self.lblValuesDBNo = ttk.Label(self.lfrValuesGetArea)
        self.lblValuesDBNo.place(x=30, y=50, height=25, width=80
                                 , bordermode='ignore')
        self.lblValuesDBNo.configure(background="#d9d9d9")
        self.lblValuesDBNo.configure(foreground="#000000")
        self.lblValuesDBNo.configure(font="TkDefaultFont")
        self.lblValuesDBNo.configure(relief="flat")
        self.lblValuesDBNo.configure(anchor='w')
        self.lblValuesDBNo.configure(justify='left')
        self.lblValuesDBNo.configure(text=_('''Datablock no.:'''))

        self.spbValuesDBNo = tk.Spinbox(self.lfrValuesGetArea, from_=1.0, to=8192.0)
        self.spbValuesDBNo.place(x=110, y=50, height=25, width=50
                                 , bordermode='ignore')
        self.spbValuesDBNo.configure(activebackground="#f9f9f9")
        self.spbValuesDBNo.configure(background="white")
        self.spbValuesDBNo.configure(buttonbackground="#d9d9d9")
        self.spbValuesDBNo.configure(disabledforeground="#a3a3a3")
        self.spbValuesDBNo.configure(font="TkDefaultFont")
        self.spbValuesDBNo.configure(foreground="black")
        self.spbValuesDBNo.configure(highlightbackground="black")
        self.spbValuesDBNo.configure(highlightcolor="black")
        self.spbValuesDBNo.configure(insertbackground="black")
        self.spbValuesDBNo.configure(justify='right')
        self.spbValuesDBNo.configure(selectbackground="blue")
        self.spbValuesDBNo.configure(selectforeground="white")
        self.spbValuesDBNo.configure(textvariable=aqconfig_support.strValuesDBNo)

        self.lblValueRealAdress = ttk.Label(self.lfrValuesGetArea)
        self.lblValueRealAdress.place(x=180, y=50, height=25, width=100
                                      , bordermode='ignore')
        self.lblValueRealAdress.configure(background="#d9d9d9")
        self.lblValueRealAdress.configure(foreground="#000000")
        self.lblValueRealAdress.configure(font="TkDefaultFont")
        self.lblValueRealAdress.configure(relief="flat")
        self.lblValueRealAdress.configure(anchor='w')
        self.lblValueRealAdress.configure(justify='left')
        self.lblValueRealAdress.configure(takefocus="0")
        self.lblValueRealAdress.configure(text=_('''Address:'''))

        self.spbValuesAddress = tk.Spinbox(self.lfrValuesGetArea, from_=0.0, to=8192.0)
        self.spbValuesAddress.place(x=235, y=50, height=25, width=60
                                    , bordermode='ignore')
        self.spbValuesAddress.configure(activebackground="#f9f9f9")
        self.spbValuesAddress.configure(background="white")
        self.spbValuesAddress.configure(buttonbackground="#d9d9d9")
        self.spbValuesAddress.configure(disabledforeground="#a3a3a3")
        self.spbValuesAddress.configure(font="TkDefaultFont")
        self.spbValuesAddress.configure(foreground="black")
        self.spbValuesAddress.configure(highlightbackground="black")
        self.spbValuesAddress.configure(highlightcolor="black")
        self.spbValuesAddress.configure(insertbackground="black")
        self.spbValuesAddress.configure(justify='right')
        self.spbValuesAddress.configure(selectbackground="blue")
        self.spbValuesAddress.configure(selectforeground="white")
        self.spbValuesAddress.configure(takefocus="0")
        self.spbValuesAddress.configure(textvariable=aqconfig_support.strValuesAdress)

        self.nbValue = ttk.Notebook(self.nbMain_Values)
        self.nbValue.place(x=9, y=150, height=338, width=664)
        self.nbValue.configure(takefocus="")
        self.nbValue_Real = tk.Frame(self.nbValue)
        self.nbValue.add(self.nbValue_Real, padding=3)
        self.nbValue.tab(0, text="Value", compound="left", underline="-1", )
        self.nbValue_Real.configure(background="#d9d9d9")
        self.nbValue_Real.configure(highlightbackground="#d9d9d9")
        self.nbValue_Real.configure(highlightcolor="black")
        self.nbValue_Bool = tk.Frame(self.nbValue)
        self.nbValue.add(self.nbValue_Bool, padding=3)
        self.nbValue.tab(1, text="Bool", compound="left", underline="-1", )
        self.nbValue_Bool.configure(background="#d9d9d9")
        self.nbValue_Bool.configure(highlightbackground="#d9d9d9")
        self.nbValue_Bool.configure(highlightcolor="black")

        self.lblValueRealName = ttk.Label(self.nbValue_Real)
        self.lblValueRealName.place(x=30, y=30, height=25, width=100)
        self.lblValueRealName.configure(background="#d9d9d9")
        self.lblValueRealName.configure(foreground="#000000")
        self.lblValueRealName.configure(font="TkDefaultFont")
        self.lblValueRealName.configure(relief="flat")
        self.lblValueRealName.configure(anchor='w')
        self.lblValueRealName.configure(justify='left')
        self.lblValueRealName.configure(takefocus="0")
        self.lblValueRealName.configure(text=_('''Name:'''))

        self.lblValueRealGain = ttk.Label(self.nbValue_Real)
        self.lblValueRealGain.place(x=30, y=60, height=25, width=100)
        self.lblValueRealGain.configure(background="#d9d9d9")
        self.lblValueRealGain.configure(foreground="#000000")
        self.lblValueRealGain.configure(font="TkDefaultFont")
        self.lblValueRealGain.configure(relief="flat")
        self.lblValueRealGain.configure(anchor='w')
        self.lblValueRealGain.configure(justify='left')
        self.lblValueRealGain.configure(takefocus="0")
        self.lblValueRealGain.configure(text=_('''Gain:'''))

        self.lblValueRealOffset = ttk.Label(self.nbValue_Real)
        self.lblValueRealOffset.place(x=30, y=90, height=25, width=100)
        self.lblValueRealOffset.configure(background="#d9d9d9")
        self.lblValueRealOffset.configure(foreground="#000000")
        self.lblValueRealOffset.configure(font="TkDefaultFont")
        self.lblValueRealOffset.configure(relief="flat")
        self.lblValueRealOffset.configure(anchor='w')
        self.lblValueRealOffset.configure(justify='left')
        self.lblValueRealOffset.configure(takefocus="0")
        self.lblValueRealOffset.configure(text=_('''Offset:'''))

        self.lblValueRealUnit = ttk.Label(self.nbValue_Real)
        self.lblValueRealUnit.place(x=30, y=120, height=25, width=100)
        self.lblValueRealUnit.configure(background="#d9d9d9")
        self.lblValueRealUnit.configure(foreground="#000000")
        self.lblValueRealUnit.configure(font="TkDefaultFont")
        self.lblValueRealUnit.configure(relief="flat")
        self.lblValueRealUnit.configure(anchor='w')
        self.lblValueRealUnit.configure(justify='left')
        self.lblValueRealUnit.configure(takefocus="0")
        self.lblValueRealUnit.configure(text=_('''Unit:'''))

        self.tinValuesValuename = ttk.Entry(self.nbValue_Real)
        self.tinValuesValuename.place(x=150, y=30, height=25, width=250)
        self.tinValuesValuename.configure(textvariable=aqconfig_support.strValuesValueName)
        self.tinValuesValuename.configure(takefocus="")
        self.tinValuesValuename.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesValuename_tooltip = \
            ToolTip(self.tinValuesValuename, self.tooltip_font, _('''enter a name for the value '''))

        self.spbValuesGain = tk.Spinbox(self.nbValue_Real, from_=1.0, to=16000000.0)
        self.spbValuesGain.place(x=150, y=60, height=25, width=70)
        self.spbValuesGain.configure(activebackground="#f9f9f9")
        self.spbValuesGain.configure(background="white")
        self.spbValuesGain.configure(buttonbackground="#d9d9d9")
        self.spbValuesGain.configure(disabledforeground="#a3a3a3")
        self.spbValuesGain.configure(font="TkDefaultFont")
        self.spbValuesGain.configure(foreground="black")
        self.spbValuesGain.configure(highlightbackground="black")
        self.spbValuesGain.configure(highlightcolor="black")
        self.spbValuesGain.configure(insertbackground="black")
        self.spbValuesGain.configure(justify='right')
        self.spbValuesGain.configure(selectbackground="blue")
        self.spbValuesGain.configure(selectforeground="white")
        self.spbValuesGain.configure(takefocus="0")
        self.spbValuesGain.configure(textvariable=aqconfig_support.strValuesValueGain)

        self.spbValuesOffset = tk.Spinbox(self.nbValue_Real, from_=1.0, to=16000000.0)
        self.spbValuesOffset.place(x=150, y=90, height=25, width=70)
        self.spbValuesOffset.configure(activebackground="#f9f9f9")
        self.spbValuesOffset.configure(background="white")
        self.spbValuesOffset.configure(buttonbackground="#d9d9d9")
        self.spbValuesOffset.configure(disabledforeground="#a3a3a3")
        self.spbValuesOffset.configure(font="TkDefaultFont")
        self.spbValuesOffset.configure(foreground="black")
        self.spbValuesOffset.configure(highlightbackground="black")
        self.spbValuesOffset.configure(highlightcolor="black")
        self.spbValuesOffset.configure(insertbackground="black")
        self.spbValuesOffset.configure(justify='right')
        self.spbValuesOffset.configure(selectbackground="blue")
        self.spbValuesOffset.configure(selectforeground="white")
        self.spbValuesOffset.configure(takefocus="0")
        self.spbValuesOffset.configure(textvariable=aqconfig_support.strValuesValueOffset)

        self.tinValuesUnit = ttk.Entry(self.nbValue_Real)
        self.tinValuesUnit.place(x=150, y=120, height=25, width=80)
        self.tinValuesUnit.configure(textvariable=aqconfig_support.strValuesValueUnit)
        self.tinValuesUnit.configure(takefocus="")
        self.tinValuesUnit.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesUnit_tooltip = \
            ToolTip(self.tinValuesUnit, self.tooltip_font, _('''enter a unnit for the value, e.g. kg, m, N, A...'''))

        self.lblValuesBoolName = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolName.place(x=80, y=10, height=25, width=38)
        self.lblValuesBoolName.configure(activebackground="#f9f9f9")
        self.lblValuesBoolName.configure(activeforeground="black")
        self.lblValuesBoolName.configure(background="#d9d9d9")
        self.lblValuesBoolName.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolName.configure(foreground="#000000")
        self.lblValuesBoolName.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolName.configure(highlightcolor="black")
        self.lblValuesBoolName.configure(text=_('''Name'''))

        self.lblValuesBoolBit0 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit0.place(x=30, y=40, height=25, width=38)
        self.lblValuesBoolBit0.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit0.configure(activeforeground="black")
        self.lblValuesBoolBit0.configure(background="#d9d9d9")
        self.lblValuesBoolBit0.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit0.configure(foreground="#000000")
        self.lblValuesBoolBit0.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit0.configure(highlightcolor="black")
        self.lblValuesBoolBit0.configure(text=_('''Bit 0'''))

        self.lblValuesBoolBit1 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit1.place(x=30, y=70, height=25, width=38)
        self.lblValuesBoolBit1.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit1.configure(activeforeground="black")
        self.lblValuesBoolBit1.configure(background="#d9d9d9")
        self.lblValuesBoolBit1.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit1.configure(foreground="#000000")
        self.lblValuesBoolBit1.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit1.configure(highlightcolor="black")
        self.lblValuesBoolBit1.configure(text=_('''Bit 1'''))

        self.lblValuesBoolBit2 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit2.place(x=30, y=100, height=25, width=38)
        self.lblValuesBoolBit2.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit2.configure(activeforeground="black")
        self.lblValuesBoolBit2.configure(background="#d9d9d9")
        self.lblValuesBoolBit2.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit2.configure(foreground="#000000")
        self.lblValuesBoolBit2.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit2.configure(highlightcolor="black")
        self.lblValuesBoolBit2.configure(text=_('''Bit 2'''))

        self.lblValuesBoolBit3 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit3.place(x=30, y=130, height=25, width=38)
        self.lblValuesBoolBit3.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit3.configure(activeforeground="black")
        self.lblValuesBoolBit3.configure(background="#d9d9d9")
        self.lblValuesBoolBit3.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit3.configure(foreground="#000000")
        self.lblValuesBoolBit3.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit3.configure(highlightcolor="black")
        self.lblValuesBoolBit3.configure(text=_('''Bit 3'''))

        self.lblValuesBoolBit4 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit4.place(x=30, y=160, height=25, width=38)
        self.lblValuesBoolBit4.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit4.configure(activeforeground="black")
        self.lblValuesBoolBit4.configure(background="#d9d9d9")
        self.lblValuesBoolBit4.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit4.configure(foreground="#000000")
        self.lblValuesBoolBit4.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit4.configure(highlightcolor="black")
        self.lblValuesBoolBit4.configure(text=_('''Bit 4'''))

        self.lblValuesBoolBit5 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit5.place(x=30, y=190, height=25, width=38)
        self.lblValuesBoolBit5.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit5.configure(activeforeground="black")
        self.lblValuesBoolBit5.configure(background="#d9d9d9")
        self.lblValuesBoolBit5.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit5.configure(foreground="#000000")
        self.lblValuesBoolBit5.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit5.configure(highlightcolor="black")
        self.lblValuesBoolBit5.configure(text=_('''Bit 5'''))

        self.lblValuesBoolBit6 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit6.place(x=30, y=220, height=25, width=38)
        self.lblValuesBoolBit6.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit6.configure(activeforeground="black")
        self.lblValuesBoolBit6.configure(background="#d9d9d9")
        self.lblValuesBoolBit6.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit6.configure(foreground="#000000")
        self.lblValuesBoolBit6.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit6.configure(highlightcolor="black")
        self.lblValuesBoolBit6.configure(text=_('''Bit 6'''))

        self.lblValuesBoolBit7 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit7.place(x=30, y=250, height=25, width=38)
        self.lblValuesBoolBit7.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit7.configure(activeforeground="black")
        self.lblValuesBoolBit7.configure(background="#d9d9d9")
        self.lblValuesBoolBit7.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit7.configure(foreground="#000000")
        self.lblValuesBoolBit7.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit7.configure(highlightcolor="black")
        self.lblValuesBoolBit7.configure(text=_('''Bit 7'''))

        self.tinValuesBoolName0 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName0.place(x=80, y=40, height=25, width=300)
        self.tinValuesBoolName0.configure(textvariable=aqconfig_support.strValuesBoolName0)
        self.tinValuesBoolName0.configure(takefocus="")
        self.tinValuesBoolName0.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName0_tooltip = \
            ToolTip(self.tinValuesBoolName0, self.tooltip_font, _('''enter a name for the first bit'''))

        self.tinValuesBoolName1 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName1.place(x=80, y=70, height=25, width=300)
        self.tinValuesBoolName1.configure(textvariable=aqconfig_support.strValuesBoolName1)
        self.tinValuesBoolName1.configure(takefocus="")
        self.tinValuesBoolName1.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName1_tooltip = \
            ToolTip(self.tinValuesBoolName1, self.tooltip_font, _('''enter a name for the second bit'''))

        self.tinValuesBoolName2 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName2.place(x=80, y=100, height=25, width=300)
        self.tinValuesBoolName2.configure(textvariable=aqconfig_support.strValuesBoolName2)
        self.tinValuesBoolName2.configure(takefocus="")
        self.tinValuesBoolName2.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName2_tooltip = \
            ToolTip(self.tinValuesBoolName2, self.tooltip_font, _('''enter a name for the third bit'''))

        self.tinValuesBoolName3 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName3.place(x=80, y=130, height=25, width=300)
        self.tinValuesBoolName3.configure(textvariable=aqconfig_support.strValuesBoolName3)
        self.tinValuesBoolName3.configure(takefocus="")
        self.tinValuesBoolName3.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName3_tooltip = \
            ToolTip(self.tinValuesBoolName3, self.tooltip_font, _('''enter a name for the fourth bit'''))

        self.tinValuesBoolName4 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName4.place(x=80, y=160, height=25, width=300)
        self.tinValuesBoolName4.configure(textvariable=aqconfig_support.strValuesBoolName4)
        self.tinValuesBoolName4.configure(takefocus="")
        self.tinValuesBoolName4.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName4_tooltip = \
            ToolTip(self.tinValuesBoolName4, self.tooltip_font, _('''enter a name for the fifth bit'''))

        self.tinValuesBoolName5 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName5.place(x=80, y=190, height=25, width=300)
        self.tinValuesBoolName5.configure(textvariable=aqconfig_support.strValuesBoolName5)
        self.tinValuesBoolName5.configure(takefocus="")
        self.tinValuesBoolName5.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName5_tooltip = \
            ToolTip(self.tinValuesBoolName5, self.tooltip_font, _('''enter a name for the sixth bit'''))

        self.tinValuesBoolName6 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName6.place(x=80, y=220, height=25, width=300)
        self.tinValuesBoolName6.configure(textvariable=aqconfig_support.strValuesBoolName6)
        self.tinValuesBoolName6.configure(takefocus="")
        self.tinValuesBoolName6.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName6_tooltip = \
            ToolTip(self.tinValuesBoolName6, self.tooltip_font, _('''enter a name for the eigth bit'''))

        self.tinValuesBoolName7 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName7.place(x=80, y=250, height=25, width=300)
        self.tinValuesBoolName7.configure(textvariable=aqconfig_support.strValuesBoolName7)
        self.tinValuesBoolName7.configure(takefocus="")
        self.tinValuesBoolName7.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName7_tooltip = \
            ToolTip(self.tinValuesBoolName7, self.tooltip_font, _('''enter a name for the eigth bit'''))

        self.lblValuesBoolGain = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolGain.place(x=410, y=10, height=25, width=38)
        self.lblValuesBoolGain.configure(activebackground="#f9f9f9")
        self.lblValuesBoolGain.configure(activeforeground="black")
        self.lblValuesBoolGain.configure(background="#d9d9d9")
        self.lblValuesBoolGain.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolGain.configure(foreground="#000000")
        self.lblValuesBoolGain.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolGain.configure(highlightcolor="black")
        self.lblValuesBoolGain.configure(text=_('''Gain'''))

        self.lblValuesBoolOffset = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolOffset.place(x=490, y=10, height=25, width=38)
        self.lblValuesBoolOffset.configure(activebackground="#f9f9f9")
        self.lblValuesBoolOffset.configure(activeforeground="black")
        self.lblValuesBoolOffset.configure(background="#d9d9d9")
        self.lblValuesBoolOffset.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolOffset.configure(foreground="#000000")
        self.lblValuesBoolOffset.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolOffset.configure(highlightcolor="black")
        self.lblValuesBoolOffset.configure(text=_('''Offset'''))

        self.spbValuesBoolGain0 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain0.place(x=420, y=40, height=25, width=60)
        self.spbValuesBoolGain0.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain0.configure(background="white")
        self.spbValuesBoolGain0.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain0.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain0.configure(font="TkDefaultFont")
        self.spbValuesBoolGain0.configure(foreground="black")
        self.spbValuesBoolGain0.configure(highlightbackground="black")
        self.spbValuesBoolGain0.configure(highlightcolor="black")
        self.spbValuesBoolGain0.configure(insertbackground="black")
        self.spbValuesBoolGain0.configure(justify='right')
        self.spbValuesBoolGain0.configure(selectbackground="blue")
        self.spbValuesBoolGain0.configure(selectforeground="white")
        self.spbValuesBoolGain0.configure(takefocus="0")
        self.spbValuesBoolGain0.configure(textvariable=aqconfig_support.strValuesBoolGain0)
        self.spbValuesBoolGain0.configure(validate="focusout")

        self.spbValuesBoolGain1 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain1.place(x=420, y=70, height=25, width=60)
        self.spbValuesBoolGain1.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain1.configure(background="white")
        self.spbValuesBoolGain1.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain1.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain1.configure(font="TkDefaultFont")
        self.spbValuesBoolGain1.configure(foreground="black")
        self.spbValuesBoolGain1.configure(highlightbackground="black")
        self.spbValuesBoolGain1.configure(highlightcolor="black")
        self.spbValuesBoolGain1.configure(insertbackground="black")
        self.spbValuesBoolGain1.configure(justify='right')
        self.spbValuesBoolGain1.configure(selectbackground="blue")
        self.spbValuesBoolGain1.configure(selectforeground="white")
        self.spbValuesBoolGain1.configure(takefocus="0")
        self.spbValuesBoolGain1.configure(textvariable=aqconfig_support.strValuesBoolGain1)
        self.spbValuesBoolGain1.configure(validate="focusout")

        self.spbValuesBoolGain2 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain2.place(x=420, y=100, height=25, width=60)
        self.spbValuesBoolGain2.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain2.configure(background="white")
        self.spbValuesBoolGain2.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain2.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain2.configure(font="TkDefaultFont")
        self.spbValuesBoolGain2.configure(foreground="black")
        self.spbValuesBoolGain2.configure(highlightbackground="black")
        self.spbValuesBoolGain2.configure(highlightcolor="black")
        self.spbValuesBoolGain2.configure(insertbackground="black")
        self.spbValuesBoolGain2.configure(justify='right')
        self.spbValuesBoolGain2.configure(selectbackground="blue")
        self.spbValuesBoolGain2.configure(selectforeground="white")
        self.spbValuesBoolGain2.configure(takefocus="0")
        self.spbValuesBoolGain2.configure(textvariable=aqconfig_support.strValuesBoolGain2)
        self.spbValuesBoolGain2.configure(validate="focusout")

        self.spbValuesBoolGain3 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain3.place(x=420, y=130, height=25, width=60)
        self.spbValuesBoolGain3.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain3.configure(background="white")
        self.spbValuesBoolGain3.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain3.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain3.configure(font="TkDefaultFont")
        self.spbValuesBoolGain3.configure(foreground="black")
        self.spbValuesBoolGain3.configure(highlightbackground="black")
        self.spbValuesBoolGain3.configure(highlightcolor="black")
        self.spbValuesBoolGain3.configure(insertbackground="black")
        self.spbValuesBoolGain3.configure(justify='right')
        self.spbValuesBoolGain3.configure(selectbackground="blue")
        self.spbValuesBoolGain3.configure(selectforeground="white")
        self.spbValuesBoolGain3.configure(takefocus="0")
        self.spbValuesBoolGain3.configure(textvariable=aqconfig_support.strValuesBoolGain3)
        self.spbValuesBoolGain3.configure(validate="focusout")

        self.spbValuesBoolGain4 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain4.place(x=420, y=160, height=25, width=60)
        self.spbValuesBoolGain4.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain4.configure(background="white")
        self.spbValuesBoolGain4.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain4.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain4.configure(font="TkDefaultFont")
        self.spbValuesBoolGain4.configure(foreground="black")
        self.spbValuesBoolGain4.configure(highlightbackground="black")
        self.spbValuesBoolGain4.configure(highlightcolor="black")
        self.spbValuesBoolGain4.configure(insertbackground="black")
        self.spbValuesBoolGain4.configure(justify='right')
        self.spbValuesBoolGain4.configure(selectbackground="blue")
        self.spbValuesBoolGain4.configure(selectforeground="white")
        self.spbValuesBoolGain4.configure(takefocus="0")
        self.spbValuesBoolGain4.configure(textvariable=aqconfig_support.strValuesBoolGain4)
        self.spbValuesBoolGain4.configure(validate="focusout")

        self.spbValuesBoolGain5 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain5.place(x=420, y=190, height=25, width=60)
        self.spbValuesBoolGain5.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain5.configure(background="white")
        self.spbValuesBoolGain5.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain5.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain5.configure(font="TkDefaultFont")
        self.spbValuesBoolGain5.configure(foreground="black")
        self.spbValuesBoolGain5.configure(highlightbackground="black")
        self.spbValuesBoolGain5.configure(highlightcolor="black")
        self.spbValuesBoolGain5.configure(insertbackground="black")
        self.spbValuesBoolGain5.configure(justify='right')
        self.spbValuesBoolGain5.configure(selectbackground="blue")
        self.spbValuesBoolGain5.configure(selectforeground="white")
        self.spbValuesBoolGain5.configure(takefocus="0")
        self.spbValuesBoolGain5.configure(textvariable=aqconfig_support.strValuesBoolGain5)
        self.spbValuesBoolGain5.configure(validate="focusout")

        self.spbValuesBoolGain6 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain6.place(x=420, y=220, height=25, width=60)
        self.spbValuesBoolGain6.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain6.configure(background="white")
        self.spbValuesBoolGain6.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain6.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain6.configure(font="TkDefaultFont")
        self.spbValuesBoolGain6.configure(foreground="black")
        self.spbValuesBoolGain6.configure(highlightbackground="black")
        self.spbValuesBoolGain6.configure(highlightcolor="black")
        self.spbValuesBoolGain6.configure(insertbackground="black")
        self.spbValuesBoolGain6.configure(justify='right')
        self.spbValuesBoolGain6.configure(selectbackground="blue")
        self.spbValuesBoolGain6.configure(selectforeground="white")
        self.spbValuesBoolGain6.configure(takefocus="0")
        self.spbValuesBoolGain6.configure(textvariable=aqconfig_support.strValuesBoolGain6)
        self.spbValuesBoolGain6.configure(validate="focusout")

        self.spbValuesBoolGain7 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolGain7.place(x=420, y=250, height=25, width=60)
        self.spbValuesBoolGain7.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain7.configure(background="white")
        self.spbValuesBoolGain7.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain7.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain7.configure(font="TkDefaultFont")
        self.spbValuesBoolGain7.configure(foreground="black")
        self.spbValuesBoolGain7.configure(highlightbackground="black")
        self.spbValuesBoolGain7.configure(highlightcolor="black")
        self.spbValuesBoolGain7.configure(insertbackground="black")
        self.spbValuesBoolGain7.configure(justify='right')
        self.spbValuesBoolGain7.configure(selectbackground="blue")
        self.spbValuesBoolGain7.configure(selectforeground="white")
        self.spbValuesBoolGain7.configure(takefocus="0")
        self.spbValuesBoolGain7.configure(textvariable=aqconfig_support.strValuesBoolGain7)
        self.spbValuesBoolGain7.configure(validate="focusout")

        self.spbValuesBoolOffset0 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset0.place(x=490, y=40, height=25, width=62)
        self.spbValuesBoolOffset0.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset0.configure(background="white")
        self.spbValuesBoolOffset0.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset0.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset0.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset0.configure(foreground="black")
        self.spbValuesBoolOffset0.configure(highlightbackground="black")
        self.spbValuesBoolOffset0.configure(highlightcolor="black")
        self.spbValuesBoolOffset0.configure(insertbackground="black")
        self.spbValuesBoolOffset0.configure(justify='right')
        self.spbValuesBoolOffset0.configure(selectbackground="blue")
        self.spbValuesBoolOffset0.configure(selectforeground="white")
        self.spbValuesBoolOffset0.configure(takefocus="0")
        self.spbValuesBoolOffset0.configure(textvariable=aqconfig_support.strValuesBoolOffset0)
        self.spbValuesBoolOffset0.configure(validate="focusout")

        self.spbValuesBoolOffset1 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset1.place(x=490, y=70, height=25, width=62)
        self.spbValuesBoolOffset1.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset1.configure(background="white")
        self.spbValuesBoolOffset1.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset1.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset1.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset1.configure(foreground="black")
        self.spbValuesBoolOffset1.configure(highlightbackground="black")
        self.spbValuesBoolOffset1.configure(highlightcolor="black")
        self.spbValuesBoolOffset1.configure(insertbackground="black")
        self.spbValuesBoolOffset1.configure(justify='right')
        self.spbValuesBoolOffset1.configure(selectbackground="blue")
        self.spbValuesBoolOffset1.configure(selectforeground="white")
        self.spbValuesBoolOffset1.configure(takefocus="0")
        self.spbValuesBoolOffset1.configure(textvariable=aqconfig_support.strValuesBoolOffset1)
        self.spbValuesBoolOffset1.configure(validate="focusout")

        self.spbValuesBoolOffset2 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset2.place(x=490, y=100, height=25, width=62)
        self.spbValuesBoolOffset2.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset2.configure(background="white")
        self.spbValuesBoolOffset2.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset2.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset2.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset2.configure(foreground="black")
        self.spbValuesBoolOffset2.configure(highlightbackground="black")
        self.spbValuesBoolOffset2.configure(highlightcolor="black")
        self.spbValuesBoolOffset2.configure(insertbackground="black")
        self.spbValuesBoolOffset2.configure(justify='right')
        self.spbValuesBoolOffset2.configure(selectbackground="blue")
        self.spbValuesBoolOffset2.configure(selectforeground="white")
        self.spbValuesBoolOffset2.configure(takefocus="0")
        self.spbValuesBoolOffset2.configure(textvariable=aqconfig_support.strValuesBoolOffset2)
        self.spbValuesBoolOffset2.configure(validate="focusout")

        self.spbValuesBoolOffset3 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset3.place(x=490, y=130, height=25, width=62)
        self.spbValuesBoolOffset3.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset3.configure(background="white")
        self.spbValuesBoolOffset3.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset3.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset3.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset3.configure(foreground="black")
        self.spbValuesBoolOffset3.configure(highlightbackground="black")
        self.spbValuesBoolOffset3.configure(highlightcolor="black")
        self.spbValuesBoolOffset3.configure(insertbackground="black")
        self.spbValuesBoolOffset3.configure(justify='right')
        self.spbValuesBoolOffset3.configure(selectbackground="blue")
        self.spbValuesBoolOffset3.configure(selectforeground="white")
        self.spbValuesBoolOffset3.configure(takefocus="0")
        self.spbValuesBoolOffset3.configure(textvariable=aqconfig_support.strValuesBoolOffset3)
        self.spbValuesBoolOffset3.configure(validate="focusout")

        self.spbValuesBoolOffset4 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset4.place(x=490, y=160, height=25, width=62)
        self.spbValuesBoolOffset4.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset4.configure(background="white")
        self.spbValuesBoolOffset4.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset4.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset4.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset4.configure(foreground="black")
        self.spbValuesBoolOffset4.configure(highlightbackground="black")
        self.spbValuesBoolOffset4.configure(highlightcolor="black")
        self.spbValuesBoolOffset4.configure(insertbackground="black")
        self.spbValuesBoolOffset4.configure(justify='right')
        self.spbValuesBoolOffset4.configure(selectbackground="blue")
        self.spbValuesBoolOffset4.configure(selectforeground="white")
        self.spbValuesBoolOffset4.configure(takefocus="0")
        self.spbValuesBoolOffset4.configure(textvariable=aqconfig_support.strValuesBoolOffset4)
        self.spbValuesBoolOffset4.configure(validate="focusout")

        self.spbValuesBoolOffset5 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset5.place(x=490, y=190, height=25, width=62)
        self.spbValuesBoolOffset5.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset5.configure(background="white")
        self.spbValuesBoolOffset5.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset5.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset5.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset5.configure(foreground="black")
        self.spbValuesBoolOffset5.configure(highlightbackground="black")
        self.spbValuesBoolOffset5.configure(highlightcolor="black")
        self.spbValuesBoolOffset5.configure(insertbackground="black")
        self.spbValuesBoolOffset5.configure(justify='right')
        self.spbValuesBoolOffset5.configure(selectbackground="blue")
        self.spbValuesBoolOffset5.configure(selectforeground="white")
        self.spbValuesBoolOffset5.configure(takefocus="0")
        self.spbValuesBoolOffset5.configure(textvariable=aqconfig_support.strValuesBoolOffset5)
        self.spbValuesBoolOffset5.configure(validate="focusout")

        self.spbValuesBoolOffset6 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset6.place(x=490, y=220, height=25, width=62)
        self.spbValuesBoolOffset6.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset6.configure(background="white")
        self.spbValuesBoolOffset6.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset6.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset6.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset6.configure(foreground="black")
        self.spbValuesBoolOffset6.configure(highlightbackground="black")
        self.spbValuesBoolOffset6.configure(highlightcolor="black")
        self.spbValuesBoolOffset6.configure(insertbackground="black")
        self.spbValuesBoolOffset6.configure(justify='right')
        self.spbValuesBoolOffset6.configure(selectbackground="blue")
        self.spbValuesBoolOffset6.configure(selectforeground="white")
        self.spbValuesBoolOffset6.configure(takefocus="0")
        self.spbValuesBoolOffset6.configure(textvariable=aqconfig_support.strValuesBoolOffset6)
        self.spbValuesBoolOffset6.configure(validate="focusout")

        self.spbValuesBoolOffset7 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset7.place(x=490, y=250, height=25, width=62)
        self.spbValuesBoolOffset7.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset7.configure(background="white")
        self.spbValuesBoolOffset7.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset7.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset7.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset7.configure(foreground="black")
        self.spbValuesBoolOffset7.configure(highlightbackground="black")
        self.spbValuesBoolOffset7.configure(highlightcolor="black")
        self.spbValuesBoolOffset7.configure(insertbackground="black")
        self.spbValuesBoolOffset7.configure(justify='right')
        self.spbValuesBoolOffset7.configure(selectbackground="blue")
        self.spbValuesBoolOffset7.configure(selectforeground="white")
        self.spbValuesBoolOffset7.configure(takefocus="0")
        self.spbValuesBoolOffset7.configure(textvariable=aqconfig_support.strValuesBoolOffset7)
        self.spbValuesBoolOffset7.configure(validate="focusout")
        self.nbValue.bind('<<NotebookTabChanged>>', lambda e: aqconfig_support.nbValue_TabChanged(e))

        self.lfrValuesFormat = ttk.Labelframe(self.nbMain_Values)
        self.lfrValuesFormat.place(x=9, y=90, height=50, width=928)
        self.lfrValuesFormat.configure(relief='sunken')
        self.lfrValuesFormat.configure(text=_('''Format'''))
        self.lfrValuesFormat.configure(borderwidth="1")
        self.lfrValuesFormat.configure(relief="sunken")
        self.lfrValuesFormat.configure(takefocus="0")

        self.rdoValuesReal = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesReal.place(x=20, y=20, width=77, height=25
                                 , bordermode='ignore')
        self.rdoValuesReal.configure(variable=aqconfig_support.strRdoValuesFormat)
        self.rdoValuesReal.configure(value="F")
        self.rdoValuesReal.configure(takefocus="0")
        self.rdoValuesReal.configure(text=_('''Real 32 bit'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesReal_tooltip = \
            ToolTip(self.rdoValuesReal, self.tooltip_font, _('''select format 32bit REAL number'''))
        self.rdoValuesReal.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesReal_LeftClick(e))

        self.rdoValuesDint = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesDint.place(x=120, y=20, width=77, height=25
                                 , bordermode='ignore')
        self.rdoValuesDint.configure(variable=aqconfig_support.strRdoValuesFormat)
        self.rdoValuesDint.configure(value="D")
        self.rdoValuesDint.configure(takefocus="0")
        self.rdoValuesDint.configure(text=_('''Dint 32 bit'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesDint_tooltip = \
            ToolTip(self.rdoValuesDint, self.tooltip_font, _('''select format 32bit DINT number'''))
        self.rdoValuesDint.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesDint_LeftClick(e))

        self.rdoValuesInt = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesInt.place(x=220, y=20, width=77, height=25
                                , bordermode='ignore')
        self.rdoValuesInt.configure(variable=aqconfig_support.strRdoValuesFormat)
        self.rdoValuesInt.configure(value="W")
        self.rdoValuesInt.configure(takefocus="0")
        self.rdoValuesInt.configure(text=_('''Int 16 bit'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesInt_tooltip = \
            ToolTip(self.rdoValuesInt, self.tooltip_font, _('''select format 16bit INT number'''))
        self.rdoValuesInt.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesInt_LeftClick(e))

        self.rdoValuesByte = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesByte.place(x=320, y=20, width=77, height=25
                                 , bordermode='ignore')
        self.rdoValuesByte.configure(variable=aqconfig_support.strRdoValuesFormat)
        self.rdoValuesByte.configure(value="B")
        self.rdoValuesByte.configure(takefocus="0")
        self.rdoValuesByte.configure(text=_('''Int 8 bit'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesByte_tooltip = \
            ToolTip(self.rdoValuesByte, self.tooltip_font, _('''select format 8bit INT number'''))
        self.rdoValuesByte.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesByte_LeftClick(e))

        self.rdoValuesBool = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesBool.place(x=420, y=20, width=78, height=25
                                 , bordermode='ignore')
        self.rdoValuesBool.configure(variable=aqconfig_support.strRdoValuesFormat)
        self.rdoValuesBool.configure(value="X")
        self.rdoValuesBool.configure(takefocus="0")
        self.rdoValuesBool.configure(text=_('''Bool'''))
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesBool_tooltip = \
            ToolTip(self.rdoValuesBool, self.tooltip_font,
                    _('''select format BOOLEAN, will also switch to Bool tab!'''))
        self.rdoValuesBool.bind('<Button-1>', lambda e: aqconfig_support.rdoValuesBool_LeftClick(e))

        self.lfrValuesFunctions = ttk.Labelframe(self.nbMain_Values)
        self.lfrValuesFunctions.place(x=681, y=150, height=343, width=256)
        self.lfrValuesFunctions.configure(relief='sunken')
        self.lfrValuesFunctions.configure(text=_('''value functions'''))
        self.lfrValuesFunctions.configure(borderwidth="1")
        self.lfrValuesFunctions.configure(relief="sunken")

        self.btnValuesNew = ttk.Button(self.lfrValuesFunctions)
        self.btnValuesNew.place(x=10, y=40, height=25, width=76
                                , bordermode='ignore')
        self.btnValuesNew.configure(takefocus="")
        self.btnValuesNew.configure(text=_('''Clear'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesNew_tooltip = \
            ToolTip(self.btnValuesNew, self.tooltip_font, _('''clear all fields for a new value'''))
        self.btnValuesNew.bind('<Button-1>', lambda e: aqconfig_support.btnValuesNew_LeftClick(e))

        self.btnValuesEdit = ttk.Button(self.lfrValuesFunctions)
        self.btnValuesEdit.place(x=10, y=70, height=25, width=76
                                 , bordermode='ignore')
        self.btnValuesEdit.configure(takefocus="")
        self.btnValuesEdit.configure(text=_('''Edit'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesEdit_tooltip = \
            ToolTip(self.btnValuesEdit, self.tooltip_font, _('''jump to list and select value to edit'''))
        self.btnValuesEdit.bind('<Button-1>', lambda e: aqconfig_support.btnValuesEdit_LeftClick(e))

        self.btnValuesSave = ttk.Button(self.lfrValuesFunctions)
        self.btnValuesSave.place(x=10, y=100, height=25, width=76
                                 , bordermode='ignore')
        self.btnValuesSave.configure(takefocus="")
        self.btnValuesSave.configure(text=_('''Save'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesSave_tooltip = \
            ToolTip(self.btnValuesSave, self.tooltip_font, _('''save this value settings to the list'''))
        self.btnValuesSave.bind('<ButtonRelease-1>', lambda e: aqconfig_support.btnValuesSave_LeftRelease(e))

        self.btnValuesAdd = ttk.Button(self.lfrValuesFunctions)
        self.btnValuesAdd.place(x=10, y=130, height=25, width=76
                                , bordermode='ignore')
        self.btnValuesAdd.configure(takefocus="")
        self.btnValuesAdd.configure(text=_('''Add'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesAdd_tooltip = \
            ToolTip(self.btnValuesAdd, self.tooltip_font, _('''save this value settings to the list'''))
        self.btnValuesAdd.bind('<ButtonRelease-1>', lambda e: aqconfig_support.btnValuesAdd_LeftRelease(e))

        self.style.configure('Treeview', font="TkDefaultFont")
        self.stwList = ScrolledTreeView(self.nbMain_List)
        self.stwList.place(x=9, y=60, height=426, width=775)
        self.stwList.configure(columns="name variable gain offset unit")
        self.stwList.configure(selectmode='browse')
        self.stwList.configure(takefocus="0")
        # build_treeview_support starting.
        self.stwList.heading("#0", text="no.")
        self.stwList.heading("#0", anchor="center")
        self.stwList.column("#0", width="61")
        self.stwList.column("#0", minwidth="20")
        self.stwList.column("#0", stretch="1")
        self.stwList.column("#0", anchor="e")
        self.stwList.heading("name", text="name")
        self.stwList.heading("name", anchor="center")
        self.stwList.column("name", width="370")
        self.stwList.column("name", minwidth="50")
        self.stwList.column("name", stretch="1")
        self.stwList.column("name", anchor="w")
        self.stwList.heading("variable", text="variable")
        self.stwList.heading("variable", anchor="center")
        self.stwList.column("variable", width="80")
        self.stwList.column("variable", minwidth="20")
        self.stwList.column("variable", stretch="1")
        self.stwList.column("variable", anchor="w")
        self.stwList.heading("gain", text="gain")
        self.stwList.heading("gain", anchor="center")
        self.stwList.column("gain", width="82")
        self.stwList.column("gain", minwidth="20")
        self.stwList.column("gain", stretch="1")
        self.stwList.column("gain", anchor="w")
        self.stwList.heading("offset", text="offset")
        self.stwList.heading("offset", anchor="center")
        self.stwList.column("offset", width="83")
        self.stwList.column("offset", minwidth="20")
        self.stwList.column("offset", stretch="1")
        self.stwList.column("offset", anchor="w")
        self.stwList.heading("unit", text="unit")
        self.stwList.heading("unit", anchor="center")
        self.stwList.column("unit", width="80")
        self.stwList.column("unit", minwidth="20")
        self.stwList.column("unit", stretch="1")
        self.stwList.column("unit", anchor="w")
        self.stwList.bind('<Double-Button-1>', lambda e: aqconfig_support.stwList_LeftDblClick(e))

        self.TLabel1 = ttk.Label(self.nbMain_List)
        self.TLabel1.place(x=200, y=10, height=25, width=300)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text=_('''Double click  on line for  edit'''))

        self.btnListEdit = ttk.Button(self.nbMain_List)
        self.btnListEdit.place(x=10, y=10, height=25, width=76)
        self.btnListEdit.configure(takefocus="")
        self.btnListEdit.configure(text=_('''Edit'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnListEdit_tooltip = \
            ToolTip(self.btnListEdit, self.tooltip_font, _('''edit selected value'''))
        self.btnListEdit.bind('<Button-1>', lambda e: aqconfig_support.btnListEdit_LeftClick(e))

        self.btnListDelete = ttk.Button(self.nbMain_List)
        self.btnListDelete.place(x=100, y=10, height=25, width=76)
        self.btnListDelete.configure(takefocus="")
        self.btnListDelete.configure(text=_('''Delete'''))
        self.tooltip_font = "TkDefaultFont"
        self.btnListDelete_tooltip = \
            ToolTip(self.btnListDelete, self.tooltip_font, _('''delete the highlighted item from the list'''))
        self.btnListDelete.bind('<ButtonRelease-1>', lambda e: aqconfig_support.btnListDelete_LeftRelease(e))

        self.fraToolbarFile = tk.Frame(top)
        self.fraToolbarFile.place(x=1, y=1, height=51, width=330)
        self.fraToolbarFile.configure(relief='groove')
        self.fraToolbarFile.configure(borderwidth="2")
        self.fraToolbarFile.configure(relief="groove")
        self.fraToolbarFile.configure(background="#d9d9d9")
        self.fraToolbarFile.configure(highlightbackground="#d9d9d9")
        self.fraToolbarFile.configure(highlightcolor="black")

        self.btnFileNew = ttk.Button(self.fraToolbarFile)
        self.btnFileNew.place(x=2, y=2, height=44, width=44)
        self.btnFileNew.configure(command=aqconfig_support.OnMnuFileNew)
        self.btnFileNew.configure(takefocus="")
        self.btnFileNew.configure(text=_('''New'''))
        photo_location = os.path.join(prog_location, "./assets/document-new.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btnFileNew.configure(image=_img0)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileNew_tooltip = \
            ToolTip(self.btnFileNew, self.tooltip_font, _('''open a new file'''))

        self.btnFileOpen = ttk.Button(self.fraToolbarFile)
        self.btnFileOpen.place(x=48, y=2, height=44, width=44)
        self.btnFileOpen.configure(command=aqconfig_support.OnMnuFileOpen)
        self.btnFileOpen.configure(takefocus="")
        self.btnFileOpen.configure(textvariable=aqconfig_support.strMnuFileOpen)
        photo_location = os.path.join(prog_location, "./assets/document-open.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.btnFileOpen.configure(image=_img1)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileOpen_tooltip = \
            ToolTip(self.btnFileOpen, self.tooltip_font, _('''open an existing file'''))

        self.btnFileSave = ttk.Button(self.fraToolbarFile)
        self.btnFileSave.place(x=94, y=2, height=44, width=44)
        self.btnFileSave.configure(command=aqconfig_support.OnMnuFileSave)
        self.btnFileSave.configure(takefocus="")
        self.btnFileSave.configure(text=_('''Tbutton'''))
        photo_location = os.path.join(prog_location, "./assets/document-save.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.btnFileSave.configure(image=_img2)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSave_tooltip = \
            ToolTip(self.btnFileSave, self.tooltip_font, _('''save the current file'''))

        self.btnFileSaveAs = ttk.Button(self.fraToolbarFile)
        self.btnFileSaveAs.place(x=140, y=2, height=44, width=44)
        self.btnFileSaveAs.configure(command=aqconfig_support.OnMnuFileSaveAs)
        self.btnFileSaveAs.configure(takefocus="")
        self.btnFileSaveAs.configure(textvariable=aqconfig_support.strMnuFileSaveAs)
        photo_location = os.path.join(prog_location, "./assets/document-save-as.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.btnFileSaveAs.configure(image=_img3)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSaveAs_tooltip = \
            ToolTip(self.btnFileSaveAs, self.tooltip_font, _('''save the current file as ...'''))

        self.btnFileSettings = ttk.Button(self.fraToolbarFile)
        self.btnFileSettings.place(x=186, y=2, height=44, width=44)
        self.btnFileSettings.configure(command=aqconfig_support.OnMnuFileSettings)
        self.btnFileSettings.configure(takefocus="")
        self.btnFileSettings.configure(textvariable=aqconfig_support.strPathToExe)
        photo_location = os.path.join(prog_location, "./assets/configure.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.btnFileSettings.configure(image=_img4)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSettings_tooltip = \
            ToolTip(self.btnFileSettings, self.tooltip_font, _('''get the path to aqserver executable'''))

        self.btnFileQuit = ttk.Button(self.fraToolbarFile)
        self.btnFileQuit.place(x=278, y=2, height=44, width=44)
        self.btnFileQuit.configure(command=aqconfig_support.OnMnuFileExit)
        self.btnFileQuit.configure(takefocus="")
        self.btnFileQuit.configure(text=_('''Tbutton'''))
        photo_location = os.path.join(prog_location, "./assets/dialog-close.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.btnFileQuit.configure(image=_img5)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileQuit_tooltip = \
            ToolTip(self.btnFileQuit, self.tooltip_font, _('''exit this program'''))

        self.btnFileSettings_1 = ttk.Button(self.fraToolbarFile)
        self.btnFileSettings_1.place(x=232, y=2, height=44, width=44)
        self.btnFileSettings_1.configure(command=aqconfig_support.OnMnuSaveBat)
        self.btnFileSettings_1.configure(takefocus="")
        self.btnFileSettings_1.configure(textvariable=aqconfig_support.strPathToExe)
        photo_location = os.path.join(prog_location, "./assets/ms_dos_batch_file.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.btnFileSettings_1.configure(image=_img6)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSettings_1_tooltip = \
            ToolTip(self.btnFileSettings_1, self.tooltip_font, _('''make batch file to start Aqserver'''))

        self.fraToolbarHelp = tk.Frame(top)
        self.fraToolbarHelp.place(x=650, y=1, height=51, width=145)
        self.fraToolbarHelp.configure(relief='groove')
        self.fraToolbarHelp.configure(borderwidth="2")
        self.fraToolbarHelp.configure(relief="groove")
        self.fraToolbarHelp.configure(background="#d9d9d9")
        self.fraToolbarHelp.configure(highlightbackground="#d9d9d9")
        self.fraToolbarHelp.configure(highlightcolor="black")

        self.btnHelpHelp = ttk.Button(self.fraToolbarHelp)
        self.btnHelpHelp.place(x=2, y=2, height=44, width=44)
        self.btnHelpHelp.configure(command=aqconfig_support.OnMnuHelpContents)
        self.btnHelpHelp.configure(takefocus="")
        self.btnHelpHelp.configure(text=_('''Help contents'''))
        photo_location = os.path.join(prog_location, "./assets/help-contents.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.btnHelpHelp.configure(image=_img7)
        self.tooltip_font = "TkDefaultFont"
        self.btnHelpHelp_tooltip = \
            ToolTip(self.btnHelpHelp, self.tooltip_font, _('''open table of contents of program help'''))

        self.btnFileHelpContext = ttk.Button(self.fraToolbarHelp)
        self.btnFileHelpContext.place(x=48, y=2, height=44, width=44)
        self.btnFileHelpContext.configure(command=aqconfig_support.OnMnuHelpContext)
        self.btnFileHelpContext.configure(takefocus="")
        self.btnFileHelpContext.configure(text=_('''Contextual help'''))
        photo_location = os.path.join(prog_location, "./assets/help-contextual.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.btnFileHelpContext.configure(image=_img8)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileHelpContext_tooltip = \
            ToolTip(self.btnFileHelpContext, self.tooltip_font,
                    _('''switch to contextual help mode, then pick item for help'''))

        self.btnHelpAbout = ttk.Button(self.fraToolbarHelp)
        self.btnHelpAbout.place(x=96, y=2, height=44, width=44)
        self.btnHelpAbout.configure(command=aqconfig_support.OnMnuHelpAbout)
        self.btnHelpAbout.configure(takefocus="")
        self.btnHelpAbout.configure(text=_('''About'''))
        photo_location = os.path.join(prog_location, "./assets/help-about.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.btnHelpAbout.configure(image=_img9)
        self.tooltip_font = "TkDefaultFont"
        self.btnHelpAbout_tooltip = \
            ToolTip(self.btnHelpAbout, self.tooltip_font, _('''information about the program'''))

        self.lblStatus = ttk.Label(top)
        self.lblStatus.place(x=1, y=570, height=30, width=800)
        self.lblStatus.configure(background="#d9d9d9")
        self.lblStatus.configure(foreground="#000000")
        self.lblStatus.configure(font="TkDefaultFont")
        self.lblStatus.configure(borderwidth="1")
        self.lblStatus.configure(relief="sunken")
        self.lblStatus.configure(anchor='w')
        self.lblStatus.configure(justify='left')
        self.lblStatus.configure(textvariable=aqconfig_support.strStatus)
        self.tooltip_font = "TkDefaultFont"
        self.lblStatus_tooltip = \
            ToolTip(self.lblStatus, self.tooltip_font, _('''statusbar'''))


# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)


# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
