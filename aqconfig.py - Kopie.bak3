#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.5
#  in conjunction with Tcl version 8.6
#    Oct 26, 2020 01:36:52 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import aqconfig_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    aqconfig_support.set_Tk_var()
    top = frmMain (root)
    aqconfig_support.init(root, top)
    root.mainloop()

w = None
def create_frmMain(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_frmMain(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    aqconfig_support.set_Tk_var()
    top = frmMain (w)
    aqconfig_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_frmMain():
    global w
    w.destroy()
    w = None

class frmMain:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("960x600+736+16")
        top.minsize(800, 600)
        top.maxsize(1924, 1041)
        top.resizable(0,  0)
        top.title("Aqserver configuration  tool")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="File")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileNew,
                label="New")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileOpen,
                label="Open ...")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileSave,
                label="Save")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileSaveAs,
                label="Save as ...")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileSettings,
                label="Settings")
        self.sub_menu.add_command(
                command=aqconfig_support.OnMnuFileExit,
                label="Quit")
        self.sub_menu1 = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                label="Help")
        self.sub_menu1.add_command(
                command=aqconfig_support.OnMnuHelpContents,
                label="Contents")
        self.sub_menu1.add_command(
                command=aqconfig_support.OnMnuHelpContext,
                label="Contextual help")
        self.sub_menu1.add_command(
                command=aqconfig_support.OnMnuHelpAbout,
                label="About")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.nbMain = ttk.Notebook(top)
        self.nbMain.place(x=6, y=6, height=600, width=960)
        self.nbMain.configure(takefocus="")
        self.nbMain_Info = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Info, padding=3)
        self.nbMain.tab(0, text="Info",compound="left",underline="-1",)
        self.nbMain_Info.configure(background="#d9d9d9")
        self.nbMain_Info.configure(highlightbackground="#d9d9d9")
        self.nbMain_Info.configure(highlightcolor="black")
        self.nbMain_Com = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Com, padding=3)
        self.nbMain.tab(1, text="Communication", compound="left", underline="-1"
                ,)
        self.nbMain_Com.configure(background="#d9d9d9")
        self.nbMain_Com.configure(highlightbackground="#d9d9d9")
        self.nbMain_Com.configure(highlightcolor="black")
        self.nbMain_Misc = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Misc, padding=3)
        self.nbMain.tab(2, text="Miscellaneous", compound="left", underline="-1"
                ,)
        self.nbMain_Misc.configure(background="#d9d9d9")
        self.nbMain_Misc.configure(highlightbackground="#d9d9d9")
        self.nbMain_Misc.configure(highlightcolor="black")
        self.nbMain_Trigger = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Trigger, padding=3)
        self.nbMain.tab(3, text="Trigger",compound="left",underline="-1",)
        self.nbMain_Trigger.configure(background="#d9d9d9")
        self.nbMain_Trigger.configure(highlightbackground="#d9d9d9")
        self.nbMain_Trigger.configure(highlightcolor="black")
        self.nbMain_Debug = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Debug, padding=3)
        self.nbMain.tab(4, text="Debug",compound="left",underline="-1",)
        self.nbMain_Debug.configure(background="#d9d9d9")
        self.nbMain_Debug.configure(highlightbackground="#d9d9d9")
        self.nbMain_Debug.configure(highlightcolor="black")
        self.nbMain_Values = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_Values, padding=3)
        self.nbMain.tab(5, text="Values",compound="left",underline="-1",)
        self.nbMain_Values.configure(background="#d9d9d9")
        self.nbMain_Values.configure(highlightbackground="#d9d9d9")
        self.nbMain_Values.configure(highlightcolor="black")
        self.nbMain_List = tk.Frame(self.nbMain)
        self.nbMain.add(self.nbMain_List, padding=3)
        self.nbMain.tab(6, text="List",compound="left",underline="-1",)
        self.nbMain_List.configure(background="#d9d9d9")
        self.nbMain_List.configure(highlightbackground="#d9d9d9")
        self.nbMain_List.configure(highlightcolor="black")

        self.lblInfoCustomer = ttk.Label(self.nbMain_Info)
        self.lblInfoCustomer.place(x=30, y=30, height=20, width=59)
        self.lblInfoCustomer.configure(background="#d9d9d9")
        self.lblInfoCustomer.configure(foreground="#000000")
        self.lblInfoCustomer.configure(font="TkDefaultFont")
        self.lblInfoCustomer.configure(relief="flat")
        self.lblInfoCustomer.configure(anchor='w')
        self.lblInfoCustomer.configure(justify='left')
        self.lblInfoCustomer.configure(text='''{}''')

        self.lblInfoCreator = ttk.Label(self.nbMain_Info)
        self.lblInfoCreator.place(x=30, y=60, height=19, width=49)
        self.lblInfoCreator.configure(background="#d9d9d9")
        self.lblInfoCreator.configure(foreground="#000000")
        self.lblInfoCreator.configure(font="TkDefaultFont")
        self.lblInfoCreator.configure(relief="flat")
        self.lblInfoCreator.configure(anchor='w')
        self.lblInfoCreator.configure(justify='left')
        self.lblInfoCreator.configure(text='''Creator:''')

        self.lblInfoMachine = ttk.Label(self.nbMain_Info)
        self.lblInfoMachine.place(x=30, y=90, height=19, width=53)
        self.lblInfoMachine.configure(background="#d9d9d9")
        self.lblInfoMachine.configure(foreground="#000000")
        self.lblInfoMachine.configure(font="TkDefaultFont")
        self.lblInfoMachine.configure(relief="flat")
        self.lblInfoMachine.configure(anchor='w')
        self.lblInfoMachine.configure(justify='left')
        self.lblInfoMachine.configure(text='''Machine:''')

        self.lblInfoOrder = ttk.Label(self.nbMain_Info)
        self.lblInfoOrder.place(x=30, y=120, height=19, width=37)
        self.lblInfoOrder.configure(background="#d9d9d9")
        self.lblInfoOrder.configure(foreground="#000000")
        self.lblInfoOrder.configure(font="TkDefaultFont")
        self.lblInfoOrder.configure(relief="flat")
        self.lblInfoOrder.configure(anchor='w')
        self.lblInfoOrder.configure(justify='left')
        self.lblInfoOrder.configure(text='''Order:''')

        self.lblInfoRemarks = ttk.Label(self.nbMain_Info)
        self.lblInfoRemarks.place(x=30, y=150, height=19, width=52)
        self.lblInfoRemarks.configure(background="#d9d9d9")
        self.lblInfoRemarks.configure(foreground="#000000")
        self.lblInfoRemarks.configure(font="TkDefaultFont")
        self.lblInfoRemarks.configure(relief="flat")
        self.lblInfoRemarks.configure(anchor='w')
        self.lblInfoRemarks.configure(justify='left')
        self.lblInfoRemarks.configure(text='''Remarks:''')

        self.tinInfoCustomer = ttk.Entry(self.nbMain_Info)
        self.tinInfoCustomer.place(x=150, y=30, height=21, width=200)
        self.tinInfoCustomer.configure(textvariable=aqconfig_support.strInfoCustomer)
        self.tinInfoCustomer.configure(takefocus="")
        self.tinInfoCustomer.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoCustomer_tooltip = \
        ToolTip(self.tinInfoCustomer, self.tooltip_font, '''enter the name of the customer / mill''')

        self.tinInfoCreator = ttk.Entry(self.nbMain_Info)
        self.tinInfoCreator.place(x=150, y=60, height=21, width=200)
        self.tinInfoCreator.configure(textvariable=aqconfig_support.strInfoCreator)
        self.tinInfoCreator.configure(takefocus="")
        self.tinInfoCreator.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoCreator_tooltip = \
        ToolTip(self.tinInfoCreator, self.tooltip_font, '''enter your name''')

        self.tinInfoMachine = ttk.Entry(self.nbMain_Info)
        self.tinInfoMachine.place(x=150, y=90, height=21, width=200)
        self.tinInfoMachine.configure(textvariable=aqconfig_support.strInfoMachine)
        self.tinInfoMachine.configure(takefocus="")
        self.tinInfoMachine.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoMachine_tooltip = \
        ToolTip(self.tinInfoMachine, self.tooltip_font, '''enter the type of machine''')

        self.tinInfoOrder = ttk.Entry(self.nbMain_Info)
        self.tinInfoOrder.place(x=150, y=120, height=21, width=200)
        self.tinInfoOrder.configure(textvariable=aqconfig_support.strInfoOrder)
        self.tinInfoOrder.configure(takefocus="")
        self.tinInfoOrder.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinInfoOrder_tooltip = \
        ToolTip(self.tinInfoOrder, self.tooltip_font, '''enter your order number''')

        self.txtInfoRemarks = tk.Text(self.nbMain_Info)
        self.txtInfoRemarks.place(x=150, y=150, height=80, width=400)
        self.txtInfoRemarks.configure(background="white")
        self.txtInfoRemarks.configure(font="TkTextFont")
        self.txtInfoRemarks.configure(foreground="black")
        self.txtInfoRemarks.configure(highlightbackground="#d9d9d9")
        self.txtInfoRemarks.configure(highlightcolor="black")
        self.txtInfoRemarks.configure(insertbackground="black")
        self.txtInfoRemarks.configure(selectbackground="blue")
        self.txtInfoRemarks.configure(selectforeground="white")
        self.txtInfoRemarks.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtInfoRemarks_tooltip = \
        ToolTip(self.txtInfoRemarks, self.tooltip_font, '''enter some description''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.chkComDemo = ttk.Checkbutton(self.nbMain_Com)
        self.chkComDemo.place(x=150, y=30, width=60, height=21)
        self.chkComDemo.configure(variable=aqconfig_support.boolComDemo)
        self.chkComDemo.configure(takefocus="")
        self.chkComDemo.configure(text='''Demo''')
        self.tooltip_font = "TkDefaultFont"
        self.chkComDemo_tooltip = \
        ToolTip(self.chkComDemo, self.tooltip_font, '''run communication in demo''')

        self.lblComIp = tk.Label(self.nbMain_Com)
        self.lblComIp.place(x=30, y=60, height=21, width=59)
        self.lblComIp.configure(activebackground="#f9f9f9")
        self.lblComIp.configure(activeforeground="black")
        self.lblComIp.configure(background="#d9d9d9")
        self.lblComIp.configure(disabledforeground="#a3a3a3")
        self.lblComIp.configure(foreground="#000000")
        self.lblComIp.configure(highlightbackground="#d9d9d9")
        self.lblComIp.configure(highlightcolor="black")
        self.lblComIp.configure(text='''IP address:''')

        self.lblComRack = tk.Label(self.nbMain_Com)
        self.lblComRack.place(x=30, y=90, height=21, width=60)
        self.lblComRack.configure(activebackground="#f9f9f9")
        self.lblComRack.configure(activeforeground="black")
        self.lblComRack.configure(background="#d9d9d9")
        self.lblComRack.configure(disabledforeground="#a3a3a3")
        self.lblComRack.configure(foreground="#000000")
        self.lblComRack.configure(highlightbackground="#d9d9d9")
        self.lblComRack.configure(highlightcolor="black")
        self.lblComRack.configure(text='''Rack no.:''')

        self.lblComSlot = tk.Label(self.nbMain_Com)
        self.lblComSlot.place(x=30, y=120, height=21, width=60)
        self.lblComSlot.configure(activebackground="#f9f9f9")
        self.lblComSlot.configure(activeforeground="black")
        self.lblComSlot.configure(background="#d9d9d9")
        self.lblComSlot.configure(disabledforeground="#a3a3a3")
        self.lblComSlot.configure(foreground="#000000")
        self.lblComSlot.configure(highlightbackground="#d9d9d9")
        self.lblComSlot.configure(highlightcolor="black")
        self.lblComSlot.configure(text='''Slot no.:''')

        self.spbComIp1 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp1.place(x=150, y=60, height=19, width=50)
        self.spbComIp1.configure(activebackground="#f9f9f9")
        self.spbComIp1.configure(background="white")
        self.spbComIp1.configure(buttonbackground="#d9d9d9")
        self.spbComIp1.configure(disabledforeground="#a3a3a3")
        self.spbComIp1.configure(font="TkDefaultFont")
        self.spbComIp1.configure(foreground="black")
        self.spbComIp1.configure(highlightbackground="black")
        self.spbComIp1.configure(highlightcolor="black")
        self.spbComIp1.configure(insertbackground="black")
        self.spbComIp1.configure(selectbackground="blue")
        self.spbComIp1.configure(selectforeground="white")
        self.spbComIp1.configure(textvariable=aqconfig_support.strComIp1)

        self.lblComIpDot1 = tk.Label(self.nbMain_Com)
        self.lblComIpDot1.place(x=205, y=60, height=21, width=5)
        self.lblComIpDot1.configure(activebackground="#f9f9f9")
        self.lblComIpDot1.configure(activeforeground="black")
        self.lblComIpDot1.configure(background="#d9d9d9")
        self.lblComIpDot1.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot1.configure(foreground="#000000")
        self.lblComIpDot1.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot1.configure(highlightcolor="black")
        self.lblComIpDot1.configure(text='''.''')

        self.spbComIp2 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp2.place(x=220, y=60, height=19, width=50)
        self.spbComIp2.configure(activebackground="#f9f9f9")
        self.spbComIp2.configure(background="white")
        self.spbComIp2.configure(buttonbackground="#d9d9d9")
        self.spbComIp2.configure(disabledforeground="#a3a3a3")
        self.spbComIp2.configure(font="TkDefaultFont")
        self.spbComIp2.configure(foreground="black")
        self.spbComIp2.configure(highlightbackground="black")
        self.spbComIp2.configure(highlightcolor="black")
        self.spbComIp2.configure(insertbackground="black")
        self.spbComIp2.configure(selectbackground="blue")
        self.spbComIp2.configure(selectforeground="white")
        self.spbComIp2.configure(textvariable=aqconfig_support.strComIp2)

        self.lblComIpDot2 = tk.Label(self.nbMain_Com)
        self.lblComIpDot2.place(x=270, y=60, height=21, width=5)
        self.lblComIpDot2.configure(activebackground="#f9f9f9")
        self.lblComIpDot2.configure(activeforeground="black")
        self.lblComIpDot2.configure(background="#d9d9d9")
        self.lblComIpDot2.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot2.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot2.configure(foreground="#000000")
        self.lblComIpDot2.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot2.configure(highlightcolor="black")
        self.lblComIpDot2.configure(text='''.''')

        self.spbComIp3 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp3.place(x=280, y=60, height=19, width=50)
        self.spbComIp3.configure(activebackground="#f9f9f9")
        self.spbComIp3.configure(background="white")
        self.spbComIp3.configure(buttonbackground="#d9d9d9")
        self.spbComIp3.configure(disabledforeground="#a3a3a3")
        self.spbComIp3.configure(font="TkDefaultFont")
        self.spbComIp3.configure(foreground="black")
        self.spbComIp3.configure(highlightbackground="black")
        self.spbComIp3.configure(highlightcolor="black")
        self.spbComIp3.configure(insertbackground="black")
        self.spbComIp3.configure(selectbackground="blue")
        self.spbComIp3.configure(selectforeground="white")
        self.spbComIp3.configure(textvariable=aqconfig_support.strComIp3)

        self.lblComIpDot3 = tk.Label(self.nbMain_Com)
        self.lblComIpDot3.place(x=335, y=60, height=21, width=5)
        self.lblComIpDot3.configure(activebackground="#f9f9f9")
        self.lblComIpDot3.configure(activeforeground="black")
        self.lblComIpDot3.configure(background="#d9d9d9")
        self.lblComIpDot3.configure(disabledforeground="#a3a3a3")
        self.lblComIpDot3.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.lblComIpDot3.configure(foreground="#000000")
        self.lblComIpDot3.configure(highlightbackground="#d9d9d9")
        self.lblComIpDot3.configure(highlightcolor="black")
        self.lblComIpDot3.configure(text='''.''')

        self.spbComIp4 = tk.Spinbox(self.nbMain_Com, from_=0.0, to=255.0)
        self.spbComIp4.place(x=345, y=60, height=19, width=50)
        self.spbComIp4.configure(activebackground="#f9f9f9")
        self.spbComIp4.configure(background="white")
        self.spbComIp4.configure(buttonbackground="#d9d9d9")
        self.spbComIp4.configure(disabledforeground="#a3a3a3")
        self.spbComIp4.configure(font="TkDefaultFont")
        self.spbComIp4.configure(foreground="black")
        self.spbComIp4.configure(highlightbackground="black")
        self.spbComIp4.configure(highlightcolor="black")
        self.spbComIp4.configure(insertbackground="black")
        self.spbComIp4.configure(selectbackground="blue")
        self.spbComIp4.configure(selectforeground="white")
        self.spbComIp4.configure(textvariable=aqconfig_support.strComIp4)

        self.btnComPing = ttk.Button(self.nbMain_Com)
        self.btnComPing.place(x=400, y=55, height=30, width=76)
        self.btnComPing.configure(takefocus="")
        self.btnComPing.configure(text='''Ping!''')
        self.tooltip_font = "TkDefaultFont"
        self.btnComPing_tooltip = \
        ToolTip(self.btnComPing, self.tooltip_font, '''verify the entered IP address with a ping, result in the box''')
        self.btnComPing.bind('<Button-1>',lambda e:aqconfig_support.xxx(e))

        self.spbComRack = tk.Spinbox(self.nbMain_Com, from_=0.0, to=10.0)
        self.spbComRack.place(x=150, y=90, height=19, width=50)
        self.spbComRack.configure(activebackground="#f9f9f9")
        self.spbComRack.configure(background="white")
        self.spbComRack.configure(buttonbackground="#d9d9d9")
        self.spbComRack.configure(disabledforeground="#a3a3a3")
        self.spbComRack.configure(font="TkDefaultFont")
        self.spbComRack.configure(foreground="black")
        self.spbComRack.configure(highlightbackground="black")
        self.spbComRack.configure(highlightcolor="black")
        self.spbComRack.configure(insertbackground="black")
        self.spbComRack.configure(selectbackground="blue")
        self.spbComRack.configure(selectforeground="white")
        self.spbComRack.configure(textvariable=aqconfig_support.strComRack)

        self.spbComSlot = tk.Spinbox(self.nbMain_Com, from_=0.0, to=18.0)
        self.spbComSlot.place(x=150, y=120, height=19, width=51)
        self.spbComSlot.configure(activebackground="#f9f9f9")
        self.spbComSlot.configure(background="white")
        self.spbComSlot.configure(buttonbackground="#d9d9d9")
        self.spbComSlot.configure(disabledforeground="#a3a3a3")
        self.spbComSlot.configure(font="TkDefaultFont")
        self.spbComSlot.configure(foreground="black")
        self.spbComSlot.configure(highlightbackground="black")
        self.spbComSlot.configure(highlightcolor="black")
        self.spbComSlot.configure(insertbackground="black")
        self.spbComSlot.configure(selectbackground="blue")
        self.spbComSlot.configure(selectforeground="white")
        self.spbComSlot.configure(textvariable=aqconfig_support.strComSlot)

        self.btnComTest = ttk.Button(self.nbMain_Com)
        self.btnComTest.place(x=30, y=150, height=30, width=76)
        self.btnComTest.configure(takefocus="")
        self.btnComTest.configure(text='''Test''')
        self.tooltip_font = "TkDefaultFont"
        self.btnComTest_tooltip = \
        ToolTip(self.btnComTest, self.tooltip_font, '''test your setting, result in the box''')
        self.btnComTest.bind('<Button-1>',lambda e:aqconfig_support.xxx(e))

        self.txtComTest = tk.Text(self.nbMain_Com)
        self.txtComTest.place(x=150, y=150, height=80, width=401)
        self.txtComTest.configure(background="#d9d9d9")
        self.txtComTest.configure(font="TkTextFont")
        self.txtComTest.configure(foreground="black")
        self.txtComTest.configure(highlightbackground="#d9d9d9")
        self.txtComTest.configure(highlightcolor="black")
        self.txtComTest.configure(insertbackground="black")
        self.txtComTest.configure(selectbackground="blue")
        self.txtComTest.configure(selectforeground="white")
        self.txtComTest.configure(state='disabled')
        self.txtComTest.configure(wrap="word")

        self.lblComPingResult = ttk.Label(self.nbMain_Com)
        self.lblComPingResult.place(x=500, y=60, height=19, width=100)
        self.lblComPingResult.configure(background="#d9d9d9")
        self.lblComPingResult.configure(foreground="#000000")
        self.lblComPingResult.configure(font="TkDefaultFont")
        self.lblComPingResult.configure(relief="sunken")
        self.lblComPingResult.configure(anchor='w')
        self.lblComPingResult.configure(justify='left')

        self.lblMiscDatafile = ttk.Label(self.nbMain_Misc)
        self.lblMiscDatafile.place(x=30, y=30, height=19, width=100)
        self.lblMiscDatafile.configure(background="#d9d9d9")
        self.lblMiscDatafile.configure(foreground="#000000")
        self.lblMiscDatafile.configure(font="TkDefaultFont")
        self.lblMiscDatafile.configure(relief="flat")
        self.lblMiscDatafile.configure(anchor='w')
        self.lblMiscDatafile.configure(justify='left')
        self.lblMiscDatafile.configure(text='''Datafile prefix:''')
        self.tooltip_font = "TkDefaultFont"
        self.lblMiscDatafile_tooltip = \
        ToolTip(self.lblMiscDatafile, self.tooltip_font, '''enter name of the datafile without extension''')

        self.lblMiscPath = ttk.Label(self.nbMain_Misc)
        self.lblMiscPath.place(x=30, y=60, height=19, width=101)
        self.lblMiscPath.configure(background="#d9d9d9")
        self.lblMiscPath.configure(foreground="#000000")
        self.lblMiscPath.configure(font="TkDefaultFont")
        self.lblMiscPath.configure(relief="flat")
        self.lblMiscPath.configure(anchor='w')
        self.lblMiscPath.configure(justify='left')
        self.lblMiscPath.configure(text='''Storage path:''')
        self.tooltip_font = "TkDefaultFont"
        self.lblMiscPath_tooltip = \
        ToolTip(self.lblMiscPath, self.tooltip_font, '''enter name of the datafile without extension''')

        self.lblMiscScantime = ttk.Label(self.nbMain_Misc)
        self.lblMiscScantime.place(x=30, y=120, height=19, width=61)
        self.lblMiscScantime.configure(background="#d9d9d9")
        self.lblMiscScantime.configure(foreground="#000000")
        self.lblMiscScantime.configure(font="TkDefaultFont")
        self.lblMiscScantime.configure(relief="flat")
        self.lblMiscScantime.configure(anchor='w')
        self.lblMiscScantime.configure(justify='left')
        self.lblMiscScantime.configure(text='''Scantime:''')

        self.tinMiscDatafile = ttk.Entry(self.nbMain_Misc)
        self.tinMiscDatafile.place(x=150, y=30, height=21, width=200)
        self.tinMiscDatafile.configure(textvariable=aqconfig_support.strMiscDatafile)
        self.tinMiscDatafile.configure(takefocus="")
        self.tinMiscDatafile.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinMiscDatafile_tooltip = \
        ToolTip(self.tinMiscDatafile, self.tooltip_font, '''enter the name of the datafile, without extension''')

        self.tinMiscStoragePath = ttk.Entry(self.nbMain_Misc)
        self.tinMiscStoragePath.place(x=150, y=60, height=21, width=300)
        self.tinMiscStoragePath.configure(textvariable=aqconfig_support.StrMiscStoragePath)
        self.tinMiscStoragePath.configure(takefocus="")
        self.tinMiscStoragePath.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinMiscStoragePath_tooltip = \
        ToolTip(self.tinMiscStoragePath, self.tooltip_font, '''enter the name of the storage path for archived files''')

        self.btnMiscStoragePath = ttk.Button(self.nbMain_Misc)
        self.btnMiscStoragePath.place(x=460, y=55, height=30, width=30)
        self.btnMiscStoragePath.configure(command=aqconfig_support.OnBtnMiscStoragePath)
        self.btnMiscStoragePath.configure(takefocus="")
        self.btnMiscStoragePath.configure(text='''...''')

        self.chkMiscStoragePath = ttk.Checkbutton(self.nbMain_Misc)
        self.chkMiscStoragePath.place(x=150, y=90, width=200, height=21)
        self.chkMiscStoragePath.configure(variable=aqconfig_support.boolMiscStoragePath)
        self.chkMiscStoragePath.configure(takefocus="")
        self.chkMiscStoragePath.configure(text='''use yyyy/mm/dd directory structure''')
        self.tooltip_font = "TkDefaultFont"
        self.chkMiscStoragePath_tooltip = \
        ToolTip(self.chkMiscStoragePath, self.tooltip_font, '''file are store in a directory structure, per day''')

        self.spbMiscScantime = tk.Spinbox(self.nbMain_Misc, from_=0.0, to=1000.0)
        self.spbMiscScantime.place(x=150, y=120, height=20, width=60)
        self.spbMiscScantime.configure(activebackground="#f9f9f9")
        self.spbMiscScantime.configure(background="white")
        self.spbMiscScantime.configure(buttonbackground="#d9d9d9")
        self.spbMiscScantime.configure(disabledforeground="#a3a3a3")
        self.spbMiscScantime.configure(font="TkDefaultFont")
        self.spbMiscScantime.configure(foreground="black")
        self.spbMiscScantime.configure(highlightbackground="black")
        self.spbMiscScantime.configure(highlightcolor="black")
        self.spbMiscScantime.configure(increment="10.0")
        self.spbMiscScantime.configure(insertbackground="black")
        self.spbMiscScantime.configure(selectbackground="blue")
        self.spbMiscScantime.configure(selectforeground="white")
        self.spbMiscScantime.configure(textvariable=aqconfig_support.strMiscScantime)

        self.lblMiscScantimeUnit = ttk.Label(self.nbMain_Misc)
        self.lblMiscScantimeUnit.place(x=220, y=120, height=19, width=35)
        self.lblMiscScantimeUnit.configure(background="#d9d9d9")
        self.lblMiscScantimeUnit.configure(foreground="#000000")
        self.lblMiscScantimeUnit.configure(font="TkDefaultFont")
        self.lblMiscScantimeUnit.configure(relief="flat")
        self.lblMiscScantimeUnit.configure(anchor='w')
        self.lblMiscScantimeUnit.configure(justify='left')
        self.lblMiscScantimeUnit.configure(text='''[ms]''')

        self.chkTrigUseTrigger = ttk.Checkbutton(self.nbMain_Trigger)
        self.chkTrigUseTrigger.place(x=150, y=30, width=100, height=21)
        self.chkTrigUseTrigger.configure(variable=aqconfig_support.strTrigUseTrigger)
        self.chkTrigUseTrigger.configure(takefocus="")
        self.chkTrigUseTrigger.configure(text='''use trigger''')
        self.tooltip_font = "TkDefaultFont"
        self.chkTrigUseTrigger_tooltip = \
        ToolTip(self.chkTrigUseTrigger, self.tooltip_font, '''use a trigger to start a new file''')

        self.lblTrigValue = ttk.Label(self.nbMain_Trigger)
        self.lblTrigValue.place(x=30, y=60, height=19, width=70)
        self.lblTrigValue.configure(background="#d9d9d9")
        self.lblTrigValue.configure(foreground="#000000")
        self.lblTrigValue.configure(font="TkDefaultFont")
        self.lblTrigValue.configure(relief="flat")
        self.lblTrigValue.configure(anchor='w')
        self.lblTrigValue.configure(justify='left')
        self.lblTrigValue.configure(text='''Use value:''')

        self.lblTrigCondition = ttk.Label(self.nbMain_Trigger)
        self.lblTrigCondition.place(x=30, y=90, height=19, width=80)
        self.lblTrigCondition.configure(background="#d9d9d9")
        self.lblTrigCondition.configure(foreground="#000000")
        self.lblTrigCondition.configure(font="TkDefaultFont")
        self.lblTrigCondition.configure(relief="flat")
        self.lblTrigCondition.configure(anchor='w')
        self.lblTrigCondition.configure(justify='left')
        self.lblTrigCondition.configure(text='''Condition:''')

        self.lblTrigCompare = ttk.Label(self.nbMain_Trigger)
        self.lblTrigCompare.place(x=30, y=120, height=19, width=90)
        self.lblTrigCompare.configure(background="#d9d9d9")
        self.lblTrigCompare.configure(foreground="#000000")
        self.lblTrigCompare.configure(font="TkDefaultFont")
        self.lblTrigCompare.configure(relief="flat")
        self.lblTrigCompare.configure(anchor='w')
        self.lblTrigCompare.configure(justify='left')
        self.lblTrigCompare.configure(text='''Compare with:''')

        self.lblTrigPretriggerTime = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPretriggerTime.place(x=30, y=150, height=20, width=101)
        self.lblTrigPretriggerTime.configure(background="#d9d9d9")
        self.lblTrigPretriggerTime.configure(foreground="#000000")
        self.lblTrigPretriggerTime.configure(font="TkDefaultFont")
        self.lblTrigPretriggerTime.configure(relief="flat")
        self.lblTrigPretriggerTime.configure(anchor='w')
        self.lblTrigPretriggerTime.configure(justify='left')
        self.lblTrigPretriggerTime.configure(text='''Pretrigger time:''')

        self.lblTrigPosttriggerTime = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPosttriggerTime.place(x=30, y=180, height=19, width=100)
        self.lblTrigPosttriggerTime.configure(background="#d9d9d9")
        self.lblTrigPosttriggerTime.configure(foreground="#000000")
        self.lblTrigPosttriggerTime.configure(font="TkDefaultFont")
        self.lblTrigPosttriggerTime.configure(relief="flat")
        self.lblTrigPosttriggerTime.configure(anchor='w')
        self.lblTrigPosttriggerTime.configure(justify='left')
        self.lblTrigPosttriggerTime.configure(text='''Posttrigger time:''')

        self.cboTrigValue = ttk.Combobox(self.nbMain_Trigger)
        self.cboTrigValue.place(x=150, y=60, height=21, width=200)
        self.cboTrigValue.configure(textvariable=aqconfig_support.strTrigValue)
        self.cboTrigValue.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboTrigValue_tooltip = \
        ToolTip(self.cboTrigValue, self.tooltip_font, '''select value for trigger''')

        self.cboTrigCondition = ttk.Combobox(self.nbMain_Trigger)
        self.cboTrigCondition.place(x=150, y=90, height=20, width=51)
        self.value_list = ['>','>=','=','<=','<',]
        self.cboTrigCondition.configure(values=self.value_list)
        self.cboTrigCondition.configure(textvariable=aqconfig_support.strTrigCondition)
        self.cboTrigCondition.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboTrigCondition_tooltip = \
        ToolTip(self.cboTrigCondition, self.tooltip_font, '''select the comparison operation''')

        self.tinTrigCompare = ttk.Entry(self.nbMain_Trigger)
        self.tinTrigCompare.place(x=150, y=120, height=21, width=101)
        self.tinTrigCompare.configure(justify='right')
        self.tinTrigCompare.configure(takefocus="")
        self.tinTrigCompare.configure(cursor="ibeam")

        self.spbTrigPretriggerTime = tk.Spinbox(self.nbMain_Trigger, from_=1.0, to=100.0)
        self.spbTrigPretriggerTime.place(x=150, y=150, height=20, width=51)
        self.spbTrigPretriggerTime.configure(activebackground="#f9f9f9")
        self.spbTrigPretriggerTime.configure(background="white")
        self.spbTrigPretriggerTime.configure(buttonbackground="#d9d9d9")
        self.spbTrigPretriggerTime.configure(disabledforeground="#a3a3a3")
        self.spbTrigPretriggerTime.configure(font="TkDefaultFont")
        self.spbTrigPretriggerTime.configure(foreground="black")
        self.spbTrigPretriggerTime.configure(highlightbackground="black")
        self.spbTrigPretriggerTime.configure(highlightcolor="black")
        self.spbTrigPretriggerTime.configure(insertbackground="black")
        self.spbTrigPretriggerTime.configure(selectbackground="blue")
        self.spbTrigPretriggerTime.configure(selectforeground="white")
        self.spbTrigPretriggerTime.configure(textvariable=aqconfig_support.strTrigPreTriggerTime)

        self.spbTrigPosttriggerTime = tk.Spinbox(self.nbMain_Trigger, from_=1.0, to=100.0)
        self.spbTrigPosttriggerTime.place(x=150, y=180, height=20, width=51)
        self.spbTrigPosttriggerTime.configure(activebackground="#f9f9f9")
        self.spbTrigPosttriggerTime.configure(background="white")
        self.spbTrigPosttriggerTime.configure(buttonbackground="#d9d9d9")
        self.spbTrigPosttriggerTime.configure(disabledforeground="#a3a3a3")
        self.spbTrigPosttriggerTime.configure(font="TkDefaultFont")
        self.spbTrigPosttriggerTime.configure(foreground="black")
        self.spbTrigPosttriggerTime.configure(highlightbackground="black")
        self.spbTrigPosttriggerTime.configure(highlightcolor="black")
        self.spbTrigPosttriggerTime.configure(insertbackground="black")
        self.spbTrigPosttriggerTime.configure(selectbackground="blue")
        self.spbTrigPosttriggerTime.configure(selectforeground="white")
        self.spbTrigPosttriggerTime.configure(textvariable=aqconfig_support.strTrigPostTriggerTime)

        self.lblTrigPretriggerTimeUnit = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPretriggerTimeUnit.place(x=210, y=150, height=19, width=35)
        self.lblTrigPretriggerTimeUnit.configure(background="#d9d9d9")
        self.lblTrigPretriggerTimeUnit.configure(foreground="#000000")
        self.lblTrigPretriggerTimeUnit.configure(font="TkDefaultFont")
        self.lblTrigPretriggerTimeUnit.configure(relief="flat")
        self.lblTrigPretriggerTimeUnit.configure(anchor='w')
        self.lblTrigPretriggerTimeUnit.configure(justify='left')
        self.lblTrigPretriggerTimeUnit.configure(text='''[s]''')

        self.lblTrigPosttriggerTimeUnit = ttk.Label(self.nbMain_Trigger)
        self.lblTrigPosttriggerTimeUnit.place(x=210, y=180, height=19, width=35)
        self.lblTrigPosttriggerTimeUnit.configure(background="#d9d9d9")
        self.lblTrigPosttriggerTimeUnit.configure(foreground="#000000")
        self.lblTrigPosttriggerTimeUnit.configure(font="TkDefaultFont")
        self.lblTrigPosttriggerTimeUnit.configure(relief="flat")
        self.lblTrigPosttriggerTimeUnit.configure(anchor='w')
        self.lblTrigPosttriggerTimeUnit.configure(justify='left')
        self.lblTrigPosttriggerTimeUnit.configure(text='''[s]''')

        self.lblDebugLevel = ttk.Label(self.nbMain_Debug)
        self.lblDebugLevel.place(x=30, y=30, height=19, width=100)
        self.lblDebugLevel.configure(background="#d9d9d9")
        self.lblDebugLevel.configure(foreground="#000000")
        self.lblDebugLevel.configure(font="TkDefaultFont")
        self.lblDebugLevel.configure(relief="flat")
        self.lblDebugLevel.configure(anchor='w')
        self.lblDebugLevel.configure(justify='left')
        self.lblDebugLevel.configure(text='''Level''')
        self.tooltip_font = "TkDefaultFont"
        self.lblDebugLevel_tooltip = \
        ToolTip(self.lblDebugLevel, self.tooltip_font, '''level of debug messages - makes more or less verbose''')

        self.lblDebugFilesToKeep = ttk.Label(self.nbMain_Debug)
        self.lblDebugFilesToKeep.place(x=30, y=60, height=20, width=101)
        self.lblDebugFilesToKeep.configure(background="#d9d9d9")
        self.lblDebugFilesToKeep.configure(foreground="#000000")
        self.lblDebugFilesToKeep.configure(font="TkDefaultFont")
        self.lblDebugFilesToKeep.configure(relief="flat")
        self.lblDebugFilesToKeep.configure(anchor='w')
        self.lblDebugFilesToKeep.configure(justify='left')
        self.lblDebugFilesToKeep.configure(text='''Files to keep:''')
        self.tooltip_font = "TkDefaultFont"
        self.lblDebugFilesToKeep_tooltip = \
        ToolTip(self.lblDebugFilesToKeep, self.tooltip_font, '''number of logfiles to keep''')

        self.cboDebugLevel = ttk.Combobox(self.nbMain_Debug)
        self.cboDebugLevel.place(x=150, y=30, height=21, width=151)
        self.value_list = ['0-no logging','1-INFO','2-WARNING','3-DEBUG','4-ERROR','5-CRITICAL','6-EXCEPTION',]
        self.cboDebugLevel.configure(values=self.value_list)
        self.cboDebugLevel.configure(textvariable=aqconfig_support.strDebugLevel)
        self.cboDebugLevel.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboDebugLevel_tooltip = \
        ToolTip(self.cboDebugLevel, self.tooltip_font, '''select the debug level, 0 is none, 1  is most verbose''')

        self.spbDebugFilesToKeep = tk.Spinbox(self.nbMain_Debug, from_=1.0, to=10.0)
        self.spbDebugFilesToKeep.place(x=150, y=60, height=19, width=40)
        self.spbDebugFilesToKeep.configure(activebackground="#f9f9f9")
        self.spbDebugFilesToKeep.configure(background="white")
        self.spbDebugFilesToKeep.configure(buttonbackground="#d9d9d9")
        self.spbDebugFilesToKeep.configure(disabledforeground="#a3a3a3")
        self.spbDebugFilesToKeep.configure(font="TkDefaultFont")
        self.spbDebugFilesToKeep.configure(foreground="black")
        self.spbDebugFilesToKeep.configure(highlightbackground="black")
        self.spbDebugFilesToKeep.configure(highlightcolor="black")
        self.spbDebugFilesToKeep.configure(insertbackground="black")
        self.spbDebugFilesToKeep.configure(selectbackground="blue")
        self.spbDebugFilesToKeep.configure(selectforeground="white")
        self.spbDebugFilesToKeep.configure(textvariable=aqconfig_support.strDebugFilesToKeep)

        self.lfrValuesGetArea = ttk.Labelframe(self.nbMain_Values)
        self.lfrValuesGetArea.place(x=0, y=0, height=80, width=956)
        self.lfrValuesGetArea.configure(relief='sunken')
        self.lfrValuesGetArea.configure(text='''Area of value''')
        self.lfrValuesGetArea.configure(borderwidth="1")
        self.lfrValuesGetArea.configure(relief="sunken")

        self.style.map('TRadiobutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.rdoValuesData = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesData.place(x=110, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesData.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesData.configure(value="D")
        self.rdoValuesData.configure(text='''Data''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesData_tooltip = \
        ToolTip(self.rdoValuesData, self.tooltip_font, '''select for value from datablock''')
        self.rdoValuesData.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesData_LeftClick(e))

        self.rdoValuesOutput = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesOutput.place(x=180, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesOutput.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesOutput.configure(value="Q")
        self.rdoValuesOutput.configure(text='''Output''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesOutput_tooltip = \
        ToolTip(self.rdoValuesOutput, self.tooltip_font, '''select for value from output area''')
        self.rdoValuesOutput.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesOutput_LeftClick(e))

        self.rdoValuesInput = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesInput.place(x=250, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesInput.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesInput.configure(value="I")
        self.rdoValuesInput.configure(text='''Input''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesInput_tooltip = \
        ToolTip(self.rdoValuesInput, self.tooltip_font, '''select for value from input area''')
        self.rdoValuesInput.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesInput_LeftClick(e))

        self.rdoValuesFlag = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesFlag.place(x=320, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesFlag.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesFlag.configure(value="F")
        self.rdoValuesFlag.configure(text='''Flag''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesFlag_tooltip = \
        ToolTip(self.rdoValuesFlag, self.tooltip_font, '''select for value from flag area''')
        self.rdoValuesFlag.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesFlag_LeftClick(e))

        self.rdoValuesTimer = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesTimer.place(x=390, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesTimer.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesTimer.configure(value="T")
        self.rdoValuesTimer.configure(text='''Timer''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesTimer_tooltip = \
        ToolTip(self.rdoValuesTimer, self.tooltip_font, '''select for value from timer area''')
        self.rdoValuesTimer.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesTimer_LeftClicl(e))

        self.rdoValuesCounter = ttk.Radiobutton(self.lfrValuesGetArea)
        self.rdoValuesCounter.place(x=460, y=20, width=70, height=21
                , bordermode='ignore')
        self.rdoValuesCounter.configure(variable=aqconfig_support.strRdoValues)
        self.rdoValuesCounter.configure(value="C")
        self.rdoValuesCounter.configure(text='''Counter''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesCounter_tooltip = \
        ToolTip(self.rdoValuesCounter, self.tooltip_font, '''select for value from counter area''')
        self.rdoValuesCounter.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesCounter_LeftClick(e))

        self.lblValuesDBNo = ttk.Label(self.lfrValuesGetArea)
        self.lblValuesDBNo.place(x=30, y=50, height=19, width=80
                , bordermode='ignore')
        self.lblValuesDBNo.configure(background="#d9d9d9")
        self.lblValuesDBNo.configure(foreground="#000000")
        self.lblValuesDBNo.configure(font="TkDefaultFont")
        self.lblValuesDBNo.configure(relief="flat")
        self.lblValuesDBNo.configure(anchor='w')
        self.lblValuesDBNo.configure(justify='left')
        self.lblValuesDBNo.configure(text='''Datablock no.:''')

        self.spbValuesDBNo = tk.Spinbox(self.lfrValuesGetArea, from_=1.0, to=8192.0)
        self.spbValuesDBNo.place(x=110, y=50, height=20, width=50
                , bordermode='ignore')
        self.spbValuesDBNo.configure(activebackground="#f9f9f9")
        self.spbValuesDBNo.configure(background="white")
        self.spbValuesDBNo.configure(buttonbackground="#d9d9d9")
        self.spbValuesDBNo.configure(disabledforeground="#a3a3a3")
        self.spbValuesDBNo.configure(font="TkDefaultFont")
        self.spbValuesDBNo.configure(foreground="black")
        self.spbValuesDBNo.configure(highlightbackground="black")
        self.spbValuesDBNo.configure(highlightcolor="black")
        self.spbValuesDBNo.configure(insertbackground="black")
        self.spbValuesDBNo.configure(selectbackground="blue")
        self.spbValuesDBNo.configure(selectforeground="white")
        self.spbValuesDBNo.configure(textvariable=aqconfig_support.strValuesDBNo)

        self.nbValue = ttk.Notebook(self.nbMain_Values)
        self.nbValue.place(x=6, y=100, height=380, width=931)
        self.nbValue.configure(takefocus="")
        self.nbValue_Real = tk.Frame(self.nbValue)
        self.nbValue.add(self.nbValue_Real, padding=3)
        self.nbValue.tab(0, text="Value",compound="left",underline="-1",)
        self.nbValue_Real.configure(background="#d9d9d9")
        self.nbValue_Real.configure(highlightbackground="#d9d9d9")
        self.nbValue_Real.configure(highlightcolor="black")
        self.nbValue_Bool = tk.Frame(self.nbValue)
        self.nbValue.add(self.nbValue_Bool, padding=3)
        self.nbValue.tab(1, text="Bool",compound="left",underline="-1",)
        self.nbValue_Bool.configure(background="#d9d9d9")
        self.nbValue_Bool.configure(highlightbackground="#d9d9d9")
        self.nbValue_Bool.configure(highlightcolor="black")

        self.lblValueRealAdress = ttk.Label(self.nbValue_Real)
        self.lblValueRealAdress.place(x=30, y=110, height=20, width=100)
        self.lblValueRealAdress.configure(background="#d9d9d9")
        self.lblValueRealAdress.configure(foreground="#000000")
        self.lblValueRealAdress.configure(font="TkDefaultFont")
        self.lblValueRealAdress.configure(relief="flat")
        self.lblValueRealAdress.configure(anchor='w')
        self.lblValueRealAdress.configure(justify='left')
        self.lblValueRealAdress.configure(takefocus="0")
        self.lblValueRealAdress.configure(text='''Address:''')

        self.lblValueRealName = ttk.Label(self.nbValue_Real)
        self.lblValueRealName.place(x=30, y=80, height=20, width=100)
        self.lblValueRealName.configure(background="#d9d9d9")
        self.lblValueRealName.configure(foreground="#000000")
        self.lblValueRealName.configure(font="TkDefaultFont")
        self.lblValueRealName.configure(relief="flat")
        self.lblValueRealName.configure(anchor='w')
        self.lblValueRealName.configure(justify='left')
        self.lblValueRealName.configure(takefocus="0")
        self.lblValueRealName.configure(text='''Name:''')

        self.lblValueRealGain = ttk.Label(self.nbValue_Real)
        self.lblValueRealGain.place(x=30, y=140, height=20, width=100)
        self.lblValueRealGain.configure(background="#d9d9d9")
        self.lblValueRealGain.configure(foreground="#000000")
        self.lblValueRealGain.configure(font="TkDefaultFont")
        self.lblValueRealGain.configure(relief="flat")
        self.lblValueRealGain.configure(anchor='w')
        self.lblValueRealGain.configure(justify='left')
        self.lblValueRealGain.configure(takefocus="0")
        self.lblValueRealGain.configure(text='''Gain:''')

        self.lblValueRealOffset = ttk.Label(self.nbValue_Real)
        self.lblValueRealOffset.place(x=30, y=170, height=20, width=100)
        self.lblValueRealOffset.configure(background="#d9d9d9")
        self.lblValueRealOffset.configure(foreground="#000000")
        self.lblValueRealOffset.configure(font="TkDefaultFont")
        self.lblValueRealOffset.configure(relief="flat")
        self.lblValueRealOffset.configure(anchor='w')
        self.lblValueRealOffset.configure(justify='left')
        self.lblValueRealOffset.configure(takefocus="0")
        self.lblValueRealOffset.configure(text='''Offset:''')

        self.lblValueRealUnit = ttk.Label(self.nbValue_Real)
        self.lblValueRealUnit.place(x=30, y=200, height=20, width=100)
        self.lblValueRealUnit.configure(background="#d9d9d9")
        self.lblValueRealUnit.configure(foreground="#000000")
        self.lblValueRealUnit.configure(font="TkDefaultFont")
        self.lblValueRealUnit.configure(relief="flat")
        self.lblValueRealUnit.configure(anchor='w')
        self.lblValueRealUnit.configure(justify='left')
        self.lblValueRealUnit.configure(takefocus="0")
        self.lblValueRealUnit.configure(text='''Unit:''')

        self.lfrValuesFormat = ttk.Labelframe(self.nbValue_Real)
        self.lfrValuesFormat.place(x=10, y=0, height=50, width=927)
        self.lfrValuesFormat.configure(relief='sunken')
        self.lfrValuesFormat.configure(text='''Format''')
        self.lfrValuesFormat.configure(borderwidth="1")
        self.lfrValuesFormat.configure(relief="sunken")
        self.lfrValuesFormat.configure(takefocus="0")

        self.rdoValuesReal = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesReal.place(x=20, y=20, width=77, height=21
                , bordermode='ignore')
        self.rdoValuesReal.configure(variable=aqconfig_support.strRdoValuesValue)
        self.rdoValuesReal.configure(value="F")
        self.rdoValuesReal.configure(takefocus="0")
        self.rdoValuesReal.configure(text='''Real 32 bit''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesReal_tooltip = \
        ToolTip(self.rdoValuesReal, self.tooltip_font, '''select format 32bit REAL number''')

        self.rdoValuesDint = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesDint.place(x=120, y=20, width=77, height=21
                , bordermode='ignore')
        self.rdoValuesDint.configure(variable=aqconfig_support.strRdoValuesValue)
        self.rdoValuesDint.configure(value="D")
        self.rdoValuesDint.configure(takefocus="0")
        self.rdoValuesDint.configure(text='''Dint 32 bit''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesDint_tooltip = \
        ToolTip(self.rdoValuesDint, self.tooltip_font, '''select format 32bit DINT number''')

        self.rdoValuesInt = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesInt.place(x=220, y=20, width=77, height=21
                , bordermode='ignore')
        self.rdoValuesInt.configure(variable=aqconfig_support.strRdoValuesValue)
        self.rdoValuesInt.configure(value="W")
        self.rdoValuesInt.configure(takefocus="0")
        self.rdoValuesInt.configure(text='''Int 16 bit''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesInt_tooltip = \
        ToolTip(self.rdoValuesInt, self.tooltip_font, '''select format 16bit INT number''')

        self.rdoValuesByte = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesByte.place(x=320, y=20, width=77, height=21
                , bordermode='ignore')
        self.rdoValuesByte.configure(variable=aqconfig_support.strRdoValuesValue)
        self.rdoValuesByte.configure(value="B")
        self.rdoValuesByte.configure(takefocus="0")
        self.rdoValuesByte.configure(text='''Int 8 bit''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesByte_tooltip = \
        ToolTip(self.rdoValuesByte, self.tooltip_font, '''select format 8bit INT number''')

        self.rdoValuesBool = ttk.Radiobutton(self.lfrValuesFormat)
        self.rdoValuesBool.place(x=420, y=20, width=78, height=21
                , bordermode='ignore')
        self.rdoValuesBool.configure(variable=aqconfig_support.strRdoValuesValue)
        self.rdoValuesBool.configure(value="X")
        self.rdoValuesBool.configure(takefocus="0")
        self.rdoValuesBool.configure(text='''Bool''')
        self.tooltip_font = "TkDefaultFont"
        self.rdoValuesBool_tooltip = \
        ToolTip(self.rdoValuesBool, self.tooltip_font, '''select format BOOLEAN, will also switch to Bool tab!''')
        self.rdoValuesBool.bind('<Button-1>',lambda e:aqconfig_support.rdoValuesBool_LeftClick(e))

        self.tinValuesValuename = ttk.Entry(self.nbValue_Real)
        self.tinValuesValuename.place(x=150, y=80, height=21, width=250)
        self.tinValuesValuename.configure(textvariable=aqconfig_support.strValuesValueName)
        self.tinValuesValuename.configure(takefocus="")
        self.tinValuesValuename.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesValuename_tooltip = \
        ToolTip(self.tinValuesValuename, self.tooltip_font, '''enter a name for the value ''')

        self.spbValuesAddress = tk.Spinbox(self.nbValue_Real, from_=0.0, to=8192.0)
        self.spbValuesAddress.place(x=150, y=110, height=19, width=60)
        self.spbValuesAddress.configure(activebackground="#f9f9f9")
        self.spbValuesAddress.configure(background="white")
        self.spbValuesAddress.configure(buttonbackground="#d9d9d9")
        self.spbValuesAddress.configure(disabledforeground="#a3a3a3")
        self.spbValuesAddress.configure(font="TkDefaultFont")
        self.spbValuesAddress.configure(foreground="black")
        self.spbValuesAddress.configure(highlightbackground="black")
        self.spbValuesAddress.configure(highlightcolor="black")
        self.spbValuesAddress.configure(insertbackground="black")
        self.spbValuesAddress.configure(selectbackground="blue")
        self.spbValuesAddress.configure(selectforeground="white")
        self.spbValuesAddress.configure(takefocus="0")
        self.spbValuesAddress.configure(textvariable=aqconfig_support.spinbox)

        self.spbValuesGain = tk.Spinbox(self.nbValue_Real, from_=1.0, to=16000000.0)
        self.spbValuesGain.place(x=150, y=140, height=20, width=70)
        self.spbValuesGain.configure(activebackground="#f9f9f9")
        self.spbValuesGain.configure(background="white")
        self.spbValuesGain.configure(buttonbackground="#d9d9d9")
        self.spbValuesGain.configure(disabledforeground="#a3a3a3")
        self.spbValuesGain.configure(font="TkDefaultFont")
        self.spbValuesGain.configure(foreground="black")
        self.spbValuesGain.configure(highlightbackground="black")
        self.spbValuesGain.configure(highlightcolor="black")
        self.spbValuesGain.configure(insertbackground="black")
        self.spbValuesGain.configure(selectbackground="blue")
        self.spbValuesGain.configure(selectforeground="white")
        self.spbValuesGain.configure(takefocus="0")
        self.spbValuesGain.configure(textvariable=aqconfig_support.spinbox)

        self.spbValuesOffset = tk.Spinbox(self.nbValue_Real, from_=1.0, to=16000000.0)
        self.spbValuesOffset.place(x=150, y=170, height=20, width=70)
        self.spbValuesOffset.configure(activebackground="#f9f9f9")
        self.spbValuesOffset.configure(background="white")
        self.spbValuesOffset.configure(buttonbackground="#d9d9d9")
        self.spbValuesOffset.configure(disabledforeground="#a3a3a3")
        self.spbValuesOffset.configure(font="TkDefaultFont")
        self.spbValuesOffset.configure(foreground="black")
        self.spbValuesOffset.configure(highlightbackground="black")
        self.spbValuesOffset.configure(highlightcolor="black")
        self.spbValuesOffset.configure(insertbackground="black")
        self.spbValuesOffset.configure(selectbackground="blue")
        self.spbValuesOffset.configure(selectforeground="white")
        self.spbValuesOffset.configure(takefocus="0")
        self.spbValuesOffset.configure(textvariable=aqconfig_support.spinbox)

        self.tinValuesUnit = ttk.Entry(self.nbValue_Real)
        self.tinValuesUnit.place(x=150, y=200, height=21, width=80)
        self.tinValuesUnit.configure(textvariable=aqconfig_support.strValuesValueUnit)
        self.tinValuesUnit.configure(takefocus="")
        self.tinValuesUnit.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesUnit_tooltip = \
        ToolTip(self.tinValuesUnit, self.tooltip_font, '''enter a unnit for the value, e.g. kg, m, N, A...''')

        self.lblValuesBoolName = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolName.place(x=80, y=60, height=21, width=38)
        self.lblValuesBoolName.configure(activebackground="#f9f9f9")
        self.lblValuesBoolName.configure(activeforeground="black")
        self.lblValuesBoolName.configure(background="#d9d9d9")
        self.lblValuesBoolName.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolName.configure(foreground="#000000")
        self.lblValuesBoolName.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolName.configure(highlightcolor="black")
        self.lblValuesBoolName.configure(text='''Name''')

        self.lblValuesBoolAddress = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolAddress.place(x=20, y=30, height=21, width=50)
        self.lblValuesBoolAddress.configure(activebackground="#f9f9f9")
        self.lblValuesBoolAddress.configure(activeforeground="black")
        self.lblValuesBoolAddress.configure(background="#d9d9d9")
        self.lblValuesBoolAddress.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolAddress.configure(foreground="#000000")
        self.lblValuesBoolAddress.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolAddress.configure(highlightcolor="black")
        self.lblValuesBoolAddress.configure(text='''Address:''')

        self.lblValuesBoolBit0 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit0.place(x=30, y=90, height=21, width=38)
        self.lblValuesBoolBit0.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit0.configure(activeforeground="black")
        self.lblValuesBoolBit0.configure(background="#d9d9d9")
        self.lblValuesBoolBit0.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit0.configure(foreground="#000000")
        self.lblValuesBoolBit0.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit0.configure(highlightcolor="black")
        self.lblValuesBoolBit0.configure(text='''Bit 0''')

        self.lblValuesBoolBit1 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit1.place(x=30, y=120, height=21, width=38)
        self.lblValuesBoolBit1.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit1.configure(activeforeground="black")
        self.lblValuesBoolBit1.configure(background="#d9d9d9")
        self.lblValuesBoolBit1.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit1.configure(foreground="#000000")
        self.lblValuesBoolBit1.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit1.configure(highlightcolor="black")
        self.lblValuesBoolBit1.configure(text='''Bit 1''')

        self.lblValuesBoolBit2 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit2.place(x=30, y=150, height=21, width=38)
        self.lblValuesBoolBit2.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit2.configure(activeforeground="black")
        self.lblValuesBoolBit2.configure(background="#d9d9d9")
        self.lblValuesBoolBit2.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit2.configure(foreground="#000000")
        self.lblValuesBoolBit2.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit2.configure(highlightcolor="black")
        self.lblValuesBoolBit2.configure(text='''Bit 2''')

        self.lblValuesBoolBit3 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit3.place(x=30, y=180, height=21, width=38)
        self.lblValuesBoolBit3.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit3.configure(activeforeground="black")
        self.lblValuesBoolBit3.configure(background="#d9d9d9")
        self.lblValuesBoolBit3.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit3.configure(foreground="#000000")
        self.lblValuesBoolBit3.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit3.configure(highlightcolor="black")
        self.lblValuesBoolBit3.configure(text='''Bit 3''')

        self.lblValuesBoolBit4 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit4.place(x=30, y=210, height=21, width=38)
        self.lblValuesBoolBit4.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit4.configure(activeforeground="black")
        self.lblValuesBoolBit4.configure(background="#d9d9d9")
        self.lblValuesBoolBit4.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit4.configure(foreground="#000000")
        self.lblValuesBoolBit4.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit4.configure(highlightcolor="black")
        self.lblValuesBoolBit4.configure(text='''Bit 4''')

        self.lblValuesBoolBit5 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit5.place(x=30, y=240, height=21, width=38)
        self.lblValuesBoolBit5.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit5.configure(activeforeground="black")
        self.lblValuesBoolBit5.configure(background="#d9d9d9")
        self.lblValuesBoolBit5.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit5.configure(foreground="#000000")
        self.lblValuesBoolBit5.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit5.configure(highlightcolor="black")
        self.lblValuesBoolBit5.configure(text='''Bit 5''')

        self.lblValuesBoolBit6 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit6.place(x=30, y=270, height=21, width=38)
        self.lblValuesBoolBit6.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit6.configure(activeforeground="black")
        self.lblValuesBoolBit6.configure(background="#d9d9d9")
        self.lblValuesBoolBit6.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit6.configure(foreground="#000000")
        self.lblValuesBoolBit6.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit6.configure(highlightcolor="black")
        self.lblValuesBoolBit6.configure(text='''Bit 6''')

        self.lblValuesBoolBit7 = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolBit7.place(x=30, y=300, height=21, width=38)
        self.lblValuesBoolBit7.configure(activebackground="#f9f9f9")
        self.lblValuesBoolBit7.configure(activeforeground="black")
        self.lblValuesBoolBit7.configure(background="#d9d9d9")
        self.lblValuesBoolBit7.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolBit7.configure(foreground="#000000")
        self.lblValuesBoolBit7.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolBit7.configure(highlightcolor="black")
        self.lblValuesBoolBit7.configure(text='''Bit 7''')

        self.tinValuesBoolName0 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName0.place(x=80, y=90, height=21, width=300)
        self.tinValuesBoolName0.configure(textvariable=aqconfig_support.strValuesBoolName0)
        self.tinValuesBoolName0.configure(takefocus="")
        self.tinValuesBoolName0.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName0_tooltip = \
        ToolTip(self.tinValuesBoolName0, self.tooltip_font, '''enter a name for the first bit''')

        self.tinValuesBoolName1 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName1.place(x=80, y=120, height=21, width=300)
        self.tinValuesBoolName1.configure(textvariable=aqconfig_support.strValuesBoolName1)
        self.tinValuesBoolName1.configure(takefocus="")
        self.tinValuesBoolName1.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName1_tooltip = \
        ToolTip(self.tinValuesBoolName1, self.tooltip_font, '''enter a name for the second bit''')

        self.tinValuesBoolName2 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName2.place(x=80, y=150, height=21, width=300)
        self.tinValuesBoolName2.configure(textvariable=aqconfig_support.strValuesBoolName2)
        self.tinValuesBoolName2.configure(takefocus="")
        self.tinValuesBoolName2.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName2_tooltip = \
        ToolTip(self.tinValuesBoolName2, self.tooltip_font, '''enter a name for the third bit''')

        self.tinValuesBoolName3 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName3.place(x=80, y=180, height=21, width=300)
        self.tinValuesBoolName3.configure(textvariable=aqconfig_support.strValuesBoolName3)
        self.tinValuesBoolName3.configure(takefocus="")
        self.tinValuesBoolName3.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName3_tooltip = \
        ToolTip(self.tinValuesBoolName3, self.tooltip_font, '''enter a name for the fourth bit''')

        self.tinValuesBoolName4 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName4.place(x=80, y=210, height=21, width=300)
        self.tinValuesBoolName4.configure(textvariable=aqconfig_support.strValuesBoolName4)
        self.tinValuesBoolName4.configure(takefocus="")
        self.tinValuesBoolName4.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName4_tooltip = \
        ToolTip(self.tinValuesBoolName4, self.tooltip_font, '''enter a name for the fifth bit''')

        self.tinValuesBoolName5 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName5.place(x=80, y=240, height=21, width=300)
        self.tinValuesBoolName5.configure(textvariable=aqconfig_support.strValuesBoolName5)
        self.tinValuesBoolName5.configure(takefocus="")
        self.tinValuesBoolName5.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName5_tooltip = \
        ToolTip(self.tinValuesBoolName5, self.tooltip_font, '''enter a name for the sixth bit''')

        self.tinValuesBoolName6 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName6.place(x=80, y=270, height=21, width=300)
        self.tinValuesBoolName6.configure(textvariable=aqconfig_support.strValuesBoolName6)
        self.tinValuesBoolName6.configure(takefocus="")
        self.tinValuesBoolName6.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName6_tooltip = \
        ToolTip(self.tinValuesBoolName6, self.tooltip_font, '''enter a name for the eigth bit''')

        self.tinValuesBoolName7 = ttk.Entry(self.nbValue_Bool)
        self.tinValuesBoolName7.place(x=80, y=300, height=21, width=300)
        self.tinValuesBoolName7.configure(textvariable=aqconfig_support.strValuesBoolName7)
        self.tinValuesBoolName7.configure(takefocus="")
        self.tinValuesBoolName7.configure(cursor="ibeam")
        self.tooltip_font = "TkDefaultFont"
        self.tinValuesBoolName7_tooltip = \
        ToolTip(self.tinValuesBoolName7, self.tooltip_font, '''enter a name for the eigth bit''')

        self.spbValuesBoolAddress = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolAddress.place(x=80, y=30, height=19, width=60)
        self.spbValuesBoolAddress.configure(activebackground="#f9f9f9")
        self.spbValuesBoolAddress.configure(background="white")
        self.spbValuesBoolAddress.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolAddress.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolAddress.configure(font="TkDefaultFont")
        self.spbValuesBoolAddress.configure(foreground="black")
        self.spbValuesBoolAddress.configure(highlightbackground="black")
        self.spbValuesBoolAddress.configure(highlightcolor="black")
        self.spbValuesBoolAddress.configure(insertbackground="black")
        self.spbValuesBoolAddress.configure(selectbackground="blue")
        self.spbValuesBoolAddress.configure(selectforeground="white")
        self.spbValuesBoolAddress.configure(takefocus="0")
        self.spbValuesBoolAddress.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolAddress.configure(validate="focusout")

        self.lblValuesBoolGain = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolGain.place(x=410, y=60, height=21, width=38)
        self.lblValuesBoolGain.configure(activebackground="#f9f9f9")
        self.lblValuesBoolGain.configure(activeforeground="black")
        self.lblValuesBoolGain.configure(background="#d9d9d9")
        self.lblValuesBoolGain.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolGain.configure(foreground="#000000")
        self.lblValuesBoolGain.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolGain.configure(highlightcolor="black")
        self.lblValuesBoolGain.configure(text='''Gain''')

        self.lblValuesBoolOffset = tk.Label(self.nbValue_Bool)
        self.lblValuesBoolOffset.place(x=490, y=60, height=21, width=38)
        self.lblValuesBoolOffset.configure(activebackground="#f9f9f9")
        self.lblValuesBoolOffset.configure(activeforeground="black")
        self.lblValuesBoolOffset.configure(background="#d9d9d9")
        self.lblValuesBoolOffset.configure(disabledforeground="#a3a3a3")
        self.lblValuesBoolOffset.configure(foreground="#000000")
        self.lblValuesBoolOffset.configure(highlightbackground="#d9d9d9")
        self.lblValuesBoolOffset.configure(highlightcolor="black")
        self.lblValuesBoolOffset.configure(text='''Offset''')

        self.spbValuesBoolGain0 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain0.place(x=420, y=90, height=19, width=60)
        self.spbValuesBoolGain0.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain0.configure(background="white")
        self.spbValuesBoolGain0.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain0.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain0.configure(font="TkDefaultFont")
        self.spbValuesBoolGain0.configure(foreground="black")
        self.spbValuesBoolGain0.configure(highlightbackground="black")
        self.spbValuesBoolGain0.configure(highlightcolor="black")
        self.spbValuesBoolGain0.configure(insertbackground="black")
        self.spbValuesBoolGain0.configure(selectbackground="blue")
        self.spbValuesBoolGain0.configure(selectforeground="white")
        self.spbValuesBoolGain0.configure(takefocus="0")
        self.spbValuesBoolGain0.configure(textvariable=aqconfig_support.strValuesBoolGain0)
        self.spbValuesBoolGain0.configure(validate="focusout")

        self.spbValuesBoolGain1 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain1.place(x=420, y=120, height=19, width=60)
        self.spbValuesBoolGain1.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain1.configure(background="white")
        self.spbValuesBoolGain1.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain1.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain1.configure(font="TkDefaultFont")
        self.spbValuesBoolGain1.configure(foreground="black")
        self.spbValuesBoolGain1.configure(highlightbackground="black")
        self.spbValuesBoolGain1.configure(highlightcolor="black")
        self.spbValuesBoolGain1.configure(insertbackground="black")
        self.spbValuesBoolGain1.configure(selectbackground="blue")
        self.spbValuesBoolGain1.configure(selectforeground="white")
        self.spbValuesBoolGain1.configure(takefocus="0")
        self.spbValuesBoolGain1.configure(textvariable=aqconfig_support.strValuesBoolGain1)
        self.spbValuesBoolGain1.configure(validate="focusout")

        self.spbValuesBoolGain2 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain2.place(x=420, y=150, height=19, width=60)
        self.spbValuesBoolGain2.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain2.configure(background="white")
        self.spbValuesBoolGain2.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain2.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain2.configure(font="TkDefaultFont")
        self.spbValuesBoolGain2.configure(foreground="black")
        self.spbValuesBoolGain2.configure(highlightbackground="black")
        self.spbValuesBoolGain2.configure(highlightcolor="black")
        self.spbValuesBoolGain2.configure(insertbackground="black")
        self.spbValuesBoolGain2.configure(selectbackground="blue")
        self.spbValuesBoolGain2.configure(selectforeground="white")
        self.spbValuesBoolGain2.configure(takefocus="0")
        self.spbValuesBoolGain2.configure(textvariable=aqconfig_support.strValuesBoolGain2)
        self.spbValuesBoolGain2.configure(validate="focusout")

        self.spbValuesBoolGain3 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain3.place(x=420, y=180, height=19, width=60)
        self.spbValuesBoolGain3.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain3.configure(background="white")
        self.spbValuesBoolGain3.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain3.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain3.configure(font="TkDefaultFont")
        self.spbValuesBoolGain3.configure(foreground="black")
        self.spbValuesBoolGain3.configure(highlightbackground="black")
        self.spbValuesBoolGain3.configure(highlightcolor="black")
        self.spbValuesBoolGain3.configure(insertbackground="black")
        self.spbValuesBoolGain3.configure(selectbackground="blue")
        self.spbValuesBoolGain3.configure(selectforeground="white")
        self.spbValuesBoolGain3.configure(takefocus="0")
        self.spbValuesBoolGain3.configure(textvariable=aqconfig_support.strValuesBoolGain3)
        self.spbValuesBoolGain3.configure(validate="focusout")

        self.spbValuesBoolGain4 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain4.place(x=420, y=210, height=19, width=60)
        self.spbValuesBoolGain4.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain4.configure(background="white")
        self.spbValuesBoolGain4.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain4.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain4.configure(font="TkDefaultFont")
        self.spbValuesBoolGain4.configure(foreground="black")
        self.spbValuesBoolGain4.configure(highlightbackground="black")
        self.spbValuesBoolGain4.configure(highlightcolor="black")
        self.spbValuesBoolGain4.configure(insertbackground="black")
        self.spbValuesBoolGain4.configure(selectbackground="blue")
        self.spbValuesBoolGain4.configure(selectforeground="white")
        self.spbValuesBoolGain4.configure(takefocus="0")
        self.spbValuesBoolGain4.configure(textvariable=aqconfig_support.strValuesBoolGain4)
        self.spbValuesBoolGain4.configure(validate="focusout")

        self.spbValuesBoolGain5 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain5.place(x=420, y=240, height=19, width=60)
        self.spbValuesBoolGain5.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain5.configure(background="white")
        self.spbValuesBoolGain5.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain5.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain5.configure(font="TkDefaultFont")
        self.spbValuesBoolGain5.configure(foreground="black")
        self.spbValuesBoolGain5.configure(highlightbackground="black")
        self.spbValuesBoolGain5.configure(highlightcolor="black")
        self.spbValuesBoolGain5.configure(insertbackground="black")
        self.spbValuesBoolGain5.configure(selectbackground="blue")
        self.spbValuesBoolGain5.configure(selectforeground="white")
        self.spbValuesBoolGain5.configure(takefocus="0")
        self.spbValuesBoolGain5.configure(textvariable=aqconfig_support.strValuesBoolGain5)
        self.spbValuesBoolGain5.configure(validate="focusout")

        self.spbValuesBoolGain6 = tk.Spinbox(self.nbValue_Bool, from_=1.0, to=8192.0)
        self.spbValuesBoolGain6.place(x=420, y=270, height=19, width=60)
        self.spbValuesBoolGain6.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain6.configure(background="white")
        self.spbValuesBoolGain6.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain6.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain6.configure(font="TkDefaultFont")
        self.spbValuesBoolGain6.configure(foreground="black")
        self.spbValuesBoolGain6.configure(highlightbackground="black")
        self.spbValuesBoolGain6.configure(highlightcolor="black")
        self.spbValuesBoolGain6.configure(insertbackground="black")
        self.spbValuesBoolGain6.configure(selectbackground="blue")
        self.spbValuesBoolGain6.configure(selectforeground="white")
        self.spbValuesBoolGain6.configure(takefocus="0")
        self.spbValuesBoolGain6.configure(textvariable=aqconfig_support.strValuesBoolGain6)
        self.spbValuesBoolGain6.configure(validate="focusout")

        self.spbValuesBoolGain7 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolGain7.place(x=420, y=300, height=19, width=60)
        self.spbValuesBoolGain7.configure(activebackground="#f9f9f9")
        self.spbValuesBoolGain7.configure(background="white")
        self.spbValuesBoolGain7.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolGain7.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolGain7.configure(font="TkDefaultFont")
        self.spbValuesBoolGain7.configure(foreground="black")
        self.spbValuesBoolGain7.configure(highlightbackground="black")
        self.spbValuesBoolGain7.configure(highlightcolor="black")
        self.spbValuesBoolGain7.configure(insertbackground="black")
        self.spbValuesBoolGain7.configure(selectbackground="blue")
        self.spbValuesBoolGain7.configure(selectforeground="white")
        self.spbValuesBoolGain7.configure(takefocus="0")
        self.spbValuesBoolGain7.configure(textvariable=aqconfig_support.strValuesBoolGain7)
        self.spbValuesBoolGain7.configure(validate="focusout")

        self.spbValuesBoolOffset0 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset0.place(x=490, y=90, height=19, width=61)
        self.spbValuesBoolOffset0.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset0.configure(background="white")
        self.spbValuesBoolOffset0.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset0.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset0.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset0.configure(foreground="black")
        self.spbValuesBoolOffset0.configure(highlightbackground="black")
        self.spbValuesBoolOffset0.configure(highlightcolor="black")
        self.spbValuesBoolOffset0.configure(insertbackground="black")
        self.spbValuesBoolOffset0.configure(selectbackground="blue")
        self.spbValuesBoolOffset0.configure(selectforeground="white")
        self.spbValuesBoolOffset0.configure(takefocus="0")
        self.spbValuesBoolOffset0.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset0.configure(validate="focusout")

        self.spbValuesBoolOffset1 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset1.place(x=490, y=120, height=19, width=61)
        self.spbValuesBoolOffset1.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset1.configure(background="white")
        self.spbValuesBoolOffset1.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset1.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset1.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset1.configure(foreground="black")
        self.spbValuesBoolOffset1.configure(highlightbackground="black")
        self.spbValuesBoolOffset1.configure(highlightcolor="black")
        self.spbValuesBoolOffset1.configure(insertbackground="black")
        self.spbValuesBoolOffset1.configure(selectbackground="blue")
        self.spbValuesBoolOffset1.configure(selectforeground="white")
        self.spbValuesBoolOffset1.configure(takefocus="0")
        self.spbValuesBoolOffset1.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset1.configure(validate="focusout")

        self.spbValuesBoolOffset2 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset2.place(x=490, y=150, height=19, width=61)
        self.spbValuesBoolOffset2.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset2.configure(background="white")
        self.spbValuesBoolOffset2.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset2.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset2.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset2.configure(foreground="black")
        self.spbValuesBoolOffset2.configure(highlightbackground="black")
        self.spbValuesBoolOffset2.configure(highlightcolor="black")
        self.spbValuesBoolOffset2.configure(insertbackground="black")
        self.spbValuesBoolOffset2.configure(selectbackground="blue")
        self.spbValuesBoolOffset2.configure(selectforeground="white")
        self.spbValuesBoolOffset2.configure(takefocus="0")
        self.spbValuesBoolOffset2.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset2.configure(validate="focusout")

        self.spbValuesBoolOffset3 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset3.place(x=490, y=180, height=19, width=61)
        self.spbValuesBoolOffset3.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset3.configure(background="white")
        self.spbValuesBoolOffset3.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset3.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset3.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset3.configure(foreground="black")
        self.spbValuesBoolOffset3.configure(highlightbackground="black")
        self.spbValuesBoolOffset3.configure(highlightcolor="black")
        self.spbValuesBoolOffset3.configure(insertbackground="black")
        self.spbValuesBoolOffset3.configure(selectbackground="blue")
        self.spbValuesBoolOffset3.configure(selectforeground="white")
        self.spbValuesBoolOffset3.configure(takefocus="0")
        self.spbValuesBoolOffset3.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset3.configure(validate="focusout")

        self.spbValuesBoolOffset4 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset4.place(x=490, y=210, height=19, width=61)
        self.spbValuesBoolOffset4.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset4.configure(background="white")
        self.spbValuesBoolOffset4.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset4.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset4.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset4.configure(foreground="black")
        self.spbValuesBoolOffset4.configure(highlightbackground="black")
        self.spbValuesBoolOffset4.configure(highlightcolor="black")
        self.spbValuesBoolOffset4.configure(insertbackground="black")
        self.spbValuesBoolOffset4.configure(selectbackground="blue")
        self.spbValuesBoolOffset4.configure(selectforeground="white")
        self.spbValuesBoolOffset4.configure(takefocus="0")
        self.spbValuesBoolOffset4.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset4.configure(validate="focusout")

        self.spbValuesBoolOffset5 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset5.place(x=490, y=240, height=19, width=61)
        self.spbValuesBoolOffset5.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset5.configure(background="white")
        self.spbValuesBoolOffset5.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset5.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset5.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset5.configure(foreground="black")
        self.spbValuesBoolOffset5.configure(highlightbackground="black")
        self.spbValuesBoolOffset5.configure(highlightcolor="black")
        self.spbValuesBoolOffset5.configure(insertbackground="black")
        self.spbValuesBoolOffset5.configure(selectbackground="blue")
        self.spbValuesBoolOffset5.configure(selectforeground="white")
        self.spbValuesBoolOffset5.configure(takefocus="0")
        self.spbValuesBoolOffset5.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset5.configure(validate="focusout")

        self.spbValuesBoolOffset6 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset6.place(x=490, y=270, height=19, width=61)
        self.spbValuesBoolOffset6.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset6.configure(background="white")
        self.spbValuesBoolOffset6.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset6.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset6.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset6.configure(foreground="black")
        self.spbValuesBoolOffset6.configure(highlightbackground="black")
        self.spbValuesBoolOffset6.configure(highlightcolor="black")
        self.spbValuesBoolOffset6.configure(insertbackground="black")
        self.spbValuesBoolOffset6.configure(selectbackground="blue")
        self.spbValuesBoolOffset6.configure(selectforeground="white")
        self.spbValuesBoolOffset6.configure(takefocus="0")
        self.spbValuesBoolOffset6.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset6.configure(validate="focusout")

        self.spbValuesBoolOffset7 = tk.Spinbox(self.nbValue_Bool, from_=0.0, to=8192.0)
        self.spbValuesBoolOffset7.place(x=490, y=300, height=19, width=61)
        self.spbValuesBoolOffset7.configure(activebackground="#f9f9f9")
        self.spbValuesBoolOffset7.configure(background="white")
        self.spbValuesBoolOffset7.configure(buttonbackground="#d9d9d9")
        self.spbValuesBoolOffset7.configure(disabledforeground="#a3a3a3")
        self.spbValuesBoolOffset7.configure(font="TkDefaultFont")
        self.spbValuesBoolOffset7.configure(foreground="black")
        self.spbValuesBoolOffset7.configure(highlightbackground="black")
        self.spbValuesBoolOffset7.configure(highlightcolor="black")
        self.spbValuesBoolOffset7.configure(insertbackground="black")
        self.spbValuesBoolOffset7.configure(selectbackground="blue")
        self.spbValuesBoolOffset7.configure(selectforeground="white")
        self.spbValuesBoolOffset7.configure(takefocus="0")
        self.spbValuesBoolOffset7.configure(textvariable=aqconfig_support.strValuesBoolAddress)
        self.spbValuesBoolOffset7.configure(validate="focusout")
        self.nbValue.bind('<<NotebookTabChanged>>',lambda e:aqconfig_support.nbValue_TabChanged(e))

        self.btnValuesNew = ttk.Button(self.nbMain_Values)
        self.btnValuesNew.place(x=430, y=510, height=25, width=76)
        self.btnValuesNew.configure(takefocus="")
        self.btnValuesNew.configure(text='''New''')
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesNew_tooltip = \
        ToolTip(self.btnValuesNew, self.tooltip_font, '''clear all fields for a new value''')
        self.btnValuesNew.bind('<Button-1>',lambda e:aqconfig_support.btnValuesNew_LeftClick(e))

        self.btnValuesEdit = ttk.Button(self.nbMain_Values)
        self.btnValuesEdit.place(x=550, y=510, height=25, width=76)
        self.btnValuesEdit.configure(takefocus="")
        self.btnValuesEdit.configure(text='''Edit''')
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesEdit_tooltip = \
        ToolTip(self.btnValuesEdit, self.tooltip_font, '''jump to list and select value to edit''')
        self.btnValuesEdit.bind('<Button-1>',lambda e:aqconfig_support.btnValuesEdit_LeftClick(e))

        self.btnValuesSave = ttk.Button(self.nbMain_Values)
        self.btnValuesSave.place(x=670, y=510, height=25, width=76)
        self.btnValuesSave.configure(takefocus="")
        self.btnValuesSave.configure(text='''Save''')
        self.tooltip_font = "TkDefaultFont"
        self.btnValuesSave_tooltip = \
        ToolTip(self.btnValuesSave, self.tooltip_font, '''save this value settings to the list''')
        self.btnValuesSave.bind('<Button-1>',lambda e:aqconfig_support.btnValuesSave_LeftClick(e))

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.stwList = ScrolledTreeView(self.nbMain_List)
        self.stwList.place(x=0, y=0, height=574, width=956)
        self.stwList.configure(columns="name variable gain offset unit")
        self.stwList.configure(selectmode='browse')
        self.stwList.configure(takefocus="0")
        # build_treeview_support starting.
        self.stwList.heading("#0",text="number")
        self.stwList.heading("#0",anchor="center")
        self.stwList.column("#0",width="83")
        self.stwList.column("#0",minwidth="20")
        self.stwList.column("#0",stretch="1")
        self.stwList.column("#0",anchor="e")
        self.stwList.heading("name",text="name")
        self.stwList.heading("name",anchor="center")
        self.stwList.column("name",width="454")
        self.stwList.column("name",minwidth="20")
        self.stwList.column("name",stretch="1")
        self.stwList.column("name",anchor="w")
        self.stwList.heading("variable",text="variable")
        self.stwList.heading("variable",anchor="center")
        self.stwList.column("variable",width="153")
        self.stwList.column("variable",minwidth="20")
        self.stwList.column("variable",stretch="1")
        self.stwList.column("variable",anchor="w")
        self.stwList.heading("gain",text="gain")
        self.stwList.heading("gain",anchor="center")
        self.stwList.column("gain",width="83")
        self.stwList.column("gain",minwidth="20")
        self.stwList.column("gain",stretch="1")
        self.stwList.column("gain",anchor="w")
        self.stwList.heading("offset",text="offset")
        self.stwList.heading("offset",anchor="center")
        self.stwList.column("offset",width="82")
        self.stwList.column("offset",minwidth="20")
        self.stwList.column("offset",stretch="1")
        self.stwList.column("offset",anchor="w")
        self.stwList.heading("unit",text="unit")
        self.stwList.heading("unit",anchor="center")
        self.stwList.column("unit",width="82")
        self.stwList.column("unit",minwidth="20")
        self.stwList.column("unit",stretch="1")
        self.stwList.column("unit",anchor="w")
        self.stwList.bind('<ButtonRelease-1>',lambda e:aqconfig_support.stwList_LeftRelease(e))
        self.stwList.bind('<Double-Button-1>',lambda e:aqconfig_support.stwList_LeftDblClick(e))
        self.nbMain.bind('<<NotebookTabChanged>>',lambda e:aqconfig_support.nbMain_TabChanged(e))

        self.style.configure('TSizegrip', background=_bgcolor)
        self.sgMain = ttk.Sizegrip(top)
        self.sgMain.place(anchor='se', relx=1.0, rely=1.0)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





